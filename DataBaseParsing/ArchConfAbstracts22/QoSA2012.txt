3. Quality-optimized authentication of scalable media streams with flexible transcoding over wireless networks
Yi, Xiaowei (1); Li, Mingyu (1); Zheng, Gang (2); Zheng, Changwen (2)
Source: Proceedings - 2012 3rd FTRA International Conference on Mobile, Ubiquitous, and Intelligent Computing, MUSIC 2012, p 148-153, 2012, Proceedings - 2012 3rd FTRA International Conference on Mobile, Ubiquitous, and Intelligent Computing, MUSIC 2012; ISBN-13: 9780769547275; DOI: 10.1109/MUSIC.2012.33; Article number: 6305840; Conference: 2012 3rd FTRA International Conference on Mobile, Ubiquitous, and Intelligent Computing, MUSIC 2012, June 26, 2012 - June 28, 2012; Publisher: IEEE Computer Society
Author affiliation: (1) Institute of Software, Chinese Academy of Sciences, Graduate University of Chinese Academy of Sciences, Beijing, China (2) Institute of Software, Chinese Academy of Sciences, Beijing, China
Abstract: Media authentication is becoming an increasingly important issue in wireless transmission. Authenticated media content is required to be transcoded at intermediate to accommodate heterogeneous applications. In this paper, an efficient stream authentication approach is proposed for scalable lossy media streams. At first, we describe a joint coding and stream authentication (JCSA) media transmission framework for flexible and secure transcoding. After that, we propose a generalized quality-optimized stream authentication (QOSA) model to achieve optimal end-to-end quality and minimize the authentication overhead. Furthermore, an implementation on the consultative committee for space data systems image data compression (CCSDS IDC) coder is realized by using graph-based and error-correction coding based (ECC-based) authentication. Experimental results demonstrate that the proposed scheme is able to provide high packet-loss robustness at the cost of a very low overhead. � 2012 IEEE. (14 refs)
Main heading: Authentication
Controlled terms: Electronic document identification systems - Image coding - Image compression - Intelligent computing - Media streaming - Optimization
Uncontrolled terms: Consultative committee for space data systems - Error correction coding - Graph-based - Image data compression - Joint coding - Lossy media - Low overhead - Media content - Media security - Media streams - Media transmission - Secure transcoding - Stream authentication - Transcoding - Wireless transmissions
Classification Code: 723 Computer Software, Data Handling and Applications - 741 Light, Optics and Optical Devices - 921.5 Optimization Techniques
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

4. Architectural flexibility in a software-system�s life-cycle: Systematic construction and exploitation of flexibility
Naab, Matthias (1); Stammel, Johannes (2)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 13-22, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304701; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Fraunhofer IESE, Fraunhofer-Platz 1, 67663 Kaiserslautern, Germany (2) Karlsruhe Institute of Technology (KIT), Am Fasanengarten 5, 76131 Karlsruhe, Germany
Abstract: Software evolution is omnipresent and only with adequate flexibility it can be mastered in time and budget. Flexibility is supported by many architectural mechanisms, but more methodological support for a life-cycle-phases bridging approach of flexibility is still desirable. Therefore, in this paper we contribute a life-cycle-phases bridging approach for flexibility. Our approach supports architects during system design to achieve flexibility and during system evolution to exploit flexibility. We build on existing flexibility analysis techniques and extend them to give architects specific guidance and tool-support. For architecture design, we introduce an automated flexibility analysis with real-time feedback in architecture tools. For software evolution we provide a flexibility exploitation analysis which builds up on the results of the design time analysis and enables effective utilization of provided flexibility by deriving flexibility-aware work-plans. We demonstrate our approach by applying it to a checkin system, report first validation results from an empirical study and propose further validation activities. Copyright � 2012 ACM. (15 refs)
Main heading: Life cycle
Controlled terms: Software architecture
Uncontrolled terms: Architecture designs - Check-in - Design time - Empirical studies - Flexibility - Flexibility analysis - Real-time feedback - Software Evolution - System evolution - Validation results
Classification Code: 723.1 Computer Programming - 913.1 Production Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

5. Modeling dynamic virtualized resource landscapes
Huber, Nikolaus (1); Brosig, Fabian (1); Kounev, Samuel (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 81-90, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304711; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Karlsruhe Institute of Technology, Am Fasanengarten 5, Karlsruhe, Germany
Abstract: Modern data centers are subject to an increasing demand for flexibility. Increased flexibility and dynamics, however, also result in a higher system complexity. This complexity carries on to run-time resource management for Quality-of-Service (QoS) enforcement, rendering design-time approaches for QoS assurance inadequate. In this paper, we present a set of novel meta-models that can be used to describe the resource landscape, the architecture and resource layers of dynamic virtualized data center infrastructures, as well as their runtime adaptation and resource management aspects. With these meta-models we introduce new modeling concepts to improve model-based run-time QoS assurance. We evaluate our meta-models by modeling a representative virtualized service infrastructure and using these model instances for run-time resource allocation. The results demonstrate the benefits of the new meta-models and show how they can be used to improve model-based system adaptation and run-time resource management in dynamic virtualized data centers. Copyright � 2012 ACM. (21 refs)
Main heading: Information management
Controlled terms: Mathematical models - Natural resources management - Quality of service - Resource allocation
Uncontrolled terms: Data centers - Increased flexibility - Meta model - Model-based systems - Modeling concepts - Resource management - Resources - Runtime adaptation - Runtimes - System complexity - Virtualizations - Virtualized resources - Virtualized services
Classification Code: 921 Mathematics - 912.3 Operations Research - 903.2 Information Dissemination - 723 Computer Software, Data Handling and Applications - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television - 454 Environmental Engineering - 444 Water Resources
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

6. Metrics and techniques for quantifying performance isolation in cloud environments
Krebs, Rouven (1); Momm, Christof (1); Kounev, Samuel (2)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 91-100, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304713; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) SAP AG, 69190 Walldorf, Germany (2) Karlsruhe Institute of Technology, 76131 Karlsruhe, Germany
Abstract: The cloud computing paradigm enables the provision of costefficient IT-services by leveraging economies of scale and sharing data center resources efficiently among multiple independent applications and customers. However, the sharing of resources leads to possible interference between users and performance problems are one of the major obstacles for potential cloud customers. Consequently, it is one of the primary goals of cloud service providers to have different customers and their hosted applications isolated as much as possible in terms of the performance they observe. To make different offerings, comparable with regards to their performance isolation capabilities, a representative metric is needed to quantify the level of performance isolation in cloud environments. Such a metric should allow to measure externally by running benchmarks from the outside treating the cloud as a black box. In this paper, we propose three different types of novel metrics for quantifying the performance isolation of cloud-based systems and a simulation-based case study applying these metrics in the context of a Softwareas-a-Service (SaaS) scenario where different customers (tenants) share one single application instance. We consider four different approaches to achieve performance isolation and evaluate them based on the proposed metrics. The results demonstrate the effectiveness and practical usability of the proposed metrics in quantifying the performance isolation of cloud environments. Copyright � 2012 ACM. (22 refs)
Main heading: Sales
Controlled terms: Clouds
Uncontrolled terms: Isolation - Metric - Multi-tenancy - Performance - SaaS
Classification Code: 443 Meteorology - 911.4 Marketing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

7. Automotive ADLs: A study on enforcing consistency through multiple architectural levels
Dajsuren, Yanja (1); Van Den Brand, Mark (1); Serebrenik, Alexander (1); Huisman, Rudolf (2)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 71-80, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304710; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Eindhoven University of Technology, 5612 AZ Eindhoven, Netherlands (2) DAF Trucks NV, P.O. Box 90065, 5600 PT Eindhoven, Netherlands
Abstract: Over the last decade, Architecture Description Languages (ADLs) are attracting considerable attention by automotive companies because they consider them as one of the key solutions to improve the quality of automotive electronic and software systems. Automotive ADLs like EAST-ADL, AADL, TADL, and AML are being defined to address not only the architectural description or the representation issues but also as a method to enable requirements traceability and early analysis of a system. Besides the automotive specific ADLs, SysML and MARTE are emerging as viable modeling approaches for automotive systems engineering domain as well. However, all these modeling approaches lack the capability of ensuring the architectural quality. This paper identifies an architectural inconsistency between the different architectural levels as one of the key issues regarding architectural quality of automotive systems and proposes a rule-based method to enforce consistency between these levels. Since there is no standard ADL for automotive systems, we first evaluated a set of modeling approaches based on the automotive specific modeling requirements and selected SysML mainly due to its flexibility, and mature and accessible tool support. We modeled a Cruise Control system to demonstrate modeling of an automotive system in SysML and to evaluate the method for the architectural consistency checking using SysML. Copyright � 2012 ACM. (35 refs)
Main heading: Architecture
Controlled terms: Computer control - Software architecture
Uncontrolled terms: Architectural consistency - Architectural descriptions - Architectural levels - Architectural quality - Architecture description languages - Automotive ADL - Automotive companies - Automotive Systems - Automotive systems engineering - Consistency checking - EAST-ADL - Key solution - Modeling approach - Modeling requirements - Requirements traceability - Rule-based method - Software systems - Tool support
Classification Code: 402 Buildings and Towers - 723.1 Computer Programming - 731.5 Robotics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

8. Antipattern-based model refactoring for software performance improvement
Arcelli, Davide (1); Cortellessa, Vittorio (1); Trubiani, Catia (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 33-42, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304704; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Universit� degli Studi dell�Aquila, 67100 L�Aquila, Italy
Abstract: Identifying and removing the causes of poor performance in software systems are complex problems due to a variety of factors to take into account. Nowadays these problems are usually tackled after the software deployment only with human-based means, which frequently boil down to developer skills and previous experiences. Performance antipatterns can be used to cope with these problems since they capture typical design patterns that are known leading to performance problems, as well as refactoring actions that can be taken to remove them. The goal of this paper is to introduce an approach that allows the refactoring of architectural models, based on antipatterns, that aims at providing performance improvement. To this end, we use a Role-Based Modeling Language to represent: (i) antipattern problems as Source Role Models (SRMs), and (ii) antipattern solutions as Target Role Models (TRMs). Hence, SRM-TRM pairs represent new instruments in the hands of developers to achieve architectural model refactorings aimed at removing sources of performance problems. Model refactoring for antipattern removal can be in fact obtained by replacing an SRM with the corresponding TRM. This approach has been applied to a case study in the e-commerce domain, whose experimental results demonstrate its effectiveness. Copyright � 2012 ACM. (30 refs)
Uncontrolled terms: Anti-patterns - Architectural models - Complex problems - E-commerce domains - New instrument - Performance improvements - Performance problems - Poor performance - Refactorings - Role model - Role-based modeling - Roles - Software deployment - Software performance - Software systems - Typical design
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

9. Performance-driven architectural refactoring through bidirectional model transformations
Cortellessa, Vittorio (1); Eramo, Romina (1); Pierantonio, Alfonso (1); Tucci, Michele (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 55-60, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304707; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Dipartimento di Informatica, Universit� degli Studi dell�Aquila, Via Vetoio, Coppito, 67010, L�Aquila, Italy
Abstract: The generation of performance models from architectural models has been tackled with well-founded approaches in the last decade, whereas there is a clear lack of automation in the backward path that brings the analysis results back to the software architecture. It is common to iteratively modify a (generated) performance model until performance indices meet the requirements. However, propagating the performance model modifications back to the original architectural model is a complex problem. In this paper we make a first step in this direction, in that we use the JTL language for specifying a bidirectional model transformation between UML models and Queueing Networks, so working towards an automated round-trip process between software architectural models and performance models1. Copyright � 2012 ACM. (21 refs)
Main heading: Mathematical models
Controlled terms: Software architecture - Unified Modeling Language
Uncontrolled terms: Architectural models - Bidirectional model transformation - Bidirectional transformation - Complex problems - Performance indices - Performance Model - Performance Modeling - Performance-driven - Refactorings - Software architectural - UML Model
Classification Code: 723 Computer Software, Data Handling and Applications - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

10. Supporting quality-driven design decisions by modeling variability
Alebrahim, Azadeh (1); Heisel, Maritta (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 43-48, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304705; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Paluno - The Ruhr Institute for Software Technology, University of Duisburg, Essen, Germany
Abstract: Design decisions should take quality characteristics into account. To support such decisions, we capture various solution artifacts with different levels of satisfying quality requirements as variabilities in the solution space and provide them with rationales for selecting suitable variants. We present a UML-based approach to modeling variability in the problem and the solution space by adopting the notion of feature modeling. It provides a mapping of requirements variability to design solution variability to be used as a part of a general process for generating design alternatives. Our approach supports the software engineer in the process of decision-making for selecting suitable solution variants, reflecting quality concerns, and reasoning about it. Copyright � 2012 ACM. (20 refs)
Main heading: Design
Controlled terms: Decision making
Uncontrolled terms: Design alternatives - Design decisions - Design solutions - Feature modeling - Modeling variability - Quality characteristic - Quality requirements - Requirements variability - Software engineers - Solution space - Suitable solutions - UML-based approach - Variability modeling
Classification Code: 408 Structural Design - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

11. Improving performance predictions by accounting for the accuracy of composed performance models
Groenda, Henning (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 111-116, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304715; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) FZI Forschungszentrum Informatik, Haid-und-Neu-Str. 10-14, 76131 Karlsruhe, Germany
Abstract: Performance predictions on the software architecture level support the design and evaluation of component-based systems. Composable and parameterized models are used in current prediction approaches for reasoning. The actual model for an influencing factor or component of the system is the result of a trade-off between the required accuracy, prediction speed, and validation effort. Different models can have different accuracies and the overall effect on the prediction depends on their composition and used parameter values. Existing prediction approaches neglect to take into account this potentially difference in the accuracies of models. In this paper, we present an approach in which accuracy statements attached to composable performance models allow analyzing their influence on predictions without adding restrictions on the compositionality of each model. The resulting support for risk mitigation in decision making, prediction quality evaluation, as well as inaccuracy effect propagation from parts of the analyzed system on the overall prediction results are evaluated on a case study. Copyright � 2012 ACM. (21 refs)
Main heading: Quality control
Controlled terms: Forecasting - Software architecture
Uncontrolled terms: Accuracy - Component based systems - Compositionality - Improving performance - Influencing factor - Model composition - Parameter values - Parameterized model - Performance Model - Performance prediction - Prediction quality - Risk mitigation
Classification Code: 723.1 Computer Programming - 913.3 Quality Assurance and Control - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

12. DSL-based support for semi-automated architectural component model abstraction throughout the software lifecycle
Haitzer, Thomas (1); Zdun, Uwe (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 61-70, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304709; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Software Architecture Group, Faculty of Computer Science, University of Vienna, Austria
Abstract: In this paper we present an approach for supporting the semi-automated abstraction of architectural models throughout the software lifecycle. It addresses the problem that the design and the implementation of a software system often drift apart as software systems evolve, leading to architectural knowledge evaporation. Our approach provides concepts and tool support for the semi-automatic abstraction of architectural knowledge from implemented systems and keeping the abstracted architectural knowledge up-to-date. In particular, we propose architecture abstraction concepts that are supported through a domainspecific language (DSL). Our main focus is on providing architectural abstraction specifications in the DSL that only need to be changed, if the architecture changes, but can tolerate non-architectural changes in the underlying source code. The DSL and its tools support abstracting the source code into UML component models for describing the architecture. Once the software architect has defined an architectural abstraction in the DSL, we can automatically generate UML component models from the source code and check whether the architectural design constraints are fulfilled by the models. Our approach supports full traceability between source code elements and architectural abstractions, and allows software architects to compare different versions of the generated UML component model with each other. We evaluate our research results by studying the evolution of architectural abstractions in different consecutive versions and the execution times for five existing open source systems. Copyright � 2012 ACM. (41 refs)
Main heading: Open systems
Controlled terms: Abstracting - Architectural design - Automation - Computer programming languages - Computer software - DSL - Life cycle - Software architecture
Uncontrolled terms: Architectural abstraction - Architectural components - Model transformation - Software Evolution - UML
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications - 731 Automatic Control Principles and Applications - 732 Control Devices - 903.1 Information Sources and Analysis - 913.1 Production Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

13. Designing extreme distributed systems: Challenges and opportunities
Montresor, Alberto (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 1-2, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304698; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) University of Trento, Italy
Abstract: Modern distributed systems may consist of hundreds of thousands of computers, ranging from high-end powerful machines to low-end resource-constrained wireless devices. We label them as extreme distributed systems, as they push scalability and complexity well beyond traditional scenarios. Most of these systems are still organized along traditional lines with hierarchical, centralized control planes. Things are changing though: more and more decentralized organizations are emerging, exemplified by P2P systems, ad-hoc networks, vehicular networks, etc. Decentralized organizations often combine local decisionmaking with dissemination of information in order to improve the decision-making process, exemplified by many gossip-based protocols [3]. These protocols have been designed to solve problems as diverse as information dissemination [4], aggregation [6], topology maintenance [7], heartbeat synchronization [1], etc. Solutions to these problems share many common aspects, yet they have been published and developed in a confused and scattered way, leaving developers alone when integrating them into real applications. In this talk, we briefly introduce the gossip paradigm, showing how it can applied to solve several different problems, and we discuss what are the challenges that are left open for the researchers willing to provide a general framework for the design, implementation and deployment of gossip protocols. (8 refs)
Main heading: Distributed computer systems
Controlled terms: Hierarchical systems - Industrial applications - Information dissemination - Peer to peer networks - Problem solving
Uncontrolled terms: Centralized control - Decision making process - Distributed systems - Gossip - Gossip protocols - Gossip-based protocol - Local decision-making - P2P system - Peer to peer - Real applications - Resource-constrained - Topology maintenance - Vehicular networks - Wireless devices
Classification Code: 722 Computer Systems and Equipment - 722.4 Digital Computers and Systems - 903.2 Information Dissemination - 913 Production Planning and Control; Manufacturing - 921 Mathematics - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

14. Characterizing real-time reflexion-based architecture recovery: An in-vivo multi-case study
Ali, Nour (1); Rosik, Jacek (1); Buckley, Jim (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 23-32, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304702; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Lero-The Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland
Abstract: Architecting software systems is an integral part of the software development lifecycle. However, often the implementation of the resultant software ends up diverging from the designed architecture due to factors such as time pressures on the development team during implementation/evolution, or the lack of architectural awareness on the part of (possibly new) programmers. In such circumstances, the quality requirements addressed by the as-designed architecture are likely to be unaddressed by the as-implemented system. This paper reports on in-vivo case studies of the ACTool, a tool which supports real-time Reflexion Modeling for architecture recovery and on-going consistency. It describes our experience conducting architectural recovery sessions on three deployed, commercial software systems in two companies with the tool, as a first step towards ongoing architecture consistency in these systems. Our findings provide the first in-depth characterization of real-time Reflexion-based architectural recovery in practice, highlighting the architectural recovery agendas at play, the modeling approaches employed, the mapping approaches employed and characterizing the inconsistencies encountered. Our findings also discuss the usefulness of the ACTool for these companies. Copyright � 2012 ACM. (26 refs)
Main heading: Recovery
Controlled terms: Computer software - Industry - Research
Uncontrolled terms: ACTool - Architectural conformance - Architectural recovery - Architecture recovery - Commercial software systems - Development teams - In-vivo - Integral part - Modeling approach - Quality requirements - Software development life cycle - Software systems - Time pressures
Classification Code: 531 Metallurgy and Metallography - 723 Computer Software, Data Handling and Applications - 901.3 Engineering Research - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

15. Extraction of ownership object graphs from object-oriented code: An experience report
Abi-Antoun, Marwan (1); Ammar, Nariman (1); Hailat, Zeyad (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 133-142, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304719; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science, Wayne State University, United States
Abstract: Despite receiving much research attention, the extraction of runtime architecture remains hard. One approach, Scholia, relies on adding typecheckable annotations to the code, and uses static analysis to extract a global, hierarchical Ownership Object Graph (OOG). The OOG provides architectural abstraction by ownership hierarchy and by types, and can be abstracted into a run-time architecture represented in an architectural description language, for documentation or conformance analysis. We report on our experience in analyzing a medium-sized object-oriented system undergoing maintenance to: (1) extract an OOG; and (2) refine the OOG based on the maintainers� feedback. We evaluate the effectiveness of abstraction by ownership hierarchy and by types to extract an OOG that the system maintainers understand. We measure the extraction effort to be about 1 hour/KLOC. An evaluation with the lead main-tainer confirms that he understands abstraction by ownership hierarchy and by types. Finally, we illustrate how to incrementally refine an extracted OOG (without starting all over) to better match the maintainer�s mental model. Copyright � 2012 ACM. (25 refs)
Main heading: Static analysis
Controlled terms: Abstracting - Software architecture
Uncontrolled terms: Architectural description languages - Architecture recovery - Experience report - Mental model - Object graphs - Object-oriented code - Object-oriented system - Ownership type - Runtime architecture - Runtimes
Classification Code: 723.1 Computer Programming - 903.1 Information Sources and Analysis
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

16. Using architecture for multiple levels of access to an ecosystem platform
Eklund, Ulrik (1); Bosch, Jan (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 143-148, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304720; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Chalmers University of Technology Software, Engineering Div., Dept. of Computer Science and Engineering, SE-412 96 G�teborg, Sweden
Abstract: The paper presents a novel ecosystem for software-intensive embedded systems as an alternative to integration-centric software development. A set of necessary qualities is identified for the embedded platform enabling the ecosystem, i.e. deployability of new functions, maintainability over time, and configurability according to hardware within the product family. The embedded platform must support composability of software from different development stakeholders, such as the original equipment manufacturer, strategic and 3rd-party developers. The paper presents some key mechanisms for implementing the necessary certification in the platform that facilitates composability while still preserving dependability. A theoretical example of how this would look like in the automotive domain is presented, and an actual case of an in-vehicle platform implementing some of the mechanisms is shown. Copyright � 2012 ACM. (13 refs)
Main heading: Embedded systems
Controlled terms: Ecosystems - Software architecture
Uncontrolled terms: Automotive domains - Composability - Configurability - Deployability - Embedded platforms - In-vehicle - Multiple levels - Original equipment manufacturers - Product families - Software ecosystems
Classification Code: 454.3 Ecology and Ecosystems - 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

17. Optimizing the energy consumption of large-scale applications
Marzolla, Moreno (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 123-132, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304718; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science, University of Bologna, Mura A. Zamboni 7, I-40126 Bologna, Italy
Abstract: The energy consumption of large IT infrastructures is becoming a major concern, since it represents one of the principal operation costs. While modern devices (e.g., processors, disks) have the capability of reducing their power consumption by running at lower speed, this feature must be used with Care, as slowing down devices may increase the execution time of the applications beyond acceptable limits. In this paper we propose the qoS AWare energY managER (SAWYER), a framework for dynamically reducing the energy requirement of large-scale applications subject to response time constraints. SAWYER identifies the optimal performance/power consumption tradeoff such that the overall energy requirement is minimized and the application response time is kept below a pre-defined maximum value. This is achieved using a control loop based on a greedy optimization strategy which uses a Queueing Network performance model to quickly evaluate different power settings, ensuring that the expected system response time is kept below the threshold. SAWYER is completely transparent and does not require any modification of the application itself. Copyright � 2012 ACM. (34 refs)
Main heading: Optimization
Controlled terms: Energy utilization - Network performance
Uncontrolled terms: Acceptable limit - Control loop - Energy managers - Energy requirements - Execution time - Greedy optimization - Green computing - IT infrastructures - Large-scale applications - Maximum values - Operation cost - Optimal performance - Power settings - QOS management - Response-time constraint - System response time
Classification Code: 525.3 Energy Utilization - 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723 Computer Software, Data Handling and Applications - 921.5 Optimization Techniques
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

18. Experiences with early life-cycle performance modeling for architecture assessment
Brebner, Paul (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 149-154, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304721; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) NICTA/ANU, Canberra Research Laboratory, 7A London Circuit, Canberra, Australia
Abstract: In this paper we describe our preliminary experiences of a performance modeling �Blending� approach for early life-cycle architecture assessment and risk mitigation in a large enterprise integration project. The goal was to use performance modeling to assist with defining the requirements for the system and to identify areas of architecture and technology risk which could be addressed in future phases of the project. We modified our Service Oriented Performance Modeling approach to enable useful models to be constructed from a variety of imprecise and incomplete information sources prior to the existence of concrete requirements or implementations. Activities iterated over two phases and included scenario and workload modeling in phase 1, and integration infrastructure, workload and blended modeling in phase 2. The resulting models enabled early discovery and exploration of critical assumptions and architectural alternatives. One critical assumption is explored in more detail as an example. This is the impact of the specific location of services, which was predicted to require a large variation in resource requirements across the integration infrastructure. We demonstrate this with example models and explore possible solutions based on dynamic service load balancing. Copyright � 2012 ACM. (12 refs)
Main heading: Life cycle
Controlled terms: Blending - Integration
Uncontrolled terms: Architecture assessment - Enterprise Integration - In-phase - Incomplete information - ON dynamics - Performance Modeling - Resource requirements - Risk mitigation - Service Oriented - Specific location - Technology risks - Workload modeling
Classification Code: 802.3 Chemical Operations - 913.1 Production Engineering - 921.2 Calculus
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

19. NASA�s advanced multimission operations system: A case study in software architecture evolution
Barnes, Jeffrey M. (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 3-12, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304700; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Institute for Software Research, Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh, PA 15213, United States
Abstract: Virtually all software systems of significant size and longevity eventually undergo changes to their basic architectural structure. Such changes may be prompted by new feature requests, new quality attribute requirements, changing technology, or other reasons. Whatever the cause, software architecture evolution is commonplace in real-world software projects. However, research in this area has suffered from problems of validation; previous work has tended to make heavy use of toy examples and hypothetical scenarios and has not been well supported by real-world examples. To help address this problem, this paper presents a case study of an ongoing effort at the Jet Propulsion Laboratory to rearchitect the Advanced Multimission Operations System used to operate NASA�s deep-space and astrophysics missions. Based on examination of project documents and interviews with project personnel, I describe the goals and approach of this evolution effort, then demonstrate how approaches and formal methods from previous research in architecture evolution may be applied to this evolution while using languages and tools already in place at the Jet Propulsion Laboratory. Copyright � 2012 ACM. (32 refs)
Main heading: Software architecture
Controlled terms: Aircraft propulsion - Astrophysics - NASA - Research
Uncontrolled terms: Architectural structure - Astrophysics missions - Feature requests - Jet Propulsion Laboratory - Multi-mission operations - Project documents - Quality attributes - Software architecture evolution - Software Evolution - Software project - Software systems
Classification Code: 653.1 Aircraft Engines, General - 655 Spacecraft - 656 Space Flight - 723.1 Computer Programming - 901.3 Engineering Research - 931.1 Mechanics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

20. Position paper: Approach for architectural design and modelling with documented design decisions (ADMD3)
Durdik, Zoya (1); Reussner, Ralf (2)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 49-54, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304706; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Software Engineering (SE), Research Center for Information Technology, FZI 76131 Karlsruhe, Germany (2) Software Design and Quality (SDQ), Karlsruhe Institute of Technology, KIT 76131 Karlsruhe, Germany
Abstract: Documented design decisions simplify the evolution of software systems. However, currently design decisions are often either badly documented or are not documented at all. Relations between requirements, decisions, and architectural elements are missing, and architecture alternatives are not preserved. As a consequence it is hard to identify deprecated design solutions when requirements change In this position paper, we present an approach to document software architecture design decisions, together with related requirements and related architectural elements, through the goal-driven elicitation of those requirements needed to make a design decision. Therefore, we propose a process model and supporting meta-models, including a meta-model for a pattern catalogue. The speciality of this pattern catalogue is the inclusion of questions to drive requirements engineering to validate pattern selections, and to guide choosing the most appropriate pattern variant. The paper concludes with a discussion on the assumptions of the approach and possible approaches to empirical validation. Copyright � 2012 ACM. (28 refs)
Main heading: Software architecture
Controlled terms: Architectural design
Uncontrolled terms: Architectural element - Component selection - Design decisions - Design Patterns - Design solutions - Development process - Empirical validation - Meta model - Pattern selection - Position papers - Process model - Requirements change - Software architecture design - Software systems
Classification Code: 402 Buildings and Towers - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

21. A virtual deployment testing environment for enterprise software systems
Yu, Jian (1); Han, Jun (1); Schneider, Jean-Guy (1); Hine, Cameron (1); Versteeg, Steve (2)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 101-110, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304714; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Faculty of Information and Communication Technologies, Swinburne University of Technology, Hawthorn, VIC 3122, Australia (2) CA Labs, 380 St. Kilda Rd, Melbourne, VIC 3004, Australia
Abstract: Modern enterprise software systems often need to interact with a large number of heterogeneous systems in an enterprise IT environment. The distributedness, large-scale-ness, and heterogeneity of such environment makes it difficult to test a system�s quality attributes such as performance and scalability before it is actually deployed in the environment. In this paper, we present a Coloured Petri nets (CPN) based system behaviour emulation approach and a lightweight virtual testing framework for provisioning the deployment testing environment of an enterprise system so that its quality attributes, especially scalability, can be evaluated without physically connecting to the real production environment. This testing environment is scalable and has a flexible pluggable architecture to support the emulation of the behaviour of heterogeneous systems in the environment. To validate the feasibility of this approach, a CPN emulation model for LDAP has been developed and applied in testing the scalability of a real-life identity management system. An in-lab performance study has been conducted to demonstrate the effectiveness of this approach. Copyright � 2012 ACM. (29 refs)
Main heading: Industry
Controlled terms: Computer software - Petri nets - Scalability
Uncontrolled terms: Coloured Petri Nets - Emulation model - Enterprise IT - Enterprise software - Enterprise system - Heterogeneous systems - Identity management systems - Performance study - Pluggable architecture - Production environments - Quality attributes - System emulation - System�s quality - Testing environment - Virtual testing
Classification Code: 723 Computer Software, Data Handling and Applications - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing - 921.4 Combinatorial Mathematics, Includes Graph Theory, Set Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

22. Model-driven performance engineering of self-adaptive systems: A survey
Becker, Matthias (1); Luckey, Markus (2); Becker, Steffen (1)
Source: QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, p 117-122, 2012, QoSA�12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures; ISBN-13: 9781450313469; DOI: 10.1145/2304696.2304716; Conference: 8th International ACM SIGSOFT Conference on the Quality of Software Architectures, QoSA�12, June 25, 2012 - June 28, 2012; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Software Engineering Group, Heinz Nixdorf Institute, University of Paderborn, Zukunftsmeile 1, 33102 Paderborn, Germany (2) Department of Computer Science, University of Paderborn, Zukunftsmeile 1, 33102 Paderborn, Germany
Abstract: To meet quality-of-service requirements in changing environments, modern software systems adapt themselves. The structure, and correspondingly the behavior, of these systems undergoes continuous change. Model-driven performance engineering, however, assumes static system structures, behavior, and deployment. Hence, self-adaptive systems pose new challenges to model-driven performance engineering. There are a few surveys on self-adaptive systems, performance engineering, and the combination of both in the literature. In contrast to existing work, here we focus on model-driven performance analysis approaches. Based on a systematic literature review, we present a classification, identify open issues, and outline further research. Copyright � 2012 ACM. (23 refs)
Main heading: Engineering
Controlled terms: Adaptive systems - Quality of service - Surveys
Uncontrolled terms: Changing environment - Model-driven - Performance analysis approaches - Performance engineering - Self adaptation - Self-adaptive system - Software performance - Software systems - Static systems - Systematic literature review
Classification Code: 901 Engineering Profession - 723.4 Artificial Intelligence - 723 Computer Software, Data Handling and Applications - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television - 405.3 Surveying
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

200000. end
end