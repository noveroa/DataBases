3. Improved feedback for architectural performance prediction using software cartography visualizations
Krogmann, Klaus (1); Schweda, Christian M. (2); Buckl, Sabine (2); Kuperberg, Michael (1); Martens, Anne (1); Matthes, Florian (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 52-69, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_4; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Software Design and Quality Group, Universit�t Karlsruhe (TH), Germany (2) Software Engineering for Business Information Systems, Technische Universit�t M�nchen, Germany
Abstract: Software performance engineering provides techniques to analyze and predict the performance (e.g., response time or resource utilization) of software systems to avoid implementations with insufficient performance. These techniques operate on models of software, often at an architectural level, to enable early, design-time predictions for evaluating design alternatives. Current software performance engineering approaches allow the prediction of performance at design time, but often provide cryptic results (e.g., lengths of queues). These prediction results can be hardly mapped back to the software architecture by humans, making it hard to derive the right design decisions. In this paper, we integrate software cartography (a map technique) with software performance engineering to overcome the limited interpretability of raw performance prediction results. Our approach is based on model transformations and a general software visualization approach. It provides an intuitive mapping of prediction results to the software architecture which simplifies design decisions. We successfully evaluated our approach in a quasi experiment involving 41 participants by comparing the correctness of performance-improving design decisions and participants� time effort using our novel approach to an existing software performance visualization. � 2009 Springer Berlin Heidelberg. (33 refs)
Main heading: Software architecture
Controlled terms: Architecture - Computer software selection and evaluation - Design - Mapping - Maps - Visualization
Uncontrolled terms: Architectural levels - Design alternatives - Design decisions - Design time - Interpretability - Model transformation - Performance prediction - Quasi-experiments - Resource utilizations - Response time - Software performance engineerings - Software performance visualization - Software systems - Software visualization
Classification Code: 902.1 Engineering Graphics - 723.5 Computer Applications - 723.1 Computer Programming - 912.2 Management - 723 Computer Software, Data Handling and Applications - 405.3 Surveying - 402 Buildings and Towers - 408 Structural Design
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

4. A model-based framework to design and debug safe component-based autonomic systems
Waignier, Guillaume (1); Le Meur, Anne-Fran�oise (1); Duchien, Laurence (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 1-17, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_1; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Universit� Lille 1, LIFL CNRS UMR 8022, INRIA, Villeneuve d�Ascq 59650, France
Abstract: Building autonomic applications, which are systems that must adapt to their execution context, requires architects to calibrate and validate the adaptation rules by executing their applications in a realistic execution context. Unfortunately, existing works do not allow architects to monitor and visualize the impact of their rules, nor that they let them adjust these rules easily. This paper presents a model-based framework that enables architects to design and debug autonomic systems in an iterative and uniformed process. At design-time, architects can specify, using models, the application�s structure and properties, as well as the desired adaptation rules. At debugging-time, the running application and the models coexist such that the models control the application dynamic adaptation, thanks to a control loop that reified runtime events. Each triggered adaptation is first tested at the model level to check that no application property is broken. Furthermore, architects can at any time modify the models in order to adjust the adaptation rules or even parts of the application. All changes at the model level, if checked correct, are directly propagated to the running application. Our solution is generic regarding the underlying platforms and we provide a performance evaluation of our framework implementation. � 2009 Springer Berlin Heidelberg. (26 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation
Uncontrolled terms: Adaptation rules - Application properties - Autonomic applications - Autonomic Systems - Component based - Control loop - Debugging-time - Dynamic adaptations - Execution context - Model-based - Performance evaluation - Running applications - Runtimes - Structure and properties
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.5 Computer Applications - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

5. Achieving agility through architecture visibility
Hinsman, Carl (1); Sangal, Neeraj (2); Stafford, Judith (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 116-129, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_8; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) L.L.Bean, Inc., Freeport, ME, United States (2) Lattix, Inc., Andover, MA, United States (3) Tufts University, Medford, MA, United States
Abstract: L.L.Bean is a large retail organization whose development processes must be agile in order to allow rapid enhancement and maintenance of its technology infrastructure. Over the past decade L.L.Bean�s software code-base had become brittle and difficult to evolve. An effort was launched to identify and develop new approaches to software development that would enable ongoing agility to support the ever-increasing demands of a successful business. This paper recounts L.L.Bean�s effort in restructuring its code-base and adoption of process improvements that support an architecture-based agile approach to development, governance, and maintenance. Unlike traditional refactoring, this effort was guided by an architectural blueprint that was created in a Dependency Structure Matrix where the refactoring was first prototyped before being applied to the actual code base. � 2009 Springer Berlin Heidelberg. (20 refs)
Main heading: Software architecture
Controlled terms: Computer software maintenance - Computer software selection and evaluation
Uncontrolled terms: Agile approaches - Agility - Dependency - Dependency structure matrixes - Development process - New approaches - Process Improvement - Refactorings - Retail organizations - Software codes - Software development - Technology infrastructure
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.5 Computer Applications - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

6. Applying model transformations to optimizing real-time QoS configurations in DRE systems
Kavimandan, Amogh (1); Gokhale, Aniruddha (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 18-35, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_2; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) ISIS, Dept. of EECS, Vanderbilt University, Nashville, TN, United States
Abstract: The quality of a software architecture for component-based distributed systems is defined not just by its source code but also by other systemic artifacts, such as the assembly, deployment, and configuration of the application components and their component middleware. In the context of distributed, real-time, and embedded (DRE) component-based systems, bin packing algorithms and schedulability analysis have been used to make deployment and configuration decisions. However, these algorithms make only coarse-grained node assignments but do not indicate how components are allocated to different middleware containers on the node, which are known to impact runtime system performance and resource consumption. This paper presents a model transformation-based algorithm that combines user-specified quality of service (QoS) requirements with the node assignments to provide a finer level of granularity and precision in the deployment and configuration decisions. A beneficial side effect of our work lies in how these decisions can be leveraged by additional backend performance optimization techniques. We evaluate our approach and compare it against the existing state-of-the-art in the context of a representative DRE system. � 2009 Springer Berlin Heidelberg. (27 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Embedded systems - Middleware - Quality of service - Real time systems
Uncontrolled terms: Application components - Bin packing algorithm - Coarse-grained - Component based - Component middleware - Component-based systems - Deployment and configuration - Distributed systems - DRE systems - Graph/model transformations - Model transformation - Model-driven engineering - Performance optimizations - Resource consumption - Runtime systems - Schedulability analysis - Side effect - Source codes
Classification Code: 912.2 Management - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 722.4 Digital Computers and Systems - 722 Computer Systems and Equipment - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

7. Evolving industrial software architectures into a software product line: A case study
Koziolek, Heiko (1); Weiss, Roland (1); Doppelhamer, Jens (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 177-193, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_12; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) ABB Corporate Research, Industrial Software Systems, Wallstadter Str. 59, Ladenburg 68526, Germany
Abstract: Industrial software applications have high requirements on performance, availability, and maintainability. Additionally, diverse application landscapes of large corporate companies require systematic planning for reuse, which can be fostered by a software product-line approach. Analyses at the software architecture level can help improving the structure of the systems to account for extra-functional requirements and reuse. This paper reports a case study of product-line development for ABB�s robotics PC software. We analysed the software architectures of three existing robotics applications and identified their core assets. As a result, we designed a new product-line architecture, which targets at fulfilling various extra-functional requirements. This paper describes experiences and lessons learned during the project. � 2009 Springer Berlin Heidelberg. (19 refs)
Main heading: Software architecture
Controlled terms: Computer software reusability - Computer software selection and evaluation - Large scale systems - Maintainability - Research - Robotics
Uncontrolled terms: Core asset - Diverse applications - Functional requirement - Industrial software - Lessons learned - New product - Robotics applications - Software Product Line - Software products - Systematic planning
Classification Code: 961 Systems Science - 913.5 Maintenance - 912.3 Operations Research - 912.2 Management - 901.3 Engineering Research - 731.5 Robotics - 731.1 Control Systems - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 461.1 Biomedical Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

8. Toward a catalogue of architectural bad smells
Garcia, Joshua (1); Popescu, Daniel (1); Edwards, George (1); Medvidovic, Nenad (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 146-162, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_10; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) University of Southern California, Los Angeles, CA, United States
Abstract: An architectural bad smell is a commonly (although not always intentionally) used set of architectural design decisions that negatively impacts system lifecycle properties, such as understandability, testability, extensibility, and reusability. In our previous short paper, we introduced the notion of architectural bad smells and outlined a few common smells. In this paper, we significantly expand upon that work. In particular, we describe in detail four representative architectural smells that emerged from reverse-engineering and re-engineering two large industrial systems and from our search through case studies in research literature. For each of the four architectural smells, we provide illustrative examples and demonstrate the smell�s impact on system lifecycle properties. Our experiences indicate the need to identify and catalog architectural smells so that software architects can discover and eliminate them from system designs. � 2009 Springer Berlin Heidelberg. (29 refs)
Main heading: Software architecture
Controlled terms: Architectural design - Computer software selection and evaluation - Odors - Reusability
Uncontrolled terms: Illustrative examples - Industrial systems - Software architects - System design - System lifecycle - Testability - Understandability
Classification Code: 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 453.1 Water Pollution Sources - 912.2 Management - 452.3 Industrial Wastes - 451.1 Air Pollution Sources - 408.1 Structural Design, General - 402 Buildings and Towers - 452.1 Sewage
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

9. On the consolidation of data-centers with performance constraints
Anselmi, Jonatha (1); Cremonesi, Paolo (1); Amaldi, Edoardo (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 163-176, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_11; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Politecnico di Milano, DEI, Via Ponzio 34/5, Milan I-20133, Italy
Abstract: We address the data-center consolidation problem: given a working data-center, the goal of the problem is to choose which software applications must be deployed on which servers in order to minimize the number of servers to use while avoiding the overloading of system resources and satisfying availability constraints. This in order to tradeoff between quality of service issues and data-center costs. The problem is approached through a robust model of the data-center which exploits queueing networks theory. Then, we propose two mixed integer linear programming formulations of the problem able to capture novel aspects such as workload partitioning (load-balancing) and availability issues. A simple heuristic is proposed to compute solutions in a short time. Experimental results illustrate the impact of our approach with respect to a real-world consolidation project. � 2009 Springer Berlin Heidelberg. (12 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Integer programming - Linearization - Quality of service - Queueing networks - Queueing theory
Uncontrolled terms: Availability constraints - Consolidation projects - Data centers - Load-Balancing - Mixed integer linear programming - Performance constraints - Real-world - Robust models - Software applications - System resources
Classification Code: 922.1 Probability Theory - 921.5 Optimization Techniques - 921 Mathematics - 912.2 Management - 731.1 Control Systems - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

10. Timed simulation of extended AADL-based architecture specifications with timed abstract state machines
Bj�rnander, Stefan (1); Grunske, Lars (2); Lundqvist, Kristina (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 101-115, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_7; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) School of IDE, M�lardalen University, Box 883, V�ster�s 72123, Sweden (2) Faculty of ICT, Swinburne University of Technology, Hawthorn VIC 3122, Australia
Abstract: The Architecture Analysis and Design Language (AADL) is a popular language for architectural modeling and analysis of software intensive systems in application domains such as automotive, avionics, railway and medical systems. These systems often have stringent real-time requirements. This paper presents an extension to AADL�s behavior model using time annotations in order to improve the evaluation of timing properties in AADL. The translational semantics of this extension is based on mappings to the Timed Abstract State Machines (TASM) language. As a result, timing analysis with timed simulation or timed model checking is possible. The translation is supported by an Eclipse-based plug-in and the approach is validated with a case study of an industrial production cell system. � 2009 Springer Berlin Heidelberg. (33 refs)
Main heading: Software architecture
Controlled terms: Abstracting - Computer software selection and evaluation - Contour followers - Linguistics - Model checking - Real time systems - Simulators - Time measurement - Translation (languages)
Uncontrolled terms: AADL - Abstract state machines - Application domains - Architectural modeling - Architecture analysis - Architecture specification - Behavior Annex - Behavior model - Industrial production - Medical systems - Plug-ins - Real time requirement - Software intensive systems - TASM - Timed model checking - Timing Analysis - Timing properties - Translation
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.5 Computer Applications - 722.4 Digital Computers and Systems - 903.1 Information Sources and Analysis - 912.2 Management - 943.3 Special Purpose Instruments - 903.2 Information Dissemination - 721.2 Logic Elements - 621 Nuclear Reactors - 654.1 Rockets and Missiles - 655.2 Satellites - 603.1 Machine Tools, General - 657.1 Solar Energy and Phenomena - 671 Naval Architecture - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 662.1 Automobiles
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

11. Successful architectural knowledge sharing: Beware of emotions
Poort, Eltjo R. (1); Pramono, Agung (2); Perdeck, Michiel (1); Clerc, Viktor (2); Van Vliet, Hans (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 130-145, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_9; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Logica, P.O. Box 159, 1180 AD Amstelveen, Netherlands (2) VU University, Amsterdam, Netherlands
Abstract: This paper presents the analysis and key findings of a survey on architectural knowledge sharing. The responses of 97 architects working in the Dutch IT Industry were analyzed by correlating practices and challenges with project size and success. Impact mechanisms between project size, project success, and architectural knowledge sharing practices and challenges were deduced based on reasoning, experience and literature. We find that architects run into numerous and diverse challenges sharing architectural knowledge, but that the only challenges that have a significant impact are the emotional challenges related to interpersonal relationships. Thus, architects should be careful when dealing with emotions in knowledge sharing. � 2009 Springer Berlin Heidelberg. (17 refs)
Main heading: Software architecture
Controlled terms: Architecture - Computer software selection and evaluation - Project management
Uncontrolled terms: Architectural knowledge - Impact mechanism - Interpersonal relationship - IT industry - Knowledge-sharing - Project size - Project success - Significant impacts - Software Project Management
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.5 Computer Applications - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

12. Adaptive application composition in quantum chemistry
Li, Li (1); Kenny, Joseph P. (2); Wu, Meng-Shiou (3); Huck, Kevin (4); Gaenko, Alexander (3); Gordon, Mark S. (3); Janssen, Curtis L. (2); Curfman McInnes, Lois (1); Mori, Hirotoshi (5); Netzloff, Heather M. (3); Norris, Boyana (1); Windus, Theresa L. (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 194-211, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_13; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Argonne National Laboratory, Argonne, IL, United States (2) Sandia National Laboratories, Livermore, CA, United States (3) Ames Laboratory, Ames, IA, United States (4) University of Oregon, Eugene, OR, United States (5) Ochanomizu University, Japan
Abstract: Component interfaces, as advanced by the Common Component Architecture (CCA), enable easy access to complex software packages for high-performance scientific computing. A recent focus has been incorporating support for computational quality of service (CQoS), or the automatic composition, substitution, and dynamic reconfiguration of component applications. Several leading quantum chemistry packages have achieved interoperability by adopting CCA components. Running these computations on diverse computing platforms requires selection among many algorithmic and hardware configuration parameters; typical educated guesses or trial and error can result in unexpectedly low performance. Motivated by the need for faster runtimes and increased productivity for chemists, we present a flexible CQoS approach for quantum chemistry that uses a generic CQoS database component to create a training database with timing results and metadata for a range of calculations. The database then interacts with a chemistry CQoS component and other infrastructure to facilitate adaptive application composition for new calculations. � 2009 Springer Berlin Heidelberg. (40 refs)
Main heading: Software architecture
Controlled terms: Computer science - Computer software selection and evaluation - Dynamic models - Metadata - Quality of service - Quantum theory
Uncontrolled terms: Adaptive application - Automatic composition - Common component architecture - Complex software - Component application - Component interfaces - Computational quality - Computing platform - Database components - Dynamic re-configuration - Hardware configurations - Increased productivity - Runtimes - Scientific computing - Training database - Trial and error
Classification Code: 931.4 Quantum Theory; Quantum Mechanics - 921 Mathematics - 912.2 Management - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 722 Computer Systems and Equipment - 721 Computer Circuits and Logic Elements - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

13. Automated architecture consistency checking for model driven software development
Biehl, Matthias (1, 2); L�we, Welf (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 36-51, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_3; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Software Technology Group, V�xj� University, Sweden (2) Embedded Control Systems, Royal Institute of Technology, Sweden
Abstract: When software projects evolve their actual implementation and their intended architecture may drift apart resulting in problems for further maintenance. As a countermeasure it is good software engineering practice to check the implementation against the architectural description for consistency. In this work we check software developed by a Model Driven Software Development (MDSD) process. This allows us to completely automate consistency checking by deducing information from implementation, design documents, and model transformations. We have applied our approach on a Java project and found several inconsistencies hinting at design problems. With our approach we can find inconsistencies early, keep the artifacts of an MDSD process consistent, and, thus, improve the maintainability and understandability of the software. � 2009 Springer Berlin Heidelberg. (28 refs)
Main heading: Software architecture
Controlled terms: Computer software maintenance - Computer software selection and evaluation - Maintainability - Model checking - Software design
Uncontrolled terms: Architectural descriptions - Consistency checking - Design documents - Design problems - Model transformation - Model-Driven Software Development - Software engineering practices - Software project - Understandability
Classification Code: 913.5 Maintenance - 912.2 Management - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 721.2 Logic Elements - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

14. Compositional prediction of timed behaviour for process control architecture
Chan, Kenneth (1); Poernomo, Iman (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 86-100, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_6; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, King�s College London Strand, London WC2R 2LS, United Kingdom
Abstract: The timing of properties is an essential consideration in the design, implementation and maintenance of embedded software development. In this paper, we present an approach to the prediction of timed and probabilistic nonfunctional properties of process control architectures. Our approach involves a novel compositional approach to model checking of statements in Probabilistic Computational Tree Logic (PCTL). � 2009 Springer Berlin Heidelberg. (9 refs)
Main heading: Software architecture
Controlled terms: Computer software maintenance - Computer software selection and evaluation - Embedded software - Model checking - Probabilistic logics - Process control
Uncontrolled terms: Computational tree logic - Embedded software development - Essential considerations - Non functional properties
Classification Code: 912.2 Management - 731 Automatic Control Principles and Applications - 723.5 Computer Applications - 922.1 Probability Theory - 723.1 Computer Programming - 721.2 Logic Elements - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

15. Predicting performance properties for open systems with KAMI
Ghezzi, Carlo (1); Tamburrelli, Giordano (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 5581 LNCS, p 70-85, 2009, Architectures for Adaptive Software Systems - 5th International Conference on the Quality of Software Architectures, QoSA 2009, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642023509, ISBN-13: 9783642023507; DOI: 10.1007/978-3-642-02351-4_5; Conference: 5th International Conference on the Quality of Software Architectures, QoSA 2009, June 24, 2009 - June 26, 2009; Publisher: Springer Verlag
Author affiliation: (1) Dipartimento di Elettronica e Informazione, Deep-SE Group, Politecnico di Milano, Via Golgi 40, Milano 20133, Italy
Abstract: Modern software systems are built to operate in an open world setting. By this we mean software that is conceived as a dynamically adaptable and evolvable aggregate of components that may change at run time to respond to continuous changes in the external world. Moreover, the software designer may have different degrees of ownership, control, and visibility of the different parts that compose an application. In this scenario, design-time assumptions may be based on knowledge that may have different degrees of accuracy for the different parts of the application and of the external world that interacts with the system. Furthermore, even if initially accurate, they may later change after the system is deployed and running. In this paper we investigate how these characteristics influence the way engineers can deal with performance attributes, such as response time. Following a model-driven approach, we discuss how to use at design time performance models based on Queuing Networks to drive architectural reasoning. We also discuss the possible use of keeping models alive at run time. This enables automatic re-estimation of model parameters to reflect the real behavior of the running system, re-execution of the model, and detection of possible failure, which may trigger a reaction that generates suitable architectural changes. We illustrate our contribution through a running example and numerical simulations that show the effectiveness of the proposed approach. � 2009 Springer Berlin Heidelberg. (32 refs)
Main heading: Mathematical models
Controlled terms: Computer software selection and evaluation - Open systems - Parameter estimation - Simulators - Software architecture
Uncontrolled terms: Architectural changes - Design time - Evolvable - Model driven approach - Model parameters - Numerical simulation - Open world - Performance attributes - Performance Model - Performance properties - Queuing network - Re-execution - Response time - Running systems - Runtimes - Software designers - Software systems
Classification Code: 921 Mathematics - 912.2 Management - 731.1 Control Systems - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 722 Computer Systems and Equipment - 671 Naval Architecture - 662.1 Automobiles - 657.1 Solar Energy and Phenomena - 655.2 Satellites - 654.1 Rockets and Missiles - 621 Nuclear Reactors
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

