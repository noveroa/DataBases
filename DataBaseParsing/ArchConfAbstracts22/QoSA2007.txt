2. Pre-emptive adaptation through classical control theory
Duzbayev, Nurzhan (1); Poernomo, Iman (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 164-181, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_10; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) King�s College London, Strand, London WC2R2LS, United Kingdom
Abstract: Self-adaptive systems are capable of changing their behaviour at runtime to meet target constraints. An important research question is how quality of service models can inform runtime adaptation. This paper presents a solution to the problem by application of control theory to improve performance of queued systems by means of architectural adaptation. In a paper presented at the previous year�s QoSA conference, we showed how Auto-Regressive Integrated Moving Average techniques can be utilized to forecast how Quality of Service (QoS) characteristics are likely to evolve in the near future. This is particularly important in cases where systems can be adapted to counter QoS constraint violations. In this paper, we show how, given a similar type of QoS characteristic forecasts, strategies of architectural adaptation can be implemented that pre-emptively avoid QoS violations. The novelty of our approach is that we use classical control theory to ensure that our adaptation strategies are stable, in the sense that they do not oscillate between choices. We provide a description of how our control theoretic model can be implemented using context-based interception in .NET via model driven engineering. � 2008 Springer-Verlag Berlin Heidelberg. (15 refs)
Main heading: Quality of service
Controlled terms: Adaptive systems - Automation - Computer software selection and evaluation - Control systems - Control theory - Cybernetics - DC motors - Embedded systems - Forecasting - Quality control - Software architecture - System theory - Technology
Uncontrolled terms: Adaptation strategies - Auto-regressive - Classical control theory - Constraint violations - International conferences - Model-driven engineering - Moving averages - Previous year - Quality of softwares - Run-time - Run-time adaptations - Self-adaptive systems
Classification Code: 961 Systems Science - 913.3 Quality Assurance and Control - 912.2 Management - 901 Engineering Profession - 731.1 Control Systems - 731 Automatic Control Principles and Applications - 723.4 Artificial Intelligence - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 722 Computer Systems and Equipment - 716 Telecommunication; Radar, Radio and Television - 705.3.2 DC Motors - 461.9 Biology
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

4. Using planning techniques to assist quality-driven architectural design exploration
D�az-Pace, J. Andr�s (1, 3); Campo, Marcelo R. (2, 3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 33-52, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_3; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Software Engineering Institute, 4500 Fifth Av., Pittsburgh, PA 15213-3890, United States (2) ISISTAN Research Institute, Facultad de Cs. Exactas, Pje. Arroyo Seco - Campus Universitario, (7000) Tandil, Buenos Aires, Argentina (3) CONICET, Argentina
Abstract: A software architecture design captures the main decisions regarding the quality-attribute requirements for a system. When constructing these designs, the architect normally evaluates and combines solutions with different quality-attribute tradeoffs. This exploration of the design space can be seen as a searching problem, in which the architect�s expertise is what directs the search towards a �good-enough� solution. Nonetheless, given complexity of this search, assisting the architect with adequate tool support becomes indispensable. In this context, we have investigated the utility of a planning-based tool approach called DesignBots to explore design alternatives. Specifically, the approach considers quality-attribute issues as goals achievable by combinations of architectural mechanisms, which are generated by a mixed-initiative and hierarchical planning engine. Our experiences with DesignBots show that the planning approach effectively helps architects to explore design alternatives productively. � 2008 Springer-Verlag Berlin Heidelberg. (23 refs)
Main heading: Architectural design
Controlled terms: Architecture - Chlorine compounds - Computer software selection and evaluation - Design - Software architecture - Software design - Solutions
Uncontrolled terms: Artificial intelligence techniques - Design alternatives - Design Exploration - Design spaces - Hierarchical planning - International conferences - Mixed initiatives - Planning techniques - Quality of softwares - Quality-driven mechanisms - Software architecture design - Tool support - Tool supports
Classification Code: 402 Buildings and Towers - 408 Structural Design - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 801 Chemistry - 804.1 Organic Compounds
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

5. Factors influencing industrial practices of software architecture evaluation: An empirical investigation
Ali Babar, Muhammad (1); Bass, Len (2); Gorton, Ian (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 90-107, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_6; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Lero, University of Limerick, Ireland (2) Software Engineering Institute, Carnegie Mellon University, United States (3) Pacific Northwest National Laboratory, United States
Abstract: To support software architecture evaluation practices, several efforts have been made to provide a basis for comparing and assessing evaluation methods, document various best practices, and report the factors that may influence industrial practices. However, there has been no study to explore the experiences and perceptions of architects for determining the factors that influence architecture evaluation practices in a wide range of organizations. Hence, there is little empirically founded knowledge available on the factors that influence the industrial practices of software architecture evaluation. The goal of this paper is to report the results of an empirical study aimed at gaining an understanding of different factors involved in evaluating architectures in industry. The results of this study shed light on the factors that influence architecture evaluation practices based on the experiences and perception of architects who regularly evaluate architectures of various sizes of applications. It also discusses some of the strategies that practitioners apply to deal with the influence of the identified factors. � 2008 Springer-Verlag Berlin Heidelberg. (30 refs)
Main heading: Software architecture
Controlled terms: Architecture - Computer software selection and evaluation - Paper coating
Uncontrolled terms: Applications. - Architecture evaluation - Best Practices - Empirical investigation - Empirical studies - Evaluation methods - Industrial practices - International conferences - Quality of softwares - Software architecture evaluation
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 811.1.1 Papermaking Processes
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

6. Architectural knowledge: Getting to the core
De Boer, Remco C. (1); Farenhorst, Rik (1); Lago, Patricia (1); Van Vliet, Hans (1); Clerc, Viktor (1); Jansen, Anton (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 197-214, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_12; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) VU University Amsterdam, Netherlands (2) University of Groningen, Netherlands
Abstract: Different organizations or organizational units are likely to store and maintain different types of information about their software architectures. This inhibits effective management of architectural knowledge. We experimented with a model of architectural knowledge to characterize the use of architectural knowledge in four different organizations. Based on this experimentation we identified four perspectives on architectural knowledge management, and additionally adjusted the model to better align theory with practice. The refined model defines a minimal set of concepts with supposedly complete coverage of the architectural knowledge domain. Because of the minimalistic aspect of the model, we refer to it as a �core model� of architectural knowledge. Supporting evidence for the validity of our model, i.e. the supposed complete coverage, has been obtained by an attempt to falsify this claim through a comparison with selected literature. Application of the core model to characterize the use of architectural knowledge indicates possible areas of improvement for architectural knowledge management in the four organizations. � 2008 Springer-Verlag Berlin Heidelberg. (21 refs)
Main heading: Software architecture
Controlled terms: Administrative data processing - Computer software selection and evaluation - Data mining - Industrial management - Information management - Information science - Knowledge management - Management information systems - Management science
Uncontrolled terms: Architectural knowledge - Core modeling - Effective management - International conferences - Organizational units - Quality of softwares - Refined model
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 723.5 Computer Applications - 903 Information Science - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

7. Customizing traceability links for the unified process
M�der, Patrick (1); Philippow, Ilka (1); Riebisch, Matthias (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 53-71, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_4; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Software Systems/Process Informatics Group, Technical University of Ilmenau, Germany
Abstract: Traceability links are generally recognised as helpful means for improving the effectiveness of evolutionary development processes. However, their practical usage in analysis and design is still unsatisfying, especially due to the high effort required for creation, maintenance and verification of the links, and due to lacking or missing methods and tools for their management. In this paper a concept for the systematic management of traceability is introduced, adapted for the and integrated into the Unified Process as one of the widely accepted software development methods. As an extension, requirements templates are applied to facilitate a tool supported analysis of natural language texts in use case descriptions. Template-based analyses enable a determination of types of terms and a check of their correct application as well as a recognition of implicit connections between development artefacts. A rule set is defined as a first step towards a powerful support of traceability handling. In the ongoing project the rule set is enhanced by heuristics and semantic-based rules to a whole framework of methods and rules. � 2008 Springer-Verlag Berlin Heidelberg. (14 refs)
Main heading: Software architecture
Controlled terms: Arsenic - Computer software maintenance - Computer software selection and evaluation - Information theory - Laws and legislation - Software engineering
Uncontrolled terms: Analysis and design - Evolutionary development - Evolutionary development processes - Glossary - International conferences - Natural language texts - Object-oriented methods - Quality of softwares - Requirements engineering - Requirements templates - Rule set - Software development methods - Systematic management - Traceability link - Traceability model - Unified process - Use cases
Classification Code: 716.1 Information Theory and Signal Processing - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 804 Chemical Products Generally - 971 Social Sciences
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

8. Reusable architectural decision models for enterprise application development
Zimmermann, Olaf (1); Gschwind, Thomas (1); K�ster, Jochen (1); Leymann, Frank (2); Schuster, Nelly (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 15-32, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_2; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) IBM Research GmbH, Zurich Research Laboratory, S�umerstrasse 4, R�schlikon 8803, Switzerland (2) Institute of Architecture of Application Systems, Universit�t Stuttgart, Universit�tsstrae 38, Stuttgart 70569, Germany
Abstract: In enterprise application development and other software construction projects, a critical success factor is to make sound architectural decisions. Text templates and tool support for capturing architectural decisions exist, but have failed to reach broad adoption so far. One of the inhibitors we perceived on large-scale industry projects is that architectural decision capturing is regarded as a retrospective and therefore unwelcome documentation task which does not provide any benefit during the original design work. A major problem of such a retrospective approach is that the decision rationale is not available to decision makers when they identify, make, and enforce decisions. Often a large, possibly distributed, community of decision makers is involved in these three steps. In this paper, we propose a new conceptual framework for proactive decision identification, decision maker collaboration, and decision enforcement. Based on a meta model capturing reuse and collaboration aspects explicitly, our framework instantiates decision models from requirements models and re usable decision templates. These templates capture know ledge gained on other projects em ploy ing the same architectural style. As an exemplary application of these concepts to service-oriented architecture shows, reusable architectural decision models can speed up the decision identification and improve the quality of the decision making. Reusable architectural decision models can also simplify the exchange of architecture design rationale within and between project teams, and expose decision out come as model transformation parameters in model-driven software development. � 2008 Springer-Verlag Berlin Heidelberg. (35 refs)
Main heading: Architectural design
Controlled terms: Architecture - Computer software reusability - Computer software selection and evaluation - Construction industry - Decision making - Information services - Problem solving - Quality of service - Software architecture - Software design
Uncontrolled terms: Architectural decision - Architectural decisions - Architectural knowledge - Architectural styles - Architecture designs - Conceptual frameworks - Critical success factor - Decision maker - Decision makers - Decision modeling - Enterprise application development - Industry projects - International conferences - MDA - Meta modelling - Model transformations - Model-driven software development - Original design - Project teaming - Quality of softwares - Requirements modeling - Service-Oriented Architecture - SOA - Software Construction - Speed ups - Tool supports
Classification Code: 903.4 Information Services - 723.4 Artificial Intelligence - 723.1 Computer Programming - 912.2 Management - 723 Computer Software, Data Handling and Applications - 405 Construction Equipment and Methods; Surveying - 402 Buildings and Towers - 716 Telecommunication; Radar, Radio and Television
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

9. The architect�s mindset
Clerc, Viktor (1); Lago, Patricia (1); Van Vliet, Hans (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 231-249, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_14; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, VU University, Amsterdam, Netherlands
Abstract: Software architecture and software architecture practices become increasingly important for information systems since they enable reasoning on the design of the system. The concept of architectural knowledge, i.e. architectural design decisions and the resulting design, plays a pivotal role in architecture. In order to get the most out of architectural knowledge, we need insight into the ways in which architectural knowledge is used. Currently, we lack this insight. We performed survey-based research in the Netherlands to collect feedback on the importance of architectural knowledge for the daily work of practitioners in architecture. We present our findings using two perspectives: the architectural roles practitioners fulfill and the architecture level practitioners are engaged in. We use these perspectives to construct and reflect on the architect�s mindset on architectural knowledge. This mindset of architects reveals an approach which is focused on �to create and communicate� rather than �to review and maintain� an architecture. � 2008 Springer-Verlag Berlin Heidelberg. (29 refs)
Main heading: Architectural design
Controlled terms: Architecture - Computer software selection and evaluation - Design - Software architecture - Software design
Uncontrolled terms: Architectural knowledge - Architecture level - Design decisions - Information systems - International conferences - Netherlands - Pivotal role - Quality of softwares - Survey-based research
Classification Code: 402 Buildings and Towers - 408 Structural Design - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

10. Predicting the performance of component-based software architectures with different usage profiles
Koziolek, Heiko (1, 2); Becker, Steffen (1, 2); Happe, Jens (1, 2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 145-163, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_9; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Graduate School Trustsoft, University of Oldenburg, Germany (2) Department of Software Design and Quality, University of Karlsruhe, Germany
Abstract: Performance predictions aim at increasing the quality of software architectures during design time. To enable such predictions, specifications of the performance properties of individual components within the architecture are required. However, the response times of a component might depend on its configuration in a specific setting and the data send to or retrieved from it. Many existing prediction approaches for component-based systems neglect these influences. This paper introduces extensions to a performance specification language for components, the Palladio Component Model, to model these influences. The model enables to predict response times of different architectural alternatives. A case study on a component-based architecture for a web portal validates the approach and shows that it is capable of supporting a design decision in this scenario. � 2008 Springer-Verlag Berlin Heidelberg. (29 refs)
Main heading: Architectural design
Controlled terms: Architecture - Computer software selection and evaluation - Electronic commerce - Forecasting - Software architecture - Software design - Specifications
Uncontrolled terms: Case studies - Component modelling - Component-based architectures - Component-based software - Component-based systems - Design decisions - Design time - Individual components - International conferences - Performance predictions - Performance properties - Performance specifications - Quality of softwares - Response times - Web portals
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 723.5 Computer Applications - 902.2 Codes and Standards - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

11. The influence of CMMI on establishing an architecting process
Poort, Eltjo R. (1); Postema, Herman (1); Key, Andrew (2); De With, Peter H. N. (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 215-230, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_13; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) LogicaCMG, P.O. Box 159, Amstelveen 1180 AD, Netherlands (2) LogicaCMG, Stephenson House, 75 Hampstead Road, London NW1 2PL, United Kingdom (3) Eindhoven Univ. of Technol., P.O. Box 513, Eindhoven 5600 MB, Netherlands
Abstract: A large IT company is creating a generic architecting process. Since the company has set an objective to achieve Maturity Level 3 of the Capability Maturity Model Integration (CMMI), the process needs to comply with the relevant requirements set by the CMMI. This paper presents the elicitation of such requirements, and the resulting set of requirements. It analyzes their potential impact on generic architecting processes found in literature. It turns out that many key architectural concepts are at best loosely defined in the CMMI. CMMI is strong in support of the development-related architecting activities, but gives only indirect support for other architecting activities, particularly in a product development context. � 2008 Springer-Verlag Berlin Heidelberg. (13 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Product development - Project management - Software engineering
Uncontrolled terms: Architectural concepts - Capability Maturity Model Integration - International conferences - Potential impacts - Process needs - Quality of softwares
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 912.2 Management - 913.6 Product Development; Concurrent Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

12. Resource architecture and continuous performance engineering
Woodside, Murray (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 1-14, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_1; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Dept. of Systems and Computer Engineering, Carleton University, Ottawa, Canada
Abstract: The concept of resource architecture has been introduced to describe the association of operations with resources, and interactions between these operations. This paper explains resource architecture with examples, and how it can be used in performance engineering throughout the life of a project. � 2008 Springer-Verlag Berlin Heidelberg. (17 refs)
Main heading: Software architecture
Controlled terms: Architecture - Association reactions - Computer software selection and evaluation - Technology
Uncontrolled terms: International conferences - Performance engineering - Quality of softwares
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 802.2 Chemical Reactions - 901 Engineering Profession
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

13. A bayesian model for predicting reliability of software systems at the architectural level
Roshandel, Roshanak (1); Medvidovic, Nenad (2); Golubchik, Leana (2, 3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 108-126, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_7; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Computer Science and Software Engineering Department, Seattle University, Seattle, WA 98122, United States (2) Computer Science Department, University of Southern California, Los Angeles, CA 90089, United States (3) EE Systems Department, University of Southern California, IMSC, Los Angeles, CA 90089, United States
Abstract: Modern society relies heavily on complex software systems for everyday activities. Dependability of these systems thus has become a critical feature that determines which products are going to be successfully and widely adopted. In this paper, we present an approach to modeling reliability of software systems at the architectural level. Dynamic Bayesian Networks are used to build a stochastic reliability model that relies on standard models of software architecture, and does not require implementation-level artifacts. Reliability values obtained via this approach can aid the architect in evaluating design alternatives. The approach is evaluated using sensitivity and uncertainty analysis. � 2008 Springer-Verlag Berlin Heidelberg. (27 refs)
Main heading: Software architecture
Controlled terms: Architecture - Bayesian networks - Chlorine compounds - Computer software - Computer software selection and evaluation - Inference engines - Quality assurance - Reliability - Sensitivity analysis - Software reliability - Standardization - Standards - Stochastic models - Uncertainty analysis
Uncontrolled terms: Bayesian modelling - Complex software systems - Design alternatives - Dynamic bayesian networks - International conferences - Quality of softwares - Reliability modeling - Software systems - Standard models
Classification Code: 921.4 Combinatorial Mathematics, Includes Graph Theory, Set Theory - 921 Mathematics - 913.3 Quality Assurance and Control - 902.2 Codes and Standards - 804.1 Organic Compounds - 922.1 Probability Theory - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 421 Strength of Building Materials; Mechanical Properties - 402 Buildings and Towers - 723.4.1 Expert Systems
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

14. Performance prediction of Web Service workflows
Marzolla, Moreno (1); Mirandola, Raffaela (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 127-144, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_8; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) INFN Sezione di Padova, via Marzolo 8, Padova 35131, Italy (2) Dip. di Elettronica e Informazione, Politecnico di Milano, via Ponzio 34/5, Milano 20133, Italy
Abstract: Web Services play an important role in the SOA paradigm, as they allow services to be selected on-the-fly to build applications out of existing components. In this scenario, the BPEL notation can be used as an orchestration language which allows the user to describe interactions with Web Services in a standard way. The performance of a BPEL workflow is a very important factor for deciding which components must be selected, or to choose whether a given sequence of interactions can provide the requested quality of service. Due to its very dynamic nature, workflow performance evaluation can not be accomplished using traditional, heavy-weight techniques. In this paper we present a multi-view approach for the performance prediction of service-based applications encompassing both users and service provider(s) perspectives. As a first step towards the realization of this integrated framework we present an efficient approach for performance assessment of Web Service workflows described using the BPEL notation. Starting from annotated BPEL and WSDL specifications, we derive performance bounds on response time and throughput. In such a way users are able to assess the efficiency of a BPEL workflow, while service provider(s) can perform sizing studies or estimate performance gains of alternative upgrades to existing systems. To bring this approach to fruition we developed a prototype tool called bpel2qnbound, using which we analyze a simple case study. � 2008 Springer-Verlag Berlin Heidelberg. (27 refs)
Main heading: Quality of service
Controlled terms: Ad hoc networks - Computer software selection and evaluation - Flow interactions - Forecasting - Information services - Management - Modernization - Software architecture - Specifications - Standards - Web services - World Wide Web
Uncontrolled terms: Case studies - Dynamic natures - Existing systems - Integrated frameworks - International conferences - Multi views - On-the-fly - Performance Assessment - Performance bounds - Performance evaluation - Performance gains - Performance predictions - Prototype tools - Quality of softwares - Response time - Service provider - Service-based
Classification Code: 912.2 Management - 903.4 Information Services - 902.2 Codes and Standards - 901 Engineering Profession - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 722.3 Data Communication, Equipment and Techniques - 716 Telecommunication; Radar, Radio and Television - 631.1 Fluid Flow, General
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

15. Extending the capabilities of component models for embedded systems
Kuz, Ihor (1); Liu, Yan (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 182-196, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_11; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) National ICT Australia
Abstract: Component-based development helps to improve the modularity and reusability of embedded systems. Component models devised for embedded systems are typically restricted due to the limited computing, storage and power resources of the target systems. Most existing component models for embedded systems therefore only support a static component architecture and provide a simple and lightweight core. With the increasing demand for more feature-rich embedded systems these component architectures must be extended. In order to remain useful for the development of resource-restricted embedded systems, however, the extensions must be optional. Creating such extensions requires a cost-effective development process that can produce reusable, rather than application- specific, extensions. This necessitates a systematic approach to seamlessly integrate application specific requirements of the extension, the existing component model and the constraints of the computing environment. In this paper we propose a scenario-based architectural approach to extending the capabilities of the CAmkES component model. This approach is used to distil application specific requirements and computing constraints, summarise generic scenarios, drive the extension to the core CAmkES architecture. We illustrate our approach with a case study involving the addition of dynamic capabilities to CAmkES. � 2008 Springer-Verlag Berlin Heidelberg. (16 refs)
Main heading: Embedded systems
Controlled terms: Architecture - Codes (symbols) - Computer programming languages - Computer software reusability - Computer software selection and evaluation - Computer systems - Cost effectiveness - Energy policy - Integrated circuits - Software architecture
Uncontrolled terms: Application-specific - Application-specific requirements - Architectural approach - Architecture design - Case studies - Component - Component architectures - Component modelling - Component-based development - Computing environments - Development processes - Dynamic Capabilities - Embedded system - Extension - International conferences - Power resources - Quality of softwares - Scenario - Systematic approaches - Target systems
Classification Code: 911.2 Industrial Economics - 723.2 Data Processing and Image Processing - 723.1.1 Computer Programming Languages - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications - 722 Computer Systems and Equipment - 714.2 Semiconductor Devices and Integrated Circuits - 525.6 Energy Policy - 402 Buildings and Towers
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

16. Architecture recovery and evaluation aiming at program understanding and reuse
Vasconcelos, Aline (1, 2); Werner, Cl�udia (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4880 LNCS, p 72-89, 2007, Software Architectures, Components, and Applications - Third International Conference on Quality of Software Architectures, QoSA 2007, Revised Selected Papers; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3540776176, ISBN-13: 9783540776178; DOI: 10.1007/978-3-540-77619-2_5; Conference: 3rd International Conference on Quality of Software Architectures, QoSA 2007, July 11, 2007 - July 13, 2007; Sponsor: Tufts University; University of Karlsruhe (TH); Publisher: Springer Verlag
Author affiliation: (1) Federal University of Rio de Janeiro, COPPE/UFRJ, Systems Engineering and Computer Science Program, P.O. Box 68511, Rio de Janeiro, RJ 21945-970, Brazil (2) CEFET Campos, Federal Center for Technological Education of Campos, Dr. Siqueira, 273, Campos dos Goytacazes, RJ 28030-130, Brazil
Abstract: Organizations use to have implemented systems that represent a large effort and budget invested in the past. These systems are evolved and adapted over time in order to accommodate technological and business changes. Moreover, big companies often develop similar systems within the same domain. This has been motivating them to migrate to reuse approaches, such as domain engineering and product line. However, existing systems in general don�t have up-to-date architectural documentation that can help in their maintenance and reuse. Considering this scenario, this paper presents an approach to architecture recovery and evaluation that aims at extracting knowledge from existing systems to help in their understanding and reuse. This extracted knowledge is represented through a recovered application architectural model composed by architectural elements that represent domain concepts traced to implemented functional requirements, which may help in generating reusable artifacts. In order to evaluate the approach feasibility, an experimental study was performed. � 2008 Springer-Verlag Berlin Heidelberg. (26 refs)
Main heading: Computer software reusability
Controlled terms: Architecture - Computer software maintenance - Computer software selection and evaluation - Digital signal processing - Software architecture - Technology
Uncontrolled terms: Architectural elements - Architectural modeling - Architecture evaluation - Architecture recovery - Business changes - Data mining - Domain concepts - Domain engineering - Dynamic analysis - Existing systems - Experimental studies - Functional Requirements - International conferences - Product lines - Program understanding - Quality of softwares - Software inspection - Software reuse
Classification Code: 402 Buildings and Towers - 716.1 Information Theory and Signal Processing - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 901 Engineering Profession
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village

