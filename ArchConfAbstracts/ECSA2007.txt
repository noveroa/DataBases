1. Issues in applying empirical software engineering to software architecture
Falessi, D. (1); Kruchten, P.; Cantone, G.
Source: Software Architecture. First European Conference, ECSA 2007, p 257-62, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) DISP, Univ. of Rome, Rome, Italy
Abstract: Empirical software engineering focuses on the evaluation of software engineering technologies, such as processes and tools, by comparing related sets of data. It has contributed a valuable body of knowledge in several areas such as software economics and software quality, which in turn drove important advances in related tools and techniques. Unfortunately this is not (yet) the case for software architecture, where empirical studies are still few. Such a condition demands for further empirical research efforts on the topic of software architecture and suggests specific areas of improvement. In this paper we discuss several essential, innovative, and maybe provocative, questions such as: Why do we have so few applications of empirical software engineering on software architecture? Which are the main difficulties? What can we do? (21 refs)
Inspec controlled terms: software architecture - software quality
Uncontrolled terms: empirical software engineering - software architecture - software economics - software quality
Classification Code: C6110B Software engineering techniques - C0310F Software management
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
2. Hierarchical verification in Maude of LfP software architectures
Jerad, C. (1); Barkaoui, K.; Grissa Touzi, A.
Source: Software Architecture. First European Conference, ECSA 2007, p 156-70, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) LSTS - ENIT, Tunis, Tunisia
Abstract: Software architecture description languages allow software designers to focus on high level aspects of an application by abstracting from details. In general, a system’s architecture is specified in a hierarchical way. In fact, hierarchical components hide, at each level, the complexity of the sub-entities composing the system. As rewriting logic is a natural semantic framework for representing concurrency, parallelism, communication and interaction, it can be used for systems specification and verification. In this paper, we show how we can take advantage of hierarchical modeling of software systems specified with LfP, to prototype model checking process using Maude system. This approach allows us to hide and show, freely and easily, encapsulated details by moving between hierarchical levels. Thus, state explosion problem is mastered and reduced. In addition, system’s maintainability and error detection become easier and faster. (17 refs)
Inspec controlled terms: formal verification - rewriting systems - software architecture - specification languages
Uncontrolled terms: hierarchical verification - LfP software architecture - software architecture description language - system architecture - rewriting logic - natural semantic framework - systems specification - systems verification - hierarchical modeling - software systems - model checking - Maude system
Classification Code: C6110B Software engineering techniques - C4210L Formal languages and computational linguistics - C6110F Formal methods
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
3. FIESTA: a generic framework for integrating new functionalities into software architectures
Waignier, G. (1); Le Meur, A.-F. (1); Duchien, L. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 76-91, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) INRIA, Univ. des Sci. et Technol. de Lille, Villeneuve d’Ascq, France
Abstract: When an application must evolve to cope with new context and user requirements, integrating new functionalities into its software architecture is necessary. The architect has thus to manually modify the architecture description, which is often tedious and error prone. In this paper, we propose FIESTA, a generic framework for automatically integrating new functionalities into an architecture description. Our approach is inspired by TranSAT, an integration framework. However, TranSAT is dedicated to a specific architecture description language (ADL) while our approach is ADL-independent. We have performed a domain analysis, studying for many ADLs how to integrate new functionalities. Based on this analysis, we have defined a generic ADL model to manipulate and reason about architectural elements that are involved in integration. Furthermore, we have developed a generic integration engine. (21 refs)
Inspec controlled terms: formal specification - software architecture
Uncontrolled terms: FIESTA framework - software architectures - context requirements - user requirements - ADL model - architecture description language - abstract specification
Classification Code: C6110B Software engineering techniques - C6110F Formal methods
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
4. Informed evolution
Falkner, K. (1); Balasubramaniam, D.; Detmold, H.; Munro, D.S.
Source: Software Architecture. First European Conference, ECSA 2007, p 288-91, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Sch. of Comput. Sci., Univ. of Adelaide, Adelaide, SA, Australia
Abstract: Ageless software evolves, to meet new requirements, without reducing its efficiency or understandability. Here we introduce a methodology called informed evolution for supporting the construction and evolution of ageless software. This methodology integrates the software architecture (structure and constraints) and the system implementation (behaviour) within system execution. Evolution is effected by evolution patterns which are in turn guided by constraints specified in the software architecture. The availability of the software architecture and implementation at run-time ensures that changes are informed by design and implementation decisions, thus preserving efficiency and understandability. In this paper, we outline informed evolution, and describe how evolution patterns may be expressed for systems developed using this methodology. (5 refs)
Inspec controlled terms: software architecture - software prototyping
Uncontrolled terms: informed evolution - ageless software - software architecture - evolution patterns
Classification Code: C6110B Software engineering techniques
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
5. The art and science of software architecture
Brown, A.W. (1); McDermid, J.A.
Source: Software Architecture. First European Conference, ECSA 2007, p 237-56, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Software Group, IBM, Raleigh, NC, United States
Abstract: The past 20 years has seen significant investments in the theory and practice of software architecture. However, architectural deficiencies are frequently cited as a key factor in the shortcomings and failures that lead to unpredictable delivery of complex operational systems. Here, we consider the art and science of software architecture: we explore the current state of software architecture, identify key architectural trends and directions in academia and industry, and highlight some of the architectural research challenges which need to be addressed. The paper proposes an agenda of research activities to be carried out by a partnership between academia and industry. While challenges exist in many domains, for this paper we draw examples from one area of particular concern: safety-critical systems. (44 refs)
Inspec controlled terms: safety-critical software - software architecture
Uncontrolled terms: software architecture - complex operational systems - safety-critical systems
Classification Code: C6110B Software engineering techniques - C6130S Data security
IPC Code: G06F9/44 - G06F21/00
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
6. Supporting the automatic generation of proto-architectures
Navarro, E. (1); Letelier, P.; Jaen, J.; Ramos, I.
Source: Software Architecture. First European Conference, ECSA 2007, p 325-9, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Comput. Syst. Dept., UCLM, Albacete, Spain
Abstract: Many issues must be taken into account in order to provide a right specification of the system-to-be to meet properly the established requirements. In this sense, the introduction of proper supporting techniques able to automate as much as possible the process means a clear advantage. In this work, we introduce a tool called MORPHEUS that gives support to our proposal by providing traceability throughout the process of generation of proto-architecture from requirements. (8 refs)
Inspec controlled terms: software architecture
Uncontrolled terms: proto-architectures automatic generation - MORPHEUS - software architecture
Classification Code: C6110B Software engineering techniques
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
7. First class connectors for prototyping service oriented architectures
Kjaer, K.E. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 171-8, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., Univ. of Aarhus, Arhus, Denmark
Abstract: Prototyping service oriented architectures based on Web services is a complex and time consuming process. Several steps, some of them complicated, are required for even the simplest application. Therefore, it is desirable to be able to create prototypes using more familiar constructs, entirely within a single programming language, and then define some of the components as Web services, and others as clients. We present a framework which enables programmers to create Web services and clients in ArchJava, an extension to Java which supports components and connectors as first class entities, by defining interfaces to services as ports on components. This supports rapid creation of prototypes by defining a component and connector structure of a Web service based system in ArchJava, and then later, with only minor modifications, change the prototype to use Web services. The services and client components will not be aware of this. Prom their point of view they are talking through connectors. Client components can also be connected to existing Web services. (15 refs)
Inspec controlled terms: Java - object-oriented programming - software architecture - software prototyping - Web services
Uncontrolled terms: first class connectors - service oriented architecture prototyping - Web services - programming language - ArchJava
Classification Code: C6150N Distributed systems software - C6110J Object-oriented programming - C6110B Software engineering techniques
IPC Code: G06F9/44 - G06F9/46
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
8. Lightweight Web services for high performance computing
Santos, A. (1); Almeida, F. (1); Blanco, V. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 225-36, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dipt. Estadi’stica, Comput. Univ. de La Laguna, La Laguna, Spain
Abstract: Web Services-based technologies have emerged as a technological alternative for computational web portals. Facilitating access to distributed resources through web interfaces while simultaneously ensuring security is one of the main goals in most of the currently existing manifold tools and frameworks. OpenCF, the Open Source Computational Framework that we have developed, shares these objectives and adds others, like enforced portability, genericity, modularity and compatibility with a wide range of High Performance Computing Systems. OpenCF has been implemented using lightweight technologies (Apache + PHP), resulting in a robust framework ready to run out of the box that is compatible with standard security requirements. (18 refs)
Inspec controlled terms: portals - public domain software - security of data - Web services
Uncontrolled terms: lightweight Web services - Web services-based technologies - computational Web portals - distributed resources - Web interfaces - open source computational framework - high performance computing systems - OpenCF
Classification Code: C6150N Distributed systems software - C6130S Data security
IPC Code: G06F9/46 - G06F21/00
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
9. On the modularity of software architectures: a concern-driven measurement framework
Sant’Anna, C. (1); Figueiredo, E.; Garcia, A.; Lucena, C.J.P.
Source: Software Architecture. First European Conference, ECSA 2007, p 207-24, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Comput. Sci. Dept., Pontifical Catholic Univ., Rio de Janeiro, Brazil
Abstract: Much of the complexity of software architecture design is derived from the inadequate modularization of key broadly-scoped concerns, such as exception handling, distribution, and persistence. However, conventional architecture metrics are not sensitive to the driving architectural concerns, thereby leading a number of false positives and false negatives in the design assessment process. Therefore, there is a need for assessment techniques that support a more effective identification of early design modularity anomalies relative to crosscutting concerns. In this context, this paper proposes a concern-driven measurement framework for assessing architecture modularity. It encompasses a mechanism for documenting architectural concerns, and a suite of concern-oriented architecture metrics. We evaluated the usefulness of the proposed framework while comparing the modularity of architecture design alternatives in three different case studies. (24 refs)
Inspec controlled terms: software architecture - software metrics
Uncontrolled terms: software architecture design - concern-driven measurement framework - key broadly-scoped concern - software metrics
Classification Code: C6110B Software engineering techniques - C6110S Software metrics
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
10. UML profile for the platform independent modelling of service-oriented architectures
Lopez-Sanz, M. (1); Acuna, C.J. (1); Cuesta, C.E. (1); Marcos, E. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 304-7, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Comput. Languages & Syst. II Dept., Rey Juan Carlos Univ., Mostoles, Spain
Abstract: The vast diversity of implementation and support platforms for service-oriented architectures (such as Web, Grid or even CORBA) increases the complexity of the development process of service-based systems. To reduce it, both the architectural properties of the SOC paradigm and a development approach based on the MDA proposal can be studied. This work describes a UML profile for the PIM-level service-oriented architectural modelling, as well as the correspondent metamodel. PIM (Platform Independent Model) level is chosen because it does not reflect constraints about any specific platform or implementation technology. The proposal sketched in this article is part of our research of a service-oriented development method (SOD-M) called MIDAS. (9 refs)
Inspec controlled terms: software architecture - Unified Modeling Language
Uncontrolled terms: UML profile - platform independent modelling - service-oriented architectures - service-based systems
Classification Code: C6110B Software engineering techniques - C6140D High level languages
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
11. Effective tool support for architectural knowledge sharing
Farenhorst, R. (1); Lago, P. (1); van Vliet, H. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 123-38, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., VU Univ. Amsterdam, Amsterdam, Netherlands
Abstract: Knowledge management plays an important role in the software architecting process. Recently, this role has become more apparent by a paradigm shift that views a software architecture as the set of architectural design decisions it embodies. This shift has sparked the discussion in both research and practice on how to best facilitate sharing of so-called architectural knowledge, and how tools can best be employed. In order to design successful tool support for architectural knowledge sharing it is important to take into account what software architecting really entails. To this end, in this paper we define the main characteristics of architecting, based on observations in a large software development organization, and state-of-the-art literature in software architecture. Based on the defined characteristics, we determine how best practices known from knowledge management could be used to improve architectural knowledge sharing. This results in the definition of a set of desired properties of architectural knowledge sharing tools. To improve the status quo of architectural knowledge sharing tools, we present the design of an architectural knowledge sharing platform. (39 refs)
Inspec controlled terms: design - knowledge management - software architecture - software development management - software tools
Uncontrolled terms: knowledge management - software architecture - architectural design decisions - software development organization - architectural knowledge sharing tools
Classification Code: C6110B Software engineering techniques - C0310F Software management - C6115 Programming support
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
12. Wireless sensor network application development: an architecture-centric MDE approach
Losilla, F. (1); Vicente-Chicote, C. (1); Alvarez, B. (1); Iborra, A. (1); Sanchez, P. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 179-94, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Div. de Sist. e Ing. Electron. (DSIE), Univ. Politec. de Cartagena, Cartagena, Spain
Abstract: Nowadays, Wireless Sensor Networks (WSN) are a very promising research field since they find application in many different areas. Current proposals for WSN system development are mainly focused on implementation issues and they rarely rely on a Software Engineering methodology which supports their entire development life-cycle. The Model-Driven Engineering (MDE) approach can contribute to solve this problem by allowing designers to model their systems at different abstraction levels, providing them with automatic model transformations to incrementally refine abstract models into more concrete ones. In this vein, this paper presents a MDE approach to WSN application development. Three levels of abstraction have been defined which allow designers to build: (1) domain-specific models, (2) component-based architecture descriptions, and (3) platform-specific models. Automatic model transformations between these three abstraction levels have been designed and, in order to demonstrate the viability of the proposal, a real WSN application has been developed using the implemented tools. (20 refs)
Inspec controlled terms: abstract data types - object-oriented programming - software architecture - specification languages - telecommunication computing - wireless sensor networks
Uncontrolled terms: WSN application development - wireless sensor networks - architecture-centric MDE approach - software engineering methodology - development life-cycle - model-driven engineering - automatic model transformations - abstract models - WSN domain-specific modelling language - component-based architecture descriptions - platform-specific models
Classification Code: B6250 Radio links and equipment - C7410F Communications computing - C6110J Object-oriented programming - C6110B Software engineering techniques - C6110F Formal methods
IPC Code: G06F9/44 - H04B7/00 - H04W - H04W84/18
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
13. Architecture migration driven by code categorization
Correia, R. (1); Matos, C.M.P. (1); Heckel, R. (1); El-Ramly, M. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 115-22, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., Univ. of Leicester, Leicester, United Kingdom
Abstract: In this paper, we report on the development of a methodology for the evolution of software towards new architectures. In our approach, we represent source code as graphs. This enables the use of graph transformation rules, allowing the automation of the transformation process. Prior to its model representation, the source code is subject to a preparatory step of semi-automatic code annotation according to the contribution of each of its parts in the target architecture. This paper first describes the overall methodology and then focuses on the code annotation and model transformation parts. We also discuss issues of the implementation of the approach based on existing tools. (14 refs)
Inspec controlled terms: graph grammars - program compilers - software architecture - software prototyping
Uncontrolled terms: software evolution - graph transformation rule - source code categorization - software architecture - code annotation
Classification Code: C6110B Software engineering techniques - C4210L Formal languages and computational linguistics - C6150C Compilers, interpreters and other processors
IPC Code: G06F9/44 - G06F9/45
Treatment: Practical (PRA) - Theoretical or Mathematical (THR)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
14. Model-driven approach for designing industrial control systems
Estevez, E. (1); Marcos, M. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 284-7, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Autom. Control & Syst. Eng., Univ. of the Basque Country, Bilbao, Spain
Abstract: Industrial Control Systems are used in most of the industrial sectors to achieve production improvement, process optimization and time and cost reduction. Integration, reuse, flexibility and optimization are demanded to adapt to a rapidly changing and competitive market. There is also a growing requirement that all software tools that support the different phases of the development process (design, configuration, management) can be integrated as well. Thus, a consolidation of modeling methodologies for achieving this goal is needed. This paper proposes a Model-driven approach based on different views of the application for designing industrial control systems. XML schema and schematron technologies are selected for defining the domain languages and for checking their coherency and consistency. (7 refs)
Inspec controlled terms: formal specification - industrial control - XML
Uncontrolled terms: model-driven approach - industrial control system design - production improvement - process optimization - time reduction - cost reduction - software tools - industrial control systems - XML schema - schematron technologies - domain languages
Classification Code: C7420 Control engineering computing - C6110F Formal methods - C6110B Software engineering techniques - C7480 Production engineering computing
IPC Code: G05B15/00 - G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
15. Dynamic reconfiguration of software architectures through aspects
Costa, C. (1); Ali, N. (1); Perez, J.; Carsi, J.A.; Ramos, I.
Source: Software Architecture. First European Conference, ECSA 2007, p 279-83, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Inf. Syst. & Comput., Polytech. Univ. of Valencia, Valencia, Spain
Abstract: Currently, most software systems have a dynamic nature and evolve at run-time. The dynamic reconfiguration of software architectures has to be supported in order to enable their architectural element instances and their links to be created and destroyed at run-time. Complex components also need reconfiguration capabilities to evolve their internal compositions. This paper introduces an approach to support the dynamic reconfiguration of software architectures taking advantage of aspect-oriented techniques. It enables complex components to autonomously reconfigure themselves: they are capable of both having knowledge of their current configuration and reconfiguring themselves at run-time. This approach has been developed for the PRISMA aspect-oriented architectural model. A new kind of aspect has been created in PRISMA in order to provide dynamic reconfiguration services to each complex component; it is called the Configuration Aspect. (9 refs)
Inspec controlled terms: object-oriented programming - software architecture
Uncontrolled terms: dynamic software architecture reconfiguration - software systems - PRISMA aspect-oriented architectural model - aspect-oriented software development
Classification Code: C6110B Software engineering techniques - C6110J Object-oriented programming
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
16. Analyzing styles of the modular software architecture view
Cordero, R.L. (1); Salavert, I.R. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 275-8, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Inf. Syst. & Comput., Tech. Univ. of Valencia, Valencia, Spain
Abstract: Software architecture views represent the basic structures of a complex software system. By means of these views, it is possible to shape the different concerns that appear in the requirements and design phases. A modular view specifies the elements that must be built in the detailed design, and the relationships that must be established among them. This paper makes an analysis of the styles present in the modular view. This work establishes how these styles can be shaped and analyzed by means of their relations. (6 refs)
Inspec controlled terms: software architecture
Uncontrolled terms: modular software architecture - software development
Classification Code: C6110B Software engineering techniques
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
17. From mobile business processes to mobile information systems
Gruhn, V. (1); Schafer, C. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 296-9, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. for Appl. Telematics / e-Bus., Univ. of Leipzig, Leipzig, Germany
Abstract: We suppose a methodology and a middleware to build information systems that support mobile business processes. Our approach allows applications to make use of a self-mobilizing code paradigm, i.e. the ability of components to be distributed to devices depending on internal and external changes. The methodology is aimed at deriving architectural decisions from the business processes to be supported. We assess processes and their implications for mobility concerns and make use of architecture simulation to check feasibility and quality of service of such applications at design time and runtime. (5 refs)
Inspec controlled terms: business data processing - middleware - mobile computing
Uncontrolled terms: mobile business processes - mobile information systems - middleware - self-mobilizing code paradigm - quality of service
Classification Code: C7100 Business and administrative computing - D2010 Business and professional IT applications
IPC Code: G06Q10/00
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
18. Software architectures for task-oriented computing
Garlan, D. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 1, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Sch. of Comput. Sci., Carnegie Mellon Univ., Pittsburgh, PA, United States
Abstract: Recent advances in ubiquitous computing and artificial intelligence have led to a desire to better support user-oriented tasks by placing more intelligence in the computing infrastructure. This infrastructure helps mediate between computing resources and legacy applications on the one hand, and a user’s high-level goals on the other hand. In this talk I survey recent research in developing software architectures to support these new capabilities. Key features of these architectures are the ability to interface with legacy applications, but still add considerable support for user tasks; the ability to incorporate machine learning so that the system adapts to the user over time; and the ability to cope with resource variability and user mobility. I outline some of the consequent software engineering challenges that arise in this setting. (0 refs)
Inspec controlled terms: artificial intelligence - software architecture - task analysis - ubiquitous computing
Uncontrolled terms: software architectures - task oriented computing - ubiquitous computing - artificial intelligence - software engineering
Classification Code: C6180 User interfaces - C6150N Distributed systems software - C6170 Expert systems and other AI software and techniques - C6110B Software engineering techniques
IPC Code: G06F9/44 - G06F9/46 - G06F15/18
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
19. Aqueducts: a layered pipeline-based architecture for XML processing
Martfnez-Prieto, M.A. (1); Cuesta, C.E.; de la Fuente, P.
Source: Software Architecture. First European Conference, ECSA 2007, p 313-16, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Depto. de Inf., Univ. de Valladolid, Valladolid, Spain
Abstract: Aqueducts define a variant of the pipe-filter style designed to handle and manage semi-structured data streams, including those describing system structures themselves, such as XML-based architecture descriptions. This style is based on the concept of aqueduct, a higher-order filter which comprises a sequence of filters able to define a process logic using flow control constructs. Those filters can be expanded, then defining an inner layer in the Aqueducts hierarchy. (8 refs)
Inspec controlled terms: pipeline processing - XML
Uncontrolled terms: Aqueducts - layered pipeline-based architecture - XML processing - semistructured data stream - pipe-filter style
Classification Code: C6130D Document processing techniques
IPC Code: G06F17/21
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
20. Leveraging architecture patterns to satisfy quality attributes
Harrison, N.B. (1); Avgeriou, P. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 263-70, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Math. & Comput. Sci., Univ. of Groningen, Groningen, Netherlands
Abstract: Architectural design has been characterized as making a series of decisions that have system-wide impact. These decisions have side effects which can have significant impact on the system. However, the impact may be first understood much later; when the system architecture is difficult to change. Architecture patterns can help architects understand the impact of the architectural decisions at the time these decisions are made, because patterns contain information about consequences and context of the pattern usage. However, this information has been of limited use because it is not presented consistently or systematically. We discuss the current limitations of patterns on evaluating their impact on quality attributes, and propose integrating the information of patterns’ impact on quality attributes in order to increase the usefulness of architecture patterns. (21 refs)
Inspec controlled terms: software architecture - software quality
Uncontrolled terms: architecture pattern - system-wide impact - system architecture - pattern usage
Classification Code: C6110B Software engineering techniques - C0310F Software management
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
21. Enabling adaptivity in user interfaces
Camara, J. (1); Canal, C. (1); Cube, J. (1); Murillo, J.M.
Source: Software Architecture. First European Conference, ECSA 2007, p 106-14, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., Univ. of Malaga, Malaga, Spain
Abstract: The development of adaptive user interfaces has traditionally been restricted to research prototypes and few commercial products. Although there have been relevant achievements in the architectural support for self-adaptive context-aware systems [3,19], the notion of context commonly supported is restricted and does not explicitly contemplate the facets of context related to user-application interaction. Furthermore, applications need to comply with the proposed architectures, making the incorporation of adaptivity more difficult (or not possible at all) in the case of already existing applications. This work addresses key issues for the incorporation of self-adaptive behaviour in GUI-based applications, and proposes an aspect-based framework in order to overcome current limitations. (21 refs)
Inspec controlled terms: graphical user interfaces
Uncontrolled terms: adaptive user interfaces - self-adaptive context-aware systems - user-application interaction - GUI-based applications
Classification Code: C6180G Graphical user interfaces
IPC Code: G06F3/048
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
22. Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics: Preface
Oquendo, Flavio ; Cuesta, Carlos E. ; Marcos, Esperanza
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p V-VI, Software Architecture - First European Conference, ECSA 2007, Proceedings, 2007; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, Sep 24 - 26 2007; Publisher: Springer Verlag
Abstract: No abstract available
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
23. Managing separation of concerns in grid applications through architectural model transformations
Manset, David ; Verjus, Herve ; McClatchey, Richard
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 308-312, Software Architecture - First European Conference, ECSA 2007, Proceedings, 2007; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, Sep 24 - 26 2007; Publisher: Springer Verlag
Abstract: No abstract available (8 refs)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
24. On the modularity of software architectures: A concern-driven measurement framework
Sant’Anna, Cláudio (1, 2); Figueiredo, Eduardo (2); Garcia, Alessandro (2); Lucena, Carlos J. P. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 207-224, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Computer Science Department, PUC, Rio, Brazil (2) Computing Department, Lancaster University, United Kingdom
Abstract: Much of the complexity of software architecture design is derived from the inadequate modularization of key broadly-scoped concerns, such as exception handling, distribution, and persistence. However, conventional architecture metrics are not sensitive to the driving architectural concerns, thereby leading a number of false positives and false negatives in the design assessment process. Therefore, there is a need for assessment techniques that support a more effective identification of early design modularity anomalies relative to crosscutting concerns. In this context, this paper proposes a concern-driven measurement framework for assessing architecture modularity. It encompasses a mechanism for documenting architectural concerns, and a suite of concern-oriented architecture metrics. We evaluated the usefulness of the proposed framework while comparing the modularity of architecture design alternatives in three different case studies. © Springer-Verlag Berlin Heidelberg 2007. (24 refs)
Main heading: Software architecture
Controlled terms: Computer aided design - Identification (control systems) - Measurement theory
Uncontrolled terms: Concern-driven measurement framework
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 731.1 Control Systems - 922 Statistical Methods
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
25. Formal design of structural and dynamic features of publish/subscribe architectural styles
Loulou, Imen (1); Kacem, Ahmed Hadj (1); Jmaiel, Mohamed (1); Drira, Khalil (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 44-59, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) University of Sfax, Research Unit ReDCAD, B.P. W.3038, Sfax, Tunisia (2) LAAS-CNRS, 7 avenue de Colonel Roche, 31007 Toulouse Cedex 4, France
Abstract: This paper proposes a compositional formal approach to design correct publish/subscribe architecture styles. We provide a set of patterns and the corresponding composition rules to build architecture styles. The defined patterns and rules respect the principle of information propagation requiring that produced information have to reach all the subscribed consumers. We describe patterns as graphs and we use the Z notation to specify formally the semantic of each pattern and each rule. We prove consistency and correctness using the Z-Eves theorem prover. We show how to consider the interconnection topology between dispatchers as well as the subscription mechanism by simple refinements. We also show how to construct the Z specification of the designed architecture style based on applied rules. Moreover, we describe the dynamics of architecture via guarded graph-rewriting rules whose body describe the structural constraints and whose guards mainly describe the functional constraints of the system. We express these rules entirely with the Z notation also, obtaining a unified approach which handles both the static and the dynamic aspects. © Springer-Verlag Berlin Heidelberg 2007. (17 refs)
Main heading: Software architecture
Controlled terms: Graphic methods - Mathematical models - Publishing - Specifications
Uncontrolled terms: Architecture modeling - Formal specification - Style composition
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 902.2 Codes and Standards - 903.2 Information Dissemination - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
26. Enabling adaptivity in user interfaces
Cámara, Javier (1); Canal, Carlos (1); Cubo, Javier (1); Murillo, Juan Manuel (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 106-114, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, University of Málaga, Campus de Teatinos, 29071. Málaga, Spain (2) Dept. of Computer Science, University of Extremadura, Avda. de la Universidad s/n, 10071. Cáceres, Spain
Abstract: The development of adaptive user interfaces has traditionally been restricted to research prototypes and few commercial products. Although there have been relevant achievements in the architectural support for self-adaptive context-aware systems [3,19], the notion of context commonly supported is restricted and does not explicitly contemplate the facets of context related to user-application interaction. Furthermore, applications need to comply with the proposed architectures, making the incorporation of adaptivity more difficult (or not possible at all) in the case of already existing applications. This work addresses key issues for the incorporation of self-adaptive behaviour in GUI-Based applications, and proposes an aspect-based framework in order to overcome current limitations. © Springer-Verlag Berlin Heidelberg 2007. (21 refs)
Main heading: User interfaces
Controlled terms: Adaptive systems - Human computer interaction - Software architecture - Software prototyping
Uncontrolled terms: Adaptive user interfaces - Research prototypes
Classification Code: 722.2 Computer Peripheral Equipment - 723.1 Computer Programming - 723.5 Computer Applications - 731.1 Control Systems
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
27. Effective tool support for architectural knowledge sharing
Farenhorst, Rik (1); Lago, Patricia (1); Van Vliet, Hans (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 123-138, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, VU University Amsterdam, Netherlands
Abstract: Knowledge management plays an important role in the software architecting process. Recently, this role has become more apparent by a paradigm shift that views a software architecture as the set of architectural design decisions it embodies. This shift has sparked the discussion in both research and practice on how to best facilitate sharing of so-called architectural knowledge, and how tools can best be employed. In order to design successful tool support for architectural knowledge sharing it is important to take into account what software architecting really entails. To this end, in this paper we define the main characteristics of architecting, based on observations in a large software development organization, and state-of-the-art literature in software architecture. Based on the defined characteristics, we determine how best practices known from knowledge management could be used to improve architectural knowledge sharing. This results in the definition of a set of desired properties of architectural knowledge sharing tools. To improve the status quo of architectural knowledge sharing tools, we present the design of an architectural knowledge sharing platform. © Springer-Verlag Berlin Heidelberg 2007. (39 refs)
Main heading: Software architecture
Controlled terms: Knowledge acquisition - Knowledge management
Uncontrolled terms: Architectural design decisions - Architectural knowledge sharing
Classification Code: 723.1 Computer Programming - 723.4 Artificial Intelligence - 723.5 Computer Applications - 903.3 Information Retrieval and Use
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
28. Beyond ATAM: Architecture analysis in the development of large scale software systems
Zalewski, Andrzej (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 92-105, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Warsaw University of Technology, Institute of Automatic Control and Computational Engineering, Warsaw, Poland
Abstract: Large scale software developments require substantial investment and are exposed to high level of risk. Architectural decisions taken at early stages of the development can substantially influence the entire level of technical risk. In this paper architectural decisions are divided into two basic groups: early - top level system organization decision establishing system organization patterns (the notion introduced in this paper) and detailed ones. However as it was shown on notable examples of large scale developments carried out in recent ten years in Poland, wrong decisions concerning system organization pattern can trigger severe risks that can lead to the development crisis. These risks are frequently connected with the complexity explosion syndrome - sudden, undetected growth of design complexity that exceeds the capabiblity of the development team and time budget. To manage these risks properly appropriate architecture analysis method has been introduced. On the contrary to the traditional scenario-based architecture analysis methods, like ATAM, it was based on GQM approach. A complete assessement framework have been defined comprising three goals: complexity control, organizational adequacy and satisfactory perforormance and reliability; a set of questions related to these goals, as well as metrics for the qualities expressed by these questions. The conclusion contains ex post analysis of exemplary large scale systems showing that the proposed framework provides adequate assessement of design risk. It has also been indicated that the critical risks identified during the evalution of the system organization pattern should be carefully managed. © Springer-Verlag Berlin Heidelberg 2007. (23 refs)
Main heading: Computer architecture
Controlled terms: Computational complexity - Computer software - Pattern recognition - Reliability
Uncontrolled terms: Architectural decisions - Complexity control - Substantially influence - System organization
Classification Code: 421 Strength of Building Materials; Mechanical Properties - 716 Telecommunication; Radar, Radio and Television - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
29. FIESTA: A generic framework for integrating new functionalities into software architectures
Waignier, Guillaume (1); Le Meur, Anne-Françoise (1); Duchien, Laurence (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 76-91, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) LIFL, INRIA Team ADAM, Université des Sciences et Technologies de Lille, 59655 Villeneuve d’Ascq, France
Abstract: When an application must evolve to cope with new context and user requirements, integrating new functionalities into its software architecture is necessary. The architect has thus to manually modify the architecture description, which is often tedious and error prone. In this paper, we propose FIESTA, a generic framework for automatically integrating new functionalities into an architecture description. Our approach is inspired by TranSAT, an integration framework. However, TranSAT is dedicated to a specific architecture description language (ADL) while our approach is ADL-independent. We have performed a domain analysis, studying for many ADLs how to integrate new functionalities. Based on this analysis, we have defined a generic ADL model to manipulate and reason about architectural elements that are involved in integration. Furthermore, we have developed a generic integration engine. © Springer-Verlag Berlin Heidelberg 2007. (21 refs)
Main heading: Software architecture
Controlled terms: Computer programming languages - Functional analysis - Mathematical models
Uncontrolled terms: Architecture description - Generic framework
Classification Code: 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.5 Computer Applications - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
30. Experiences using a component-oriented architectural framework for robots and its improvement with a MDE approach
Ortiz, Francisco J. (1); Pastor, Juan A. (1); Alonso, Diego (1); Álvarez, Bárbara (1); Sánchez, Pedro (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 335-338, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Division of Electronics Engineering and Systems (DSIE), Universidad Politécnica de Cartagena, Campus Muralla del Mar s/n, 30202 Cartagena, Murcia, Spain
Abstract: This paper describes the experience of the DSIE research group in the developing of the EFTCoR family of robots using an abstract architectural framework ACRoSeT, following the component-based paradigm. Using abstract components allow us to define very different architectures in a platform independent way. The translation of the abstract components to platform specific code is a hard and difficult task that can be partially automated with the help of the model transformation tools provided by the MDE approach. © Springer-Verlag Berlin Heidelberg 2007. (9 refs)
Main heading: Software architecture
Controlled terms: Computer aided software engineering - Computer software portability - Remote control - Robotics
Uncontrolled terms: Component based software architecture - Teleoperated robots
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 731.1 Control Systems - 731.5 Robotics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
31. Informed evolution
Falkner, Katrina (1); Balasubramaniam, Dharini (2); Detmold, Henry (1); Munro, David S. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 288-291, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) School of Computer Science, University of Adelaide, Adelaide, SA 5005, Australia (2) Department of Computer Science, University of St Andrews, St Andrews, Fife KY16 9SX, United Kingdom
Abstract: Ageless Software evolves, to meet new requirements, without reducing its efficiency or understandability. Here we introduce a methodology called Informed Evolution for supporting the construction and evolution of ageless software. This methodology integrates the software architecture (structure and constraints) and the system implementation (behaviour) within system execution. Evolution is effected by evolution patterns which are in turn guided by constraints specified in the software architecture. The availability of the software architecture and implementation at run-time ensures that changes are informed by design and implementation decisions, thus preserving efficiency and understandability. In this paper, we outline Informed Evolution, and describe how evolution patterns may be expressed for systems developed using this methodology. © Springer-Verlag Berlin Heidelberg 2007. (5 refs)
Main heading: Computer aided software engineering
Controlled terms: Constraint theory - Requirements engineering - Software architecture - Software design
Uncontrolled terms: Ageless software - Evolution patterns - Informed Evolution
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 961 Systems Science
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
32. Processes for creating and exploiting architectural design decisions with tool support
Nava, Francisco (1); Capilla, Rafael (1); Dueñas, Juan C. (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 321-324, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, Universidad Rey Juan Carlos, c/ Tulipán s/n, 28933, Madrid, Spain (2) Department of Engineering of Telematic Systems, ETSI Telecomunicación, Ciudad Universitaria s/n, 28040, Madrid, Spain
Abstract: Software architectures suffer of a serious lack of documented design decisions, but also an explicit definition of the processes needed to create and exploit such architectural knowledge. To address these issues, we focus on the specification of those activities that we believe should be implemented to support the creation and use of design rationale with tool support. © Springer-Verlag Berlin Heidelberg 2007. (14 refs)
Main heading: Software architecture
Controlled terms: Computer aided design - Decision making
Uncontrolled terms: Architectural knowledge - Design rationale - Documented design decisions
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 912.2 Management
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
33. Issues in applying empirical software engineering to software architecture
Falessi, Davide (1); Kruchten, Philippe (2); Cantone, Giovanni (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 257-262, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) University of Rome Tor Vergata, DISP, Rome, Italy (2) University of British Columbia, ECE, Vancouver, Canada
Abstract: Empirical software engineering focuses on the evaluation of software engineering technologies, such as processes and tools, by comparing related sets of data. It has contributed a valuable body of knowledge in several areas such as Software Economics and Software Quality, which in turn drove important advances in related tools and techniques. Unfortunately this is not (yet) the case for software architecture, where empirical studies are still few. Such a condition demands for further empirical research efforts on the topic of software architecture and suggests specific areas of improvement. In this paper we discuss several essential, innovative, and maybe provocative, questions such as: Why do we have so few applications of empirical software engineering on software architecture? Which are the main difficulties? What can we do? © Springer-Verlag Berlin Heidelberg 2007. (21 refs)
Main heading: Software architecture
Controlled terms: Data structures - Quality control - Technology transfer
Uncontrolled terms: Empirical software engineering - Software Economics
Classification Code: 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 723.5 Computer Applications - 901.4 Impact of Technology on Society - 913.3 Quality Assurance and Control
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
34. Aqueducts: A layered pipeline-based architecture for XML processing
Martínez-Prieto, Miguel A. (1); Cuesta, Carlos E. (2); De La Fuente, Pablo (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 313-316, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) GRINBD, Depto. de Informática, Universidad de Valladolid, 47011 Valladolid, Spain (2) Kybele, Depto. Lenguajes y Sistemas Informáticos II, E.T.S. de Ingeniería Informática, Universidad Rey Juan Carlos, 28933 Móstoles, Madrid, Spain
Abstract: Aqueducts define a variant of the pipe-filter style designed to handle and manage semi-structured data streams, including those describing system structures themselves, such as XML-based architecture descriptions. This style is based on the concept of aqueduct, a higher-order filter which comprises a sequence of filters able to define a process logic using flow control constructs. Those filters can be expanded, then defining an inner layer in the Aqueducts hierarchy. © Springer-Verlag Berlin Heidelberg 2007. (8 refs)
Main heading: Software architecture
Controlled terms: Data flow analysis - Data structures - Logic programming - Pipeline processing systems - XML
Uncontrolled terms: Process logic - XML based architecture descriptions
Classification Code: 722.4 Digital Computers and Systems - 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
35. On the interplay of crosscutting and MAS-specific styles
Molesini, Ambra (1); Garcia, Alessandro (2); Chavez, Christina (3); Batista, Thais (4)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 317-320, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Alma Mater Studiorum, Università di Bologna, Italy (2) Lancaster University, United Kingdom (3) UFBA - Universidade Federal de Bahia, Brazil (4) UFRN - Universidade Federal do Rio Grande do Norte, Brazil
Abstract: This paper presents a systematic case study that analyzes the influence exerted by different styles over the nature of architectural crosscutting concerns in an evolving multi-agent system. The analysis encompassed the systematic comparison of alternative architecture decompositions for the same application that changed over time to address different stakeholders’ concerns. © Springer-Verlag Berlin Heidelberg 2007. (9 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Multi agent systems - Requirements engineering - Software design
Uncontrolled terms: Architectural crosscutting - Architecture decompositions
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
36. An architectural model for small-scale component-oriented frameworks
Lopes, S. (1); Tavares, A. (1); Monteiro, J. (1); Silva, C. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 300-303, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Industrial Electronics, University of Minho, Campus de Azurém, 4800-058 Guimarães, Portugal
Abstract: Frameworks are an important form of reuse. However, they are often complex and hard to understand, what limits their success as a reuse option. To answer this problem, it has been widely recognized the need to effectively communicate frameworks and provide appropriate tool support, but difficulties still endure. We argue that the properties of frameworks are another aspect that is decisive for reuse problems and has not been sufficiently explored. We discuss these issues and we propose a framework architectural model that can be used to design frameworks that are easier to reuse. © Springer-Verlag Berlin Heidelberg 2007. (8 refs)
Main heading: Software architecture
Controlled terms: Computer software reusability - Mathematical models - Object oriented programming - Problem solving - Requirements engineering
Uncontrolled terms: Component oriented design - Frameworks - Role modeling
Classification Code: 723.1 Computer Programming - 723.4 Artificial Intelligence - 723.5 Computer Applications - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
37. Leveraging architecture patterns to satisfy quality attributes
Harrison, Neil B. (1); Avgeriou, Paris (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 263-270, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Mathematics and Computing Science, University of Groningen, Groningen, Netherlands
Abstract: Architectural design has been characterized as making a series of decisions that have system-wide impact. These decisions have side effects which can have significant impact on the system. However, the impact may be first understood much later; when the system architecture is difficult to change. Architecture patterns can help architects understand the impact of the architectural decisions at the time these decisions are made, because patterns contain information about consequences and context of the pattern usage. However, this information has been of limited use because it is not presented consistently or systematically. We discuss the current limitations of patterns on evaluating their impact on quality attributes, and propose integrating the information of patterns’ impact on quality attributes in order to increase the usefulness of architecture patterns. © Springer-Verlag Berlin Heidelberg 2007. (21 refs)
Main heading: Software architecture
Controlled terms: Decision making - Information dissemination - Pattern recognition
Uncontrolled terms: Architecture patterns - Quality attributes - System architecture
Classification Code: 716 Telecommunication; Radar, Radio and Television - 723.1 Computer Programming - 723.5 Computer Applications - 903.2 Information Dissemination - 912.2 Management
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
38. Architecture migration driven by code categorization
Correia, Rui (1, 2); Matos, Carlos M. P. (1, 2); Heckel, Reiko (1); El-Ramly, Mohammad (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 115-122, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, University of Leicester, University Road, Leicester, LEI 7RH, United Kingdom (2) ATX Software, Rua Saraiva de Carvalho 207C, 1350-300 Lisboa, Portugal (3) Computer Science Department, Cairo University, Egypt
Abstract: In this paper, we report on the development of a methodology for the evolution of software towards new architectures. In our approach, we represent source code as graphs. This enables the use of graph transformation rules, allowing the automation of the transformation process. Prior to its model representation, the source code is subject to a preparatory step of semi-automatic code annotation according to the contribution of each of its parts in the target architecture. This paper first describes the overall methodology and then focuses on the code annotation and model transformation parts. We also discuss issues of the implementation of the approach based on existing tools. © Springer-Verlag Berlin Heidelberg 2007. (14 refs)
Main heading: Software architecture
Controlled terms: Codes (symbols) - Graphic methods - Mathematical models - Mathematical transformations
Uncontrolled terms: Architecture migration - Model representation - Source codes
Classification Code: 723.1 Computer Programming - 723.2 Data Processing and Image Processing - 723.5 Computer Applications - 921.3 Mathematical Transformations
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
39. An ontology-based approach for modelling architectural styles
Pahl, Claus (1); Giesecke, Simon (2); Hasselbring, Wilhelm (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 60-75, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Dublin City University, School of Computing, Dublin 9, Ireland (2) University of Oldenburg, Software Engineering Group, D-26111 Oldenburg, Germany
Abstract: The conceptual modelling of software architectures is of central importance for the quality of a software system. A rich modelling language is required to integrate the different aspects of architecture modelling, such as architectural styles, structural and behavioural modelling, into a coherent framework. We propose an ontological approach for architectural style modelling based on description logic as an abstract, meta-level modelling instrument. Architectural styles are often neglected in software architectures. We introduce a framework for style definition and style combination. The link between quality requirements and conceptual modelling of architectural styles is investigated. The application of the ontological framework in the form of an integration into existing architectural description notations such as ACME and UML-based approaches, and also service ontologies is illustrated. © Springer-Verlag Berlin Heidelberg 2007. (30 refs)
Main heading: Software architecture
Controlled terms: Mathematical models - Ontology - Quality control
Uncontrolled terms: Architecture ontology - Description logics - Software architecture modeling
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 903 Information Science - 913.3 Quality Assurance and Control - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
40. Using connectors to model crosscutting influences in software architectures
Fuentes, Lidia (1); Gámez, Nadia (1); Pinto, Mónica (1); Valenzuela, Juan A. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 292-295, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Dpto. Lenguajes y Ciencias de la Computación, University of Málaga, Spain
Abstract: AO-ADL is an aspect-oriented architecture description language where ‘crosscutting’ becomes a new kind of relationship between components. The semantic of connectors is extended in order to represent such crosscutting relationships. In this paper we focus on an important contribution of AO-ADL, its mechanism for defining aspect-oriented connector templates, which capture generic and reusable crosscutting influences, providing an aspect-oriented architectural pattern. © Springer-Verlag Berlin Heidelberg 2007. (8 refs)
Main heading: Software architecture
Controlled terms: Computer software reusability - Object oriented programming - Requirements engineering - Semantics
Uncontrolled terms: Aspect oriented architecture - Crosscutting relationships
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 903.2 Information Dissemination
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
41. First class connectors for prototyping service oriented architectures
Kjr, Kristian Ellebk (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 171-178, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, University of Aarhus, Åbogade 34, 8200 Århus N., Denmark
Abstract: Prototyping Service Oriented Architectures based on web services is a complex and time consuming process. Several steps, some of them complicated, are required for even the simplest application. Therefore, it is desirable to be able to create prototypes using more familiar constructs, entirely within a single programming language, and then define some of the components as web services, and others as clients. We present a framework which enables programmers to create web services and clients in ArchJava, an extension to Java which supports components and connectors as first class entities, by defining interfaces to services as ports on components. This supports rapid creation of prototypes by defining a component and connector structure of a web service based system in ArchJava, and then later, with only minor modifications, change the prototype to use web services. The services and client components will not be aware of this. From their point of view they are talking through connectors. Client components can also be connected to existing web services. © Springer-Verlag Berlin Heidelberg 2007. (15 refs)
Main heading: Software architecture
Controlled terms: Computer programming languages - Software prototyping - Web services
Uncontrolled terms: ArchJava - Service Oriented Architectures
Classification Code: 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.5 Computer Applications - 903.4 Information Services
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
42. Model-driven approach for designing industrial control systems
Estevez, Elisabet (1); Marcos, Marga (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 284-287, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Automatic Control and Systems Engineering Department, University of the Basque Country, Alda Urquijo s/n, 48013, Bilbao, Spain
Abstract: Industrial Control Systems are used in most of the industrial sectors to achieve production improvement, process optimization and time and cost reduction. Integration, reuse, flexibility and optimization are demanded to adapt to a rapidly changing and competitive market. There is also a growing requirement that all software tools that support the different phases of the development process (design, configuration, management) can be integrated as well. Thus, a consolidation of modeling methodologies for achieving this goal is needed. This paper proposes a Model-driven approach based on different views of the application for designing industrial control systems. XML schema and schematron technologies are selected for defining the domain languages and for checking their coherency and consistency. © Springer-Verlag Berlin Heidelberg 2007. (7 refs)
Main heading: Computer control systems
Controlled terms: Competitive intelligence - Computer aided software engineering - Cost reduction - Industrial management - Process control - Production engineering - XML
Uncontrolled terms: Component based modeling - Consistency analysis - Industrial control systems - XML schema - XPath
Classification Code: 913.1 Production Engineering - 912.2 Management - 911.2 Industrial Economics - 731.1 Control Systems - 723.5 Computer Applications - 723.1 Computer Programming - 723 Computer Software, Data Handling and Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
43. Supporting the automatic generation of proto-architectures
Navarro, Elena (1); Letelier, Patricio (2); Jaén, Javier (2); Ramos, Isidro (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 325-329, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Computing Systems Department, UCLM, Albacete, Spain (2) Department of Information Systems and Computation, UPV, Valencia, Spain
Abstract: Many issues must be taken into account in order to provide a right specification of the system-to-be to meet properly the established requirements. In this sense, the introduction of proper supporting techniques able to automate as much as possible the process means a clear advantage. In this work, we introduce a tool called MORPHEUS that gives support to our proposal by providing traceability throughout the process of generation of proto-architecture from requirements. © Springer-Verlag Berlin Heidelberg 2007. (8 refs)
Main heading: Software architecture
Controlled terms: Computer aided software engineering - Requirements engineering - Software prototyping - Specification languages
Uncontrolled terms: Proto-architecture - Traceability
Classification Code: 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
44. Hierarchical verification in maude of LfP software architectures
Jerad, Chadlia (1); Barkaoui, Kamel (2); Touzi, Amel Grissa (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 156-170, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) LSTS - ENIT, BP 37, Le Belvedere 1002 Tunis, Tunisia (2) CEDRIC - CNAM, 292, Rue Saint-Martin, Paris 75003, France
Abstract: Software architecture description languages allow software designers to focus on high level aspects of an application by abstracting from details. In general, a system’s architecture is specified in a hierarchical way. In fact, hierarchical components hide, at each level, the complexity of the sub-entities composing the system. As rewriting logic is a natural semantic framework for representing concurrency, parallelism, communication and interaction, it can be used for systems specification and verification. In this paper, we show how we can take advantage of hierarchical modeling of software systems specified with LfP, to proto-type model checking process using Maude system. This approach allows us to hide and show, freely and easily, encapsulated details by moving between hierarchical levels. Thus, state explosion problem is mastered and reduced. In addition, system’s maintainability and error detection become easier and faster. © Springer-Verlag Berlin Heidelberg 2007. (17 refs)
Main heading: Software architecture
Controlled terms: Computer programming languages - Logic programming - Semantics - Verification
Uncontrolled terms: Hierarchical verification - Software architecture description languages
Classification Code: 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 723.1.1 Computer Programming Languages - 723.5 Computer Applications - 903.2 Information Dissemination
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
45. Software architectures for task-oriented computing
Garlan, David (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 1, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) School of Computer Science, Carnegie Mellon University, 5000 Forbes Ave, Pittsburgh, PA 15213, United States
Abstract: Recent advances in ubiquitous computing and artificial intelligence have led to a desire to better support user-oriented tasks by placing more intelligence in the computing infrastructure. This infrastructure helps mediate between computing resources and legacy applications on the one hand, and a user’s high-level goals on the other hand. In this talk I survey recent research in developing software architectures to support these new capabilities. Key features of these architectures are the ability to interface with legacy applications, but still add considerable support for user tasks; the ability to incorporate machine learning so that the system adapts to the user over time; and the ability to cope with resource variability and user mobility. I outline some of the consequent software engineering challenges that arise in this setting. © Springer-Verlag Berlin Heidelberg 2007.
Main heading: Software architecture
Controlled terms: Artificial intelligence - Computation theory - Learning systems - Ubiquitous computing
Uncontrolled terms: Computing resources - User-oriented tasks
Classification Code: 461.4 Ergonomics and Human Factors Engineering - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 723.1 Computer Programming - 723.4 Artificial Intelligence - 723.5 Computer Applications - 731.5 Robotics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
46. Lightweight web services for high performace computing
Santos, Adrián (1); Almeida, Francisco (1); Blanco, Vicente (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 225-236, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Dpto. Estadística, I.O. y Computación Universidad de La Laguna, Spain
Abstract: Web Services-based technologies have emerged as a technological alternative for computational web portals. Facilitating access to distributed resources through web interfaces while simultaneously ensuring security is one of the main goals in most of the currently existing manifold tools and frameworks. OpenCF, the Open Source Computational Framework that we have developed, shares these objectives and adds others, like enforced portability, genericity, modularity and compatibility with a wide range of High Performance Computing Systems. OpenCF has been implemented using lightweight technologies (Apache + PHP), resulting in a robust framework ready to run out of the box that is compatible with standard security requirements. © Springer-Verlag Berlin Heidelberg 2007. (18 refs)
Main heading: Web services
Controlled terms: Computational methods - Distributed computer systems - Portals - Technology transfer
Uncontrolled terms: Computational web portals - Web Services-based technologies
Classification Code: 716 Telecommunication; Radar, Radio and Television - 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 722.4 Digital Computers and Systems - 901.4 Impact of Technology on Society - 903.4 Information Services
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
47. From mobile business processes to mobile information systems
Gruhn, Volker (1); Schäfer, Clemens (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 296-299, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Applied Telematics / e-Business, University of Leipzig, Germany
Abstract: We suppose a methodology and a middleware to build information systems that support mobile business processes. Our approach allows applications to make use of a self-mobilizing code paradigm, i.e. the ability of components to be distributed to devices depending on internal and external changes. The methodology is aimed at deriving architectural decisions from the business processes to be supported. We assess processes and their implications for mobility concerns and make use of architecture simulation to check feasibility and quality of service of such applications at design time and runtime. © Springer-Verlag Berlin Heidelberg 2007. (5 refs)
Main heading: Information systems
Controlled terms: Middleware - Mobile computing - Quality of service - Software architecture - Software design
Uncontrolled terms: Architecture simulation - Design time - Mobile business processes - Self mobilizing code
Classification Code: 716 Telecommunication; Radar, Radio and Television - 723.1 Computer Programming - 723.5 Computer Applications - 903.2 Information Dissemination
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
48. AspectLEDA: Extending an ADL with aspectual concepts
Navasa, Amparo (1); Pérez, Miguel A. (1); Murillo, Juan M. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 330-334, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Quercus Software Engineering Group, Department of Computer Science, University of Extremadura, Spain
Abstract: When increasing the complexity of software systems new techniques allowing for their adequate manipulation are required. In the last ten years, AOSD has been proposed to manage the systems complexity by considering concepts of AO programming extended along the software life cycle. The suitability of the existence of an AO architectural design appears when AO concepts are extended to the whole life cycle. In order to adequately specify the AO design, Aspect-Oriented ADLs are needed. In this paper AspectLEDA, an ADL to support architectural descriptions treating aspects, is presented. © Springer-Verlag Berlin Heidelberg 2007. (4 refs)
Main heading: Software architecture
Controlled terms: Architectural design - Computer software selection and evaluation - Object oriented programming - Requirements engineering - Software design
Uncontrolled terms: Architectural descriptions - Aspect-Oriented ADL
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
49. Architecture for developing adaptive and adaptable collaborative applications
Anzures-García, Mario (1, 2); Hornos, Miguel J. (2); Paderewski-Rodríguez, Patricia (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 271-274, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Facultad de Ciencias de la Computación, Benemérita Universidad Autónoma de Puebla, Ciudad Universitaria, 14 sur y avenida San Claudio, San Manuel, 72570 Puebla, Mexico (2) Departamento de Lenguajes y Sistemas Informáticos, E.T.S.I. Informática y de Telecomunicación, Universidad de Granada, C/ Periodista Saucedo Aranda, s/n, 18071 Granada, Spain
Abstract: Many organizations have to carry out their work by groups of people who are geographically distributed. The groups can experiment changes, which demand the development of applications supporting groupwork and allowing the adaptation to different groupwork organization styles and to both individual and collective needs. This paper proposes a SOA-based architecture that provides the suitable structure for the development of collaborative applications that are both adaptive and adaptable. We also present an adaptation process that allows the applications based on the architecture to be adapted to the changes in the groupwork organization and to the necessity of new functionalities. © Springer-Verlag Berlin Heidelberg 2007. (4 refs)
Main heading: Software architecture
Controlled terms: Computer supported cooperative work - Societies and institutions
Uncontrolled terms: Collaborative applications - Geographically distributed
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 901.1.1 Societies and Institutions
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
50. A goal-oriented approach for the generation and evaluation of alternative architectures
Grau, Gemma (1); Franch, Xavier (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 139-155, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Universitat Politècnica de Catalunya (UPC), c/ Jordi Girona 1-3, Barcelona E-08034, Spain
Abstract: There is a recognized gap between requirements and architectures. There is also evidence that architecture evaluation, when done at the early phases of the development lifecycle, is an effective way to ensure the quality attributes of the final system. As quality attributes may be satisfied at a different extent by different alternative architectural solutions, an exploration and evaluation of alternatives is often needed. In order to address this issue at the requirements level, we propose to model architectures using the i* framework, a goal-oriented modelling language that allows to represent the functional and non-functional requirements of an architecture using actors and dependencies instead of components and connectors. Once the architectures are modelled, we propose guidelines for the generation of alternative architectures based upon existing architectural patterns, and for the definition of structural metrics for the evaluation of the resulting alternative models. The applicability of the approach is shown with the Home Service Robot case study. © Springer-Verlag Berlin Heidelberg 2007. (28 refs)
Main heading: Software architecture
Controlled terms: Mathematical models - Quality control - Requirements engineering
Uncontrolled terms: Architecture evaluation - Development lifecycle
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 913.3 Quality Assurance and Control - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
51. The art and science of software architecture
Brown, Alan W. (1); McDermid, John A. (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 237-256, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) IBM Software Group, Raleigh, NC, United States (2) University of York, Heslington, York, United Kingdom
Abstract: The past 20 years has seen significant investments in the theory and practice of software architecture. However, architectural deficiencies are frequently cited as a key factor in the shortcomings and failures that lead to unpredictable delivery of complex operational systems. Here, we consider the art and science of software architecture: we explore the current state of software architecture, identify key architectural trends and directions in academia and industry, and highlight some of the architectural research challenges which need to be addressed. The paper proposes an agenda of research activities to be carried out by a partnership between academia and industry. While challenges exist in many domains, for this paper we draw examples from one area of particular concern: safety-critical systems. © Springer-Verlag Berlin Heidelberg 2007. (44 refs)
Main heading: Software architecture
Controlled terms: Failure analysis - Systems engineering
Uncontrolled terms: Operational systems - Safety-critical systems
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 921 Mathematics - 961 Systems Science
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
52. Wireless sensor network application development: An architecture-centric MDE approach
Losilla, Fernando (1); Vicente-Chicote, Cristina (1); Álvarez, Bárbara (1); Iborra, Andrés (1); Sánchez, Pedro (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 179-194, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) División de Sistemas e Ingeniería Electrónica (DSIE), Universidad Politécnica de Cartagena, 30202 Cartagena, Spain
Abstract: Nowadays, Wireless Sensor Networks (WSN) are a very promising research field since they find application in many different areas. Current proposals for WSN system development are mainly focused on implementation issues and they rarely rely on a Software Engineering methodology which supports their entire development life-cycle. The Model-Driven Engineering (MDE) approach can contribute to solve this problem by allowing designers to model their systems at different abstraction levels, providing them with automatic model transformations to incrementally refine abstract models into more concrete ones. In this vein, this paper presents a MDE approach to WSN application development. Three levels of abstraction have been defined which allow designers to build: (1) domain-specific models, (2) component-based architecture descriptions, and (3) platform-specific models. Automatic model transformations between these three abstraction levels have been designed and, in order to demonstrate the viability of the proposal, a real WSN application has been developed using the implemented tools. © Springer-Verlag Berlin Heidelberg 2007. (20 refs)
Main heading: Wireless sensor networks
Controlled terms: Mathematical models - Software architecture
Uncontrolled terms: Component-based software architecture - Domain specific languages - Model-driven engineering
Classification Code: 716.3 Radio Systems and Equipment - 722.3 Data Communication, Equipment and Techniques - 723.1 Computer Programming - 723.5 Computer Applications - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
53. What’s in a service?
Papazoglou, Michael P. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 11-28, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) INFOLAB, Tilburg University, Dept. of Information Systems and Management, Tilburg, LE 5000, Netherlands
Abstract: Automated services help enterprises create new value from reuse of software and resources and achieve new levels of agility through greater flexibility and lower cost structures. As services come in many flavors and guises they have differing characteristics. In this paper we describe the most necessary aspects and features of automated services. We also focus on the interplay of SOAs and Business Process Management technologies and argue that the key enablers for Service Oriented Architectures (SOAs) should focus on four inter-related elements: engineering and planning the SOA, SOA implementation, SOA management and monitoring and SOA governance. © Springer-Verlag Berlin Heidelberg 2007. (16 refs)
Main heading: Software architecture
Controlled terms: Condition monitoring - Electronic commerce - Information management - Planning
Uncontrolled terms: Automated services - Business processes - Service oriented architecture
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 903.2 Information Dissemination - 912.2 Management - 913.5 Maintenance
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
54. An active architecture approach to dynamic systems co-evolution
Morrison, Ron (1); Balasubramaniam, Dharini (1); Oquendo, Flavio (2); Warboys, Brian (3); Greenwood, R. Mark (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 2-10, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) University of St Andrews, St Andrews, KY16 9SX, United Kingdom (2) University of South Brittany - Valoria, BP 573, 56017 Vannes Cedex, France (3) University of Manchester, Manchester, M13 9PL, United Kingdom
Abstract: The term co-evolution describes the symbiotic relationship between dynamically changing business environments and the software that supports them. Business changes create pressures on the software to evolve, and at the same time technology changes create pressures on the business to evolve. More generally, we are concerned with systems where it is neither economically nor technologically feasible to suspend the operation of the system while it is being evolved. Typically these are long-lived systems in which dynamic co-evolution, whereby a system evolves as part of its own execution in reaction to both predicted and emergent events, is the only feasible option for change. Examples of such systems include continuously running business process models, sensor nets, grid applications, self-adapting/tuning systems, routing systems, control systems, autonomic systems, and pervasive computing applications. Active architectures address both the structural and behavioural requirements of dynamic co-evolving software by modelling software architecture as part of the on-going computation, thereby allowing evolution during execution and formal checking that desired system properties are preserved through evolution. This invited paper presents results on active architectures from the Compliant System Architecture and ArchWare projects. We have designed and constructed the ArchWare-ADL, a formal, well-founded architecture description language, based on the higher-order typed p-calculus, which consists of a set of layers to address the requirements of active architectures. The ArchWare-ADL design principles, concepts and formal notations are presented together with its sophisticated reflective technologies for supporting active architectures and thereby dynamic co-evolution. © Springer-Verlag Berlin Heidelberg 2007. (35 refs)
Main heading: Software architecture
Controlled terms: Dynamical systems - Grid computing - Sensor networks - Technology transfer
Uncontrolled terms: Business environments - Symbiotic relationship
Classification Code: 722.4 Digital Computers and Systems - 723.1 Computer Programming - 723.5 Computer Applications - 731.1 Control Systems - 901.4 Impact of Technology on Society - 921 Mathematics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
55. Analyzing styles of the modular software architecture view
Cordero, Rogelio Limon (1); Salavert, Isidro Ramos (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 275-278, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Information Systems and Computation, Technical University of Valencia, Camino de Vera s/n, E-46022 Valencia
Abstract: Software architecture views represent the basic structures of a complex software system. By means of these views, it is possible to shape the different concerns that appear in the requirements and design phases. A modular view specifies the elements that must be built in the detailed design, and the relationships that must be established among them. This paper makes an analysis of the styles present in the modular view. This work establishes how these styles can be shaped and analyzed by means of their relations. © Springer-Verlag Berlin Heidelberg 2007. (6 refs)
Main heading: Software architecture
Controlled terms: Computer aided design - Requirements engineering
Uncontrolled terms: Modular software architecture - Software systems
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
56. Dynamic reconfiguration of software architectures through aspects
Costa, Cristóbal (1); Ali, Nour (1); Pérez, Jennifer (2); Carsí, José Ángel (1); Ramos, Isidro (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 279-283, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Information Systems and Computation, Polytechnic University of Valencia, Camino de Vera s/n, 46022 Valencia, Spain (2) Technical University of Madrid (UPM), E.U. Informática, Ctra. Valencia km 7, 28051 Madrid, Spain
Abstract: Currently, most software systems have a dynamic nature and evolve at run-time. The dynamic reconfiguration of software architectures has to be supported in order to enable their architectural element instances and their links to be created and destroyed at run-time. Complex components also need reconfiguration capabilities to evolve their internal compositions. This paper introduces an approach to support the dynamic reconfiguration of software architectures taking advantage of aspect-oriented techniques. It enables complex components to autonomously reconfigure themselves: they are capable of both having knowledge of their current configuration and reconfiguring themselves at run-time. This approach has been developed for the PRISMA aspect-oriented architectural model. A new kind of aspect has been created in PRISMA in order to provide dynamic reconfiguration services to each complex component; it is called the Configuration Aspect. © Springer-Verlag Berlin Heidelberg 2007. (9 refs)
Main heading: Software architecture
Controlled terms: Computer aided design - Object oriented programming
Uncontrolled terms: Dynamic reconfiguration - Software systems
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
57. Pattern-based evolution of software architectures
Côté, Isabelle (1); Heisel, Marina (1); Wentzlaff, Ina (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 29-43, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computational and Cognitive Sciences - CoCoS, Faculty of Engineering, University Duisburg-Essen, Germany
Abstract: We propose a pattern-based software development method comprising analysis (using problem frames) and design (using architectural and design patterns), of which especially evolving systems benefit. Evolution operators guide a pattern-based transformation procedure, including re-engineering tasks for adjusting a given software architecture to meet new system demands. Through application of these operators, relations between analysis and design documents are explored systematically for accomplishing desired software modifications. This allows for reusing development documents to a large extent, even when the application environment and the requirements change. © Springer-Verlag Berlin Heidelberg 2007. (15 refs)
Main heading: Software architecture
Controlled terms: Pattern recognition - Requirements engineering
Uncontrolled terms: Design patterns - Pattern-based transformation - Problem frames
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications - 741.1 Light/Optics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
58. A distributed staged architecture for multimodal applications
Pereira, Alessandro Costa (1, 2); Hartmann, Falk (1, 2); Kadner, Kay (1, 2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 195-206, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, Technische Universität Dresden, Dresden, Germany (2) SAP Research CEC Dresden, SAP AG, Dresden, Germany
Abstract: Most of the research in the area of multimodality discusses either the usability aspect of multimodality or the multimodality support given by or missing in certain markup languages. The overall architectural side of large multimodal systems is unfortunately not adequately represented in today’s literature. This report shows some results obtained during the implementation of such a system, e.g., the use of the multimodal interaction framework and how a staged architecture can be combined with this framework to achieve domain independence. © Springer-Verlag Berlin Heidelberg 2007. (29 refs)
Main heading: Software architecture
Controlled terms: Computer programming languages - Distributed computer systems - Research and development management
Uncontrolled terms: Distributed staged architecture - Multimodal applications
Classification Code: 722.4 Digital Computers and Systems - 723.1.1 Computer Programming Languages - 723.5 Computer Applications - 901.3 Engineering Research - 912.2 Management
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
59. UML profile for the platform independent modelling of service-oriented architectures
López-Sanz, Marcos (1); Acuña, César J. (1); Cuesta, Carlos E. (1); Marcos, Esperanza (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, p 304-307, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Author affiliation: (1) Computer Languages and Systems II Department, Rey Juan Carlos University, Mostoles, Spain
Abstract: The vast diversity of implementation and support platforms for service-oriented architectures (such as Web, Grid or even CORBA) increases the complexity of the development process of service-based systems. To reduce it, both the architectural properties of the SOC paradigm and a development approach based on the MDA proposal can be studied. This work describes a UML profile for the PIM-level service-oriented architectural modelling, as well as the correspondent metamodel. PIM (Platform Independent Model) level is chosen because it does not reflect constraints about any specific platform or implementation technology. The proposal sketched in this article is part of our research of a service-oriented development method (SOD-M) called MIDAS. © Springer-Verlag Berlin Heidelberg 2007. (9 refs)
Main heading: Software architecture
Controlled terms: Computer simulation - Computer software portability - Constraint theory - Unified Modeling Language
Uncontrolled terms: Model driven architecture - PIM level modeling - Service oriented architecture - UML profiles
Classification Code: 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 723.5 Computer Applications - 961 Systems Science
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
60. Hydrobiologia: Preface
Dauvin, Jean-Claude ; Romana, Louis-Alexandre
Source: Hydrobiologia, v 588, n 1, p 1-2, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0647-0; Publisher: Kluwer Academic Publishers
Abstract: No abstract available
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
61. Convergent signs of degradation in both the capacity and the quality of an essential fish habitat: State of the Seine estuary (France) flatfish nurseries
Le Pape, O. (1); Gilliers, C. (1); Riou, P. (1); Morin, J. (1); Amara, R. (1); Désaunay, Y. (1)
Source: Hydrobiologia, v 588, n 1, p 225-229, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0665-y; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Lab. Ecologie Halieutique, Agrocampus Rennes, CS 4215, 65 rue de St. Brieuc, Rennes Cedex 35042, France
Abstract: The Bay of Seine is a potentially important nursery ground, especially for flatfish. This area, however, is also strongly anthropogenically influenced. A composite approach was chosen to compare the flatfish nursery function of the Seine estuary with other coastal and estuarine areas and to determine the impact of anthropogenic disturbances. It emerges that alteration of the nursery function in the Seine estuary is related to the loss of nursery habitat and to a lower quality of the residual surfaces. These observations stressed the importance of habitat destruction and decreased quality of remaining habitat for fish stocks renewal. © 2007 Springer Science+Business Media B.V. (39 refs)
Main heading: Estuaries
Controlled terms: Biodiversity - Growth kinetics - Surface water resources - Water pollution
Uncontrolled terms: Anthropogenic disturbance - Essential fish habitat - Flatfish juvenile - Nursery grounds - Seine estuary
Classification Code: 407.2 Waterways - 444.1 Surface Water - 453 Water Pollution - 454 Environmental Engineering - 461.2 Biological Materials and Tissue Engineering
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
62. In search of natural resource-based economies: The case of the Seine estuary (France)
Beaumais, Olivier (1); Laroutis, Dimitri (1)
Source: Hydrobiologia, v 588, n 1, p 3-11, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0648-z; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Faculté de Droit, de Sciences Économiques et de Gestion, CARE, University of Rouen, 3, avenue Pasteur, Rouen Cedex 1 76186, France
Abstract: Industry represents about 31% of the upper Normandy region total value-added against 19.5% at national level. The same holds for the employment, since industry accounts for 21% of total local jobs, against 18% at national level. This article attempts to answer the following question: can we explain this specific concentration of economic activity by the natural advantages (water availability, easy access by water) provided by the Seine Estuary? We first characterize “strongly Seine Estuary-dependent” industrial sectors, using simple indicators such as water withdrawals and pollution emissions. Then, we evaluate the influence of these sectors on the forces (labor market pooling, input sharing and knowledge spillovers) that lead to concentration of the economic activity in the Seine estuary. We find strong evidence that this economic activity is still natural resource based. © 2007 Springer Science+Business Media B.V. (15 refs)
Main heading: Natural resources exploration
Controlled terms: Economic and social effects - Estuaries - Industrial economics - Marketing - Pollution control - Water resources
Uncontrolled terms: Agglomeration economies - Industrial water use - Pollution emissions - Regional economics - Seine Estuary
Classification Code: 407.2 Waterways - 444 Water Resources - 454.2 Environmental Impact and Protection - 911.2 Industrial Economics - 911.4 Marketing - 971 Social Sciences
Treatment: General review (GEN)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
63. Modelling sand/mud transport and morphodynamics in the Seine river mouth (France): An attempt using a process-based approach
Waeles, B. (1, 2, 3); Le Hir, P. (1); Lesueur, P. (2); Delsinne, N. (2)
Source: Hydrobiologia, v 588, n 1, p 69-82, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0653-2; Publisher: Kluwer Academic Publishers
Author affiliation: (1) IFREMER Laboratoire, DYNECO/PHYSED Centre de Brest, BP 70, Plouzane 29280, France (2) Laboratoire de Morphodynamique Continentale et Côtière, Université de Caen, Caen, France (3) Creocean, Zone Technocean, La Rochelle, France
Abstract: The mouth of the Seine River estuary (France) has undergone marked morphological evolution over several decades mainly due to engineering works aimed at improving access to Rouen and Le Havre harbours. The intertidal areas are decreasing in size and the lower estuary is accumulating sediment and prograding. In order to understand and better describe the major morphological behaviours of the estuary, a morphodynamic numerical model was developed within the Seine-Aval program. At the end of the 1st part of the research program, a validated fine sediment transport model (3D) was available (Le Hir et al., 2001b). As the present morphological study addresses medium-term issues (a few decades), and because of the need to investigate impacts of local structures or events, we chose to use the so-called “process-based approach” starting from the existing model. First, the existing model was upgraded to account for (suspended) sand transport, and to achieve coupling between morphological changes and sediment transport. Erodability of the sediment accounts for the respective proportions of mud and sand. Simulations starting from an arbitrary surficial sediment cover show that the model is able to reproduce realistic sediment patterns. For example, it is able to change the sediment nature on the intertidal flat near Le Havre from sand to mud. Observed structures of suspended sediment are also reproduced: fine particles mainly follow the turbidity maximum whereas significant concentrations of sand grains in suspension are found where the hydrodynamic stresses are intense. Concerning morphodynamics, simulations with real forcing over one year are discussed. The effect of waves on the bathymetric evolution of the mouth is shown and the sensitivity of morphodynamics to the coupling procedure is tested. © 2007 Springer Science+Business Media B.V. (31 refs)
Main heading: Sediment transport
Controlled terms: Mathematical models - Numerical methods - Rivers - Surface morphology - Surface water resources
Uncontrolled terms: Morphodynamics - Sediment transport modeling
Classification Code: 407.2 Waterways - 444.1 Surface Water - 483.1 Soils and Soil Mechanics - 921.6 Numerical Methods
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
64. Facing the necessity of describing estuarine ecosystems: A review of food web ecology study techniques
Pasquaud, Stéphanie (1); Lobry, Jérémy (2); Elie, Pierre (1)
Source: Hydrobiologia, v 588, n 1, p 159-172, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0660-3; Publisher: Kluwer Academic Publishers
Author affiliation: (1) CEMAGREF - Groupement de Bordeaux, Unité Ecosystèmes Estuariens et Poissons Migrateurs Amphihalins, 50 Avenue de Verdun, Cestas 33612, France (2) IFREMER - Centre de Nantes, Département EMH (Ecologie et Modèles Pour l’Halieutique), Rue de l’Ile d’Yeu, Nantes Cedex 3 44311, France
Abstract: Estuarine areas are sites of human pressures and degradation. In order to maintain and/or restore the quality of estuarine ecosystems, it is necessary to describe their structure and functioning. For that reason, many recent scientific works focus on food webs, which are depicted as being good indicators of the functioning of aquatic ecosystems. Hence it is necessary to question how estuarine food webs can be described. This paper proposes a pragmatic and practical review of the most widely used techniques (stomach/gut content analysis, stable isotope ratios and biochemical markers) with emphasis on their main advantages, drawbacks and bias according to possible ecological goals (ecological quality objectives). These approaches, although quite different, provide complementary information about the trophic relationships in the system, that is to say the sources of organic matter and the description of energy flows between the different compartments of the food web. In trophic models, all these results can be integrated to a global picture of the estuarine trophic structure. This is considered to be an essential step towards the understanding of the functioning of these ecosystems. © 2007 Springer Science+Business Media B.V. (109 refs)
Main heading: Estuaries
Controlled terms: Biological materials - Degradation - Ecosystems - Food products - Isotopes
Uncontrolled terms: Biochemical markers - Estuarine food web - Gut content analysis - Trophic models
Classification Code: 407.2 Waterways - 454.3 Ecology and Ecosystems - 461.2 Biological Materials and Tissue Engineering - 802.2 Chemical Reactions - 803 Chemical Agents and Basic Industrial Chemicals - 822.3 Food Products
Treatment: Theoretical (THR) - Experimental (EXP)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
65. The fish assemblage of the intertidal salt marsh creeks in North Bull Island, Dublin Bay: Seasonal and tidal changes in composition, distribution and abundance
Koutsogiannopoulou, Violetta (1); Wilson, James G. (1)
Source: Hydrobiologia, v 588, n 1, p 213-224, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0664-z; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Zoology Department, Trinity College Dublin, Dublin 2, Ireland
Abstract: An intertidal salt marsh fish assemblage inhabiting two creeks on North Bull Island, Dublin Bay was sampled monthly from June 2000 until May 2002. Water temperature and salinity were recorded in situ and samples were also taken for Suspended Particulate Matter (SPM) and Chlorophyll a. All fish caught were weighed and measured and classified into functional guilds. A total of 6,549 individuals comprising 10 fish species from 10 families were recorded within the two creeks. The community was dominated by a few species, a feature common to other estuarine fish populations. Of the 10 species found, the common goby, Pomatoschistus microps, the 3-spined stickleback, Gasterosteus aculeatus, the thick-lipped grey mullet, Chelon labrosus and the flounder, Platichthys flesus contributed 98.4% of all fish sampled. The fish population of the channels at Bull Island, Dublin, was dominated by the resident gobies (true estuarine resident species), but also hosted juveniles of species such as the bass, Dicentrarchus labrax (marine juvenile migrant species). In turn, the nekton populations were dominated by the brown shrimp, Crangon crangon and the fairy shrimp, Palaemonetes varians especially in winter when fewer fish (numbers of species and abundance) were found. Multivariate analysis of fish diversity and abundance revealed a strong seasonal pattern but there was little evidence of difference between creeks, nor of tidal (spring/neap) effects. The estuarine fish using the intertidal marsh creeks have been little studied in Europe yet they play a major role with the decapods in these habitats. This role needs to be quantified for a proper understanding of the system’s function. © 2007 Springer Science+Business Media B.V. (52 refs)
Main heading: Biodiversity
Controlled terms: Chlorophyll - Hydrodynamics - Salinity measurement - Temperature measurement - Tides
Uncontrolled terms: Community structures - Fish assemblage - North Bull Island - Salt marsh habitats
Classification Code: 444 Water Resources - 454 Environmental Engineering - 471.4 Seawater, Tides and Waves - 631.1.1 Liquid Dynamics - 804.1 Organic Compounds - 944.6 Temperature Measurements
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
66. Typical features of particulate phosphorus in the Seine estuary (France)
Némery, Julien (1, 2); Garnier, Josette (1)
Source: Hydrobiologia, v 588, n 1, p 271-290, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0669-7; Publisher: Kluwer Academic Publishers
Author affiliation: (1) UMR Sisyphe 7619, UMPC Paris 6, Tour 56, Boite 105, Etage 4, 4 place Jussieu, Paris 75005, France (2) LTHE (UMR CNRS 5564, UJF, INPG, IRD), BP 53, Grenoble Cedex 09 38 041, France
Abstract: During the 2001-2002 hydrological cycle, 8,000 tons P year-1 (44% as particulate phosphorus) originating from the Seine basin entered the Seine estuary. P content in suspended sediments (SS) is 2.9 g P kg-1 (80% as inorganic form) at Poses (the upstream limit of the Seine estuary). During the transfer from Poses to Caudebec (the limit of saline water intrusion), Particulate Inorganic Phosphorus (PIP) in SS decreases by 40% whereas Particulate Organic Phosphorus (POP) remains stable. This decrease is explained as the result of (i) a dilution by SS poorer in P, originating from storage zones (mudflats) within the estuary, and (ii) a loss of P by sedimentation, especially in the Rouen harbour where 15% to 20% of SS are yearly trapped and extracted. Downstream, in the turbidity maximum of the estuary, P content in SS is twice as low as at Poses (1.5 g P kg-1, 70% as inorganic form). PIP content is fairly homogeneous both vertically and throughout an annual survey. On the other hand, POP varies by season. Higher POP content is observed during vernal period with phytoplankton accumulation. In a salinity gradient from 0 to 30 (PSS78), PIP content further decreases by 30%. POP does not vary much in this gradient, leading to the assumption that PIP is submitted to desorption in response to the dilution by marine waters (poor in orthophosphates). Using 32P isotopic method, we establish a mathematical formulation of P exchangeable between the suspended solid and water phases of the Seine estuary. Particulate P in the turbidity maximum zone is shown to represent a possible source of dissolved P, available for algal growth in the Seine Bight. Instead of playing a role of nutrient retention, the turbidity maximum zone of the Seine estuary could favour coastal eutrophication. © 2007 Springer Science+Business Media B.V. (62 refs)
Main heading: Phosphorus
Controlled terms: Estuaries - Hydrology - Inorganic compounds - Sediment transport - Sedimentation
Uncontrolled terms: Phosphorus dynamics - Seine estuary - Turbidity maximum zones
Classification Code: 407.2 Waterways - 444 Water Resources - 483.1 Soils and Soil Mechanics - 802.3 Chemical Operations - 804 Chemical Products Generally - 804.2 Inorganic Compounds
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
67. Sediment transfer and accumulation in two contrasting salt marsh/mudflat systems: The Seine estuary (France) and the Medway estuary (UK)
Cundy, A.B. (1); Lafite, R. (2); Taylor, J.A. (3); Hopkinson, L. (1); Deloffre, J. (2); Charman, R. (3); Gilpin, M. (4); Spencer, K.L. (5); Carey, P.J. (4); Heppell, C.M. (5); Ouddane, B. (6); De Wever, S. (2); Tuckett, A. (4)
Source: Hydrobiologia, v 588, n 1, p 125-134, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0657-y; Publisher: Kluwer Academic Publishers
Author affiliation: (1) School of the Environment, University of Brighton, Lewes Road, Brighton BN2 4GJ, United Kingdom (2) CNRS/Université de Rouen, Mont-Saint-Aignan Cedex 76821, France (3) University of Sussex, Falmer, Brighton BN1 9QJ, United Kingdom (4) University of Greenwich (Medway Campus), Chatham Maritime, Kent ME4 4TB, United Kingdom (5) Queen Mary University of London, Mile End Road, London E1 4NS, United Kingdom (6) Universite de Sciences et Technologies de Lille, Villeneuve d’Ascq, France
Abstract: Understanding the dynamics of fine sediment transport across the upper intertidal zone is critical in managing the erosion and accretion of intertidal areas, and in managed realignment/estuarine habitat recreation strategies. This paper examines the transfer of sediments between salt marsh and mudflat environments in two contrasting macrotidal estuaries: the Seine (France) and the Medway (UK), using data collected during two joint field seasons undertaken by the Anglo-French RIMEW project (Rives-Manche Estuary Watch). High-resolution ADCP, Altimeter, OBS and ASM measurements from mudflat and marsh surface environments have been combined with sediment trap data to examine short-term sediment transport processes under spring tide and storm flow conditions. In addition, the longer-term accumulation of sediment in each salt marsh system has been examined via radiometric dating of sediment cores. In the Seine, rapid sediment accumulation and expansion of salt marsh areas, and subsequent loss of open intertidal mudflats, is a major problem, and the data collected here indicate a distinct net landward flux of sediments into the marsh interior. Suspended sediment fluxes are much higher than in the Medway estuary (averaging 0.09 g/m3/s), and vertical accumulation rates at the salt marsh/mudflat boundary exceed 3 cm/y. Suspended sediment data collected during storm surge conditions indicate that significant in-wash of fine sediments into the marsh interior can occur during (and following) these high-magnitude events. In contrast to the Seine, the Medway is undergoing erosion and general loss of salt marsh areas. Suspended sediment fluxes are of the order of 0.03 g/m 3/s, and the marsh system here has much lower rates of vertical accretion (sediment accumulation rates are ca. 4 mm/y). Current velocity data for the Medway site indicate higher velocities on the ebb tide than occur on the flood tide, which may be sufficient to remobilise sediments deposited on the previous tide and so force net removal of material from the marsh. © 2007 Springer Science+Business Media B.V. (12 refs)
Main heading: Estuaries
Controlled terms: Bioaccumulation - Environmental engineering - Sediment transport - Sedimentation - Surface morphology
Uncontrolled terms: Medway - Mudflat systems - Salt marsh - Seine estuary - Suspended sediments
Classification Code: 407.2 Waterways - 454 Environmental Engineering - 461.9 Biology - 483.1 Soils and Soil Mechanics - 802.3 Chemical Operations - 931.2 Physical Properties of Gases, Liquids and Solids
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
68. Modelling Pb and Cd dynamics in the Seine estuary
Thouvenin, B. (1); Gonzalez, J.L. (1); Chiffoleau, J.F. (2); Boutier, B. (2); Le Hir, P. (3)
Source: Hydrobiologia, v 588, n 1, p 109-124, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0656-z; Publisher: Kluwer Academic Publishers
Author affiliation: (1) IFREMER BE/CM Centre de Toulon, Zone Portuaire de Bregaillon, BP 330, 83507 La Seyne-sur-Mer Cedex, France (2) IFREMER BE/CM Centre de Nantes, Nantes Cedex, France (3) IFREMER DYNECO/PHYSED Centre de Brest, Plouzane, France
Abstract: The Seine estuary (France) is currently one of the world’s most contaminated estuaries, due in particular to its high cadmium and lead content. Proper understanding of contaminant transfer, transformation and retention mechanisms throughout the estuary and up to the adjacent marine zone require a range of studies involving data collections, experiments, and modeling tool. A multivariable transport model (SiAM-3D) was used to simulate dissolved and particulate transport and it is applied to several calculation grids; a speciation model (MOCO) was used to select key species and obtain a schematic system representation. The coupled model for Cd and Pb was compared with field measurements. The complementary character of various tools (model applied to annual time scale, in situ measurements and experiments) allowed to explore and quantify various hypotheses on the high dissolved cadmium concentrations observed during low river flow. The target is to achieve a compromise between acceptable computing times and adequate result accuracy. Although particle and contaminant behaviour is globally well-reproduced by the coarse grid, calculation errors relating to bayward fluxes and stocks deposited inside the estuary were highlighted after comparison with the fine grid. © 2007 Springer Science+Business Media B.V. (62 refs)
Main heading: Estuaries
Controlled terms: Computer simulation - Data reduction - Hydrodynamics - Impurities - Lead - Mineral resources
Uncontrolled terms: 3D-modeling - Seine estuary
Classification Code: 951 Materials Science - 723.5 Computer Applications - 723.2 Data Processing and Image Processing - 631.1.1 Liquid Dynamics - 546.1 Lead and Alloys - 501 Exploration and Prospecting - 407.2 Waterways
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
69. A comparison of energy flow through the Dublin Bay and Baie de Somme intertidal ecosystems and their network analysis
Wilson, James G. (1); Rybarczyck, Herve (2); Elkaim, Bernard (2)
Source: Hydrobiologia, v 588, n 1, p 231-243, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0666-x; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Zoology Department, Trinity College, Dublin 2, Ireland (2) Laboratoire d’Hydrobiologie, Université P and M Curie Paris VI, Paris, France
Abstract: Energy (biomass) and energy flows (production, inputs, transfers and losses) were calculated for eight and twelve compartment systems (phytoplankton, benthic primary producers (macroalgae, microphytobenthos), zooplankton, benthos (meiofauna, suspensivores, deposivores and predators), fish, birds and particulate organic matter (POM) in sediment and suspended particulate matter (SPM)) both balanced and unbalanced of Dublin Bay and the Baie de Somme. The resultant models were analysed with the Scientific Committee on Oceanic Research (SCOR) network analysis package. While the two systems share many properties such as the dominant biosedimentary facies, there are fundamental differences in both structuring and responses of the systems. The network analysis suggested that the Baie de Somme was far more productive, notably in terms of water column productivity, and was the more mature system. The high organic SPM input to Dublin Bay greatly elevated the degree of detritivory such that the analysis generated metrics indicative of a mature system but which rather reflected the degree of anthropogenic stress on the system. However, the analysis of both systems displayed varying degrees of maturity. Increasing the number of compartments greatly increased the calculated throughput (T) of the system and other associated metrics such as capacity (C), ascendancy (A) and redundancy (R). In the case of Dublin Bay, a higher number of compartments increased the various measures of system maturity, but this was much less marked for the Baie de Somme. Balancing the systems also increased T, C, A and R, and, to a lesser extent but not invariably, the system maturity metrics. The ratios of the comparative system metrics such as comparative ascendancy (A/C) were much less changed by the different methodologies and as such are recommended as robust measures for intercomparison of system performance. © 2007 Springer Science+Business Media B.V. (53 refs)
Main heading: Ecosystems
Controlled terms: Biodiversity - Biomass - Energy conservation - Energy transfer - Sedimentology
Uncontrolled terms: Ecological network analysis - Energy flow - Maturity
Classification Code: 454.3 Ecology and Ecosystems - 481.1 Geology - 525.2 Energy Conservation - 525.4 Energy Losses (industrial and residential) - 805.1.1 Biochemical Engineering
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
70. The intra-annual variability of soft-bottom macrobenthos abundance patterns in the North Channel of the Seine estuary
Desroy, Nicolas (1, 2); Janson, Anne-Laure (1, 3); Denis, Lionel (1); Charrier, Gregory (4); Lesourd, Sandric (5); Dauvin, Jean-Claude (1)
Source: Hydrobiologia, v 588, n 1, p 173-188, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0661-2; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Station Marine de Wimereux, CNRS FRE, 28163 ELICO, BP 80, Wimereux 62930, France (2) Ifremer, Laboratoire Environnement et Ressources, 2 bis Rue Grout Saint Georges, Saint Malo 35400, France (3) Laboratoire de Morphodynamique Continentale et Côtière, UMR 6143, Université de Rouen, 10 Boulevard De Broglie, Mont-Saint-Aignan Cedex 76821, France (4) Laboratoire de Ressources Halieutiques, Institut Universitaire Européen de la Mer, Place Nicolas Copernic, Plouzane 29280, France (5) Université du Littoral-Côte d’Opale, CNRS UMR, 8013 ELICO, Avenue Foch, Wimereux 62930, France
Abstract: Temporal and spatial variability of the Abra alba-Pectinaria koreni and Macoma balthica communities was examined in the northern part of the Seine estuary (North Channel) over different space and time scales in order to assess the role that the hydrologic regime and/or anthropogenic influences play in defining benthic communities over time. Sediment in the North Channel displayed strong spatial and temporal variability, sustained by intense sediment transport episodes. Total macrobenthic abundances ranged widely on the course of the year and there was no evidence of a seasonal signal for the density fluctuations, whatever the spatial scale considered. The bio-sedimentary dynamics can be divided into two periods: the first corresponds to the high flow rate period (January-May) during which fauna is influenced by fine silt/clay deposition, and the second to the low flow rate period (June-December) during which sandy deposits prevail. Despite the absence of significant correlations between sediment composition and abundance, episodes of sediment transport seem to be an important structuring mechanism in the Seine estuary. As a consequence, the faunal composition varied throughout the year. The winter and spring fauna, characterised by species living on muddy fine-sands or muds, were enriched during the summer and autumn by species living in clean fine sand, such as Donax vittatus, Nephtys cirrosa or Spio decoratus, mainly represented by adult individuals. Secondary settlement of drifters may explain the rapid structuration of assemblages a few days after the sandy deposits. Our results suggest the importance of the bentho-pelagic coupling, primarily induced by the sedimentary instability, on the macrobenthic fauna dynamics. The intra-annual variability of assemblages at the mouth of the Seine river and the silted situation of the North Channel might simply be the result of the silting up and alteration of the inner estuary, generated by several decades of man-made modifications and natural processes. © 2007 Springer Science+Business Media B.V. (41 refs)
Main heading: Biodiversity
Controlled terms: Environmental impact - Estuaries - Hydrology - Microorganisms - Sediment transport
Uncontrolled terms: Abra alba community - Anthropogenic impacts - Bentho-pelagic coupling - Port 2000 - Temporal variability
Classification Code: 407.2 Waterways - 444 Water Resources - 454 Environmental Engineering - 454.2 Environmental Impact and Protection - 461.9 Biology - 483.1 Soils and Soil Mechanics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
71. Particulate organic carbon in the estuarine turbidity maxima of the Gironde, Loire and Seine estuaries: Origin and lability
Etcheber, Henri (1); Taillez, Aurélien (1); Abril, Gwenaël (1); Garnier, Josette (2); Servais, Pierre (3); Moatar, Florentina (4); Commarieu, Marc-Vincent (1)
Source: Hydrobiologia, v 588, n 1, p 245-259, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0667-9; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Département de Géologie et Océanographie, UMR CNRS 5805 EPOC, Université Bordeaux 1, Avenue des Facultés, 33405 Talence Cedex, France (2) Laboratoire Sisyphe, UMR 7619, Université Pierre et Marie Curie Paris VI, Boite 123, 4 place Jussieu, Paris Cedex 05 75252, France (3) Ecologie des Systèmes Aquatiques, Université Libre de Bruxelles, Bd du Triomphe, Bruxelles 1050, Belgium (4) Laboratoire de Géologie des Environnements Aquatiques Continentaux, Université de Tours, Parc de Grandmont, Tours 37200, France
Abstract: A study of the particulate organic carbon (POC) in the estuarine turbidity maxima (ETMs) of the three major French macrotidal estuaries shows that the average contents are 1.5, 3.3 and 3.1% (expressed in % of dry suspended sediment) in the Gironde, Loire and Seine Estuaries, respectively. There is no seasonal variation of POC contents in the Gironde Estuary, whereas, they often increase in the Loire and the Seine Estuaries in spring and summer. The lability of the estuarine particulate organic matter was estimated by two analyses: 1/labile organic matter was measured as the organic carbon loss during incubation tests over one month; 2/ the hydrolysable organic fraction was determined after 6N HCl digestion. The organic fractions of the ETMs are mainly refractory. Any increase in the amount of POC as compared to the background levels (cited above) is always correlated to an increase of organic matter lability. The yearly average fluvial contributions by various particulate organic pools (soil and litter organic matter; organic matter of phytoplanktonic and human origin) that enter the three estuaries were quantified. In the Garonne River, soil and litter are the major (90%) POC sources. In the Loire system, due to the eutrophication of the river water, phytoplankton contributes up to 50% of the total POC load. In the Seine river, soil and litter contribute 70% of the total POC input; POC of human origin is also significant (10%), due to the impact of the City of Paris (10 million inhabitants). The lability of the different types of organic matter ranks as follows: phytoplankton ~litter > human-origin organic matter >> soil. By combining the POC budgets and the lability of each type of organic fraction, it was possible to explain why the POC of the three ETMs is different and characterizes its refractory vs. labile nature. © 2007 Springer Science+Business Media B.V. (73 refs)
Main heading: Organic carbon
Controlled terms: Biological materials - Estuaries - Hydrolysis - Phytoplankton - Refractory materials - Soils
Uncontrolled terms: Organic carbon loss - Organic matter lability - Particulate organic carbon (POC) - Particulate organic matter
Classification Code: 804.1 Organic Compounds - 802.2 Chemical Reactions - 483.1 Soils and Soil Mechanics - 812.2 Refractories - 471 Marine Science and Oceanography - 461.2 Biological Materials and Tissue Engineering - 407.2 Waterways - 461.9 Biology
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
72. Fluxes of polycyclic aromatic hydrocarbons in the Seine estuary, France: Mass balance and role of atmospheric deposition
Motelay-Massei, A. (1, 2); Ollivon, D. (3); Garban, B. (3); Tiphagne-Larcher, K. (3); Chevreuil, M. (3)
Source: Hydrobiologia, v 588, n 1, p 145-157, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0659-9; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Département de Géologie, UMR CNRS 6143, Université de Rouen, 10 Boulevard de Broglie, Mont-Saint-Aignan Cedex 76821, France (2) Environment Canada, Meteorological Service of Canada, Air Quality Processes Research Division, 4905 Dufferin Street, Downsview, Ont. M3H 5T4, Canada (3) Laboratoire Hydrologie et Environnement, UMR Sisyphe 7619 CNRS, Université Pierre et Marie Curie, case 123, 4 place Jussieu, Paris Cedex 5 75252, France
Abstract: Measurements of polycyclic aromatic hydrocarbons (PAHs) were carried out from 2001 to 2003 in various environmental compartments (ambient air, atmospheric deposition, soils, sediments, runoff, and surface waters) in the Seine Estuary. The goal of this study was to identify the importance of atmospheric fluxes to occurrence of PAHs in the estuary, and to estimate the major pathways of their transport and accumulation within this ecosystem. The annual atmospheric inputs in the estuary ranged from 2.5 to 16 kg for the first sampling year, which is high when compared to those calculated for other European locations. In parallel, PAH transport from the atmosphere to the watershed outlet was investigated for two rural and urban small experimental watersheds within the Seine Estuary. In rural areas, atmospheric inputs are higher than exported loads by surface water and PAHs are accumulating in soils. The inverse occurs in urban areas, where the contribution of atmospheric deposition is negligible compared with PAH exported loads by runoff. These results allowed us to establish a mass balance for PAHs on the scale of the Seine Estuary, and to determine the dynamics of PAH transport. This study highlights the role of the atmospheric compartment in the transfer of contaminants and the importance of the local PAH inputs within the Seine Estuary. © 2007 Springer Science+Business Media B.V. (34 refs)
Main heading: Polycyclic aromatic hydrocarbons
Controlled terms: Deposition - Environmental engineering - Estuaries - Mass transfer - Runoff - Water resources
Uncontrolled terms: Atmospheric compartment - Atmospheric deposition - Seine Estuary
Classification Code: 802.3 Chemical Operations - 641.3 Mass Transfer - 454 Environmental Engineering - 804.1 Organic Compounds - 444.1 Surface Water - 442.1 Flood Control - 407.2 Waterways - 444 Water Resources
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
73. Biodiversity and distribution of polychaetes and molluscs along the Dese estuary (Lagoon of Venice, Italy)
Maggiore, F. (1); Keppel, E. (1)
Source: Hydrobiologia, v 588, n 1, p 189-203, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0662-1; Publisher: Kluwer Academic Publishers
Author affiliation: (1) CNR-ISMAR, Castello, 1364, Venezia 30122, Italy
Abstract: Mollusc and polychaete distribution in the mud flats along the Dese estuary (lagoon of Venice, Italy) was analysed in May, August and October to evaluate taxonomic biodiversity and zonation pattern of soft macrobenthos in an area of the lagoon hardly known from this point of view. Throughout the studied area most of the species were polychaetes, particularly Streblospio shrubsolii (Buchanan), which showed greater abundance from May to October. Molluscs and polychaetes showed a zonation of marine species which colonize brackish environments in the outer and intermediate areas of the estuary and of brackish water species in the inner one. In the outer area different assemblages were attributed to different sediment types. This distribution pattern, put in relation to the distance from the sea, was evident in May and partly blurred in August and October: the assemblages of the inner area of the estuary invaded the intermediated area in August and affected outer area in October because of spreading of the brackish water species S. shrubsolii, which became dominant. The distribution pattern of molluscs and polychaetes can be explained in terms of confinement as the leading factor influencing water quality and dynamics of the ecosystem. It is also needed to be taken into consideration the role played by competition due to different degree of opportunism of the most abundant species. © 2007 Springer Science+Business Media B.V. (56 refs)
Main heading: Biodiversity
Controlled terms: Estuaries - Marine biology - Microorganisms - Organic polymers - Sediment transport
Uncontrolled terms: Benthos - Molluscs - Polychaetes - Venice lagoon
Classification Code: 407.2 Waterways - 454 Environmental Engineering - 461.9 Biology - 483.1 Soils and Soil Mechanics - 815.1.1 Organic Polymers
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
74. Influence of fresh water discharge on nutrient distribution in a macrotidal lagoon, West Sussex, UK
Mitchell, S.B. (1); Theodoridou, A. (1); Pope, D.J. (1)
Source: Hydrobiologia, v 588, n 1, p 261-270, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0668-8; Publisher: Kluwer Academic Publishers
Author affiliation: (1) School of the Environment, University of Brighton, Lewes Road, Brighton BN2 4GJ, United Kingdom
Abstract: Results of nitrate and phosphate concentrations measured using hand-held ‘Hach’ monitors are presented, both over individual tidal cycles and over longer term deployments at Pagham Harbour, West Sussex, UK. This macrotidal lagoon (offshore tidal range 3.0 m neaps-6.5 m springs) is a site of key importance as a nature reserve and a home for several rare species of plants and animals. In particular, the effects of fresh water-salt water stratification over 4 tidal cycles at two tidal-fresh water boundaries is presented. It is shown that obtaining periodic vertical profile measurements during individual tidal cycles helps to quantify the transport mechanisms of nutrients from the tidal limits into the main body of the lagoon. Of key interest is the interaction between sediment-bound nutrients with the surrounding water in which the sediment is suspended during parts of the tidal cycle. Synthesis of these results with existing knowledge about sediment-water-nutrient interactions reveals how it is possible for nutrients to become trapped at the muddy tidal limits of the lagoon. In certain cases it is shown that nutrient-rich water from fresh water streams only gradually mixes with the denser, salt water of the incoming tide. Whilst a degree of salinity-induced stratification may be expected during the flood tide, these observations suggest that the water column is stratified with respect to both N and P, even well into the ebb tide. Thus at sites where stratification is important, there is a tendency for nutrients to remain preferentially near the water surface, and thus come into contact with fine, less mobile sediments near the surface of inter-tidal zones, which are themselves, in general, accreting. Since the overlying water is generally slow-moving during high water, it is postulated that saline-induced vertical stratification of estuarine water is an important mechanism in promoting nutrient build-up in muddy inter-tidal areas of this kind. © 2007 Springer Science+Business Media B.V. (16 refs)
Main heading: Discharge (fluid mechanics)
Controlled terms: Ecology - Nutrients - Phosphates - Sediment transport - Thermal stratification - Water resources
Uncontrolled terms: Fresh water - Tidal cycles - Water stratification
Classification Code: 443.1 Atmospheric Properties - 444 Water Resources - 454.3 Ecology and Ecosystems - 483.1 Soils and Soil Mechanics - 631.1.1 Liquid Dynamics - 804.1 Organic Compounds
Treatment: Literature review (LIT) - Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
75. Identification of the gene encoding a Dnak-type molecular chaperone as potentially down regulated in blue mussels (Mytilus edulis) following acute exposure to atrazine
Masson, R. (1); Loup, B. (1); Bultelle, F. (1); Siah, A. (1); Leboulenger, F. (1); Danger, J.M. (1)
Source: Hydrobiologia, v 588, n 1, p 135-143, September 2007, Theme: Consequences of estuarine management on hydrodynamics and ecological functioning. ECSA 38th Symposium Rouen 2004 Coorganisation Seine-Aval Programme and ECSA; ISSN: 00188158, E-ISSN: 15735117; DOI: 10.1007/s10750-007-0658-x; Publisher: Kluwer Academic Publishers
Author affiliation: (1) Laboratoire d’Ecotoxicologie - Milieux Aquatiques (UPRES-EA 3222, IFRMP23, GDR IFREMER), University of Le Havre, Le Havre Cedex 76058, France
Abstract: Because of their widespread geographical distribution and high capacity of bioaccumulation, bivalve species, in particular blue mussels (Mytilus edulis), are considered as sentinel organisms in Ecotoxicology for monitoring the effects of xenobiotics in estuaries and coastal areas. The purpose of this study was to identify molecular biomarkers for atrazine exposure by using differential analysis of gene expression. For this, the digestive gland transcriptome of atrazine exposed mussels (1 µg l-1, 24 h) was compared to that of control animals. Candidate transcripts for differential expression were isolated by Subtractive PCR Suppressive Hybridization (SSH). A total of 543 potentially regulated clones was isolated. A part of these clones was sequenced and extensive similarity searches in genome data bases were carried out. Among the sequenced cDNA clones, gld15, gld122 and gld177 which corresponded to potentially down regulated mRNA, were likely to encode for a Mytilus edulis DnaK-type molecular chaperone of the Heat shock 70 protein family. As a matter of fact, the deduced peptide sequence of gld15 comprised 223 amino acids and possessed 87.4% of identity with the human Hsc70. Heat shock proteins and, in particular Hsc70 and Hsp70, are considered as molecular chaperones involved in various cellular processes including refolding of damaged proteins and apoptosis. The fact that atrazine potentially down regulates the expression of a cytoprotective gene was unexpected and further experiments are required to measure the kinetics and dose response effects of atrazine on DnaK gene expression. Differential gene expression analysis is one of most widely used approach of the postgenomics era in the biomedical field of research and it may prove to be a valuable tool for the identification of new and relevant biomarkers in Ecotoxicology. © 2007 Springer Science+Business Media B.V. (41 refs)
Main heading: Gene encoding
Controlled terms: Bioaccumulation - Biomarkers - Herbicides - Molecular structure - Toxicity
Uncontrolled terms: Bivalve - Mytilus edulis - Subtractive PCR Suppressive Hybridization
Classification Code: 461.7 Health Care - 461.9 Biology - 481.1 Geology - 801.4 Physical Chemistry - 804.1 Organic Compounds - 931.3 Atomic and Molecular Physics
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
76. Increased metal utilization in carbon-supported Pt catalysts by adsorption of preformed Pt nanoparticles on colloidal silica
Zeng, J. (1); Lee, J.Y.; Chen, J.; Shen, P.K.; Song, S.
Source: Fuel Cells, v 7, n 4, p 285-90, Aug. 2007; ISSN: 1615-6846; DOI: 10.1002/fuce.200600037; Publisher: Wiley-VCH Verlag GmbH, Germany
Author affiliation: (1) Res.Inst. of Tsinghua Univ., Shenzhen, China
Abstract: Pt/C electrocatalysts, aimed at maximizing the electrochemical surface area (ECSA) and consequently the specific mass activity of fuel cell reactions, are obtained by firstly depositing Pt nanoparticles on colloidal silica (Pt-silica), followed by the adsorption of the latter onto a carbon support. This method of catalyst preparation increases Pt metal utilization and generates accessible void space in the interpenetrating particle network of carbon and silica for the facile transport of reactants and products. Both electrochemical hydrogen adsorption/desorption and CO oxidation measurements show an increase in the ECSA using this approach. Methanol electrooxidation is used as a test reaction to evaluate the catalytic activity. It is found that the silica modified catalyst is three times as active as a catalyst prepared without silica, under otherwise identical conditions. (22 refs)
Inspec controlled terms: adsorption - carbon - catalysts - desorption - electrochemical analysis - nanoparticles - platinum - silicon compounds
Uncontrolled terms: carbon-supported Pt catalysts - Pt nanoparticles - colloidal silica - Pt/C electrocatalysts - electrochemical surface area - fuel cell reactions - catalyst preparation - Pt metal utilization - interpenetrating particle network - electrochemical hydrogen adsorption - electrochemical hydrogen desorption - CO oxidation measurements - methanol electrooxidation - silica modified catalyst - Pt - Element - C - Element - Pt - C
Classification Code: A6810J Fluid kinetics (evaporation, adsorption, condensation, catalysis, etc.) - A8280F Electrochemical analytical methods - A8116 Methods of nanofabrication and processing - A6845D Adsorption and desorption kinetics; evaporation and condensation
IPC Code: B01J - B82B1/00 - B82B3/00 - G01N27/26
Treatment: Practical (PRA) - Experimental (EXP)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
77. Software Architecture First European Conference, ECSA 2007 Proceedings
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 4758 LNCS, 2007, Software Architecture - First European Conference, ECSA 2007, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-13: 9783540751311; Conference: 1st European Conference on Software Architecture, ECSA 2007, September 24, 2007 - September 26, 2007; Publisher: Springer Verlag
Abstract: The proceedings contain 36 papers. The topics discussed include: software architecture for task-oriented computing; an active architecture approach to dynamic systems co-evolution; pattern-based evolution of software architectures, formal design of structural and dynamic features of publish/subscribe architectural styles; an ontology based approach for modelling architectural styles; enabling adaptivity in user interfaces; architecture migration driven by code categorization; effective tool support for architectural knowledge sharing; a goal-oriented approach for the generation and evaluation of alternative architectures; first class connectors for prototyping service oriented architectures; wireless sensor network application development: an architecture-centric MDE approach; and a distributed stage architecture for multimodal applications.
Main heading: Software architecture
Controlled terms: Ontology - Requirements engineering - Software prototyping - User interfaces - Wireless sensor networks
Uncontrolled terms: Architectural styles - Knowledge sharing - MDE approach - Pattern based evolution
Classification Code: 716.3 Radio Systems and Equipment - 722.2 Computer Peripheral Equipment - 723.1 Computer Programming - 723.5 Computer Applications
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
78. Software Architecture. First European Conference, ECSA 2007
Editors: Oquendo, F.
Springer-Verlag, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Abstract: The following topics are dealt with: software architecture; task-oriented computing; software engineering. (0 refs)
Inspec controlled terms: software architecture
Uncontrolled terms: software architecture - task-oriented computing - software engineering
Classification Code: C0000 General and management topics - C6110B Software engineering techniques
IPC Code: G06F9/44
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
79. Increased metal utilization in carbon-supported Pt catalysts by adsorption of preformed Pt nanoparticles on colloidal silica
Zeng, J. (1); Lee, J.Y. (2); Chen, J. (1); Shen, P.K. (3); Song, S. (3)
Source: Fuel Cells, v 7, n 4, p 285-290, August 2007; ISSN: 16156846, E-ISSN: 16156854; DOI: 10.1002/fuce.200600037; Publisher: John Wiley and Sons Ltd
Author affiliation: (1) Research Institute of Tsinghua University in Shenzhen, Shenzhen High-Tech Industrial Park, Shenzhen, 518057, China (2) Department of Chemical and Biomolecular Engineering, National University of Singapore, 10 Kent Ridge Crescent, Singapore 119260, Singapore (3) State Key Laboratory of Optoelectronic Materials and Technologies, School of Physics and Engineering, Sun Yat-Sen University, 135 Xingang Road, Guangzhou, Guangdong 510275, China
Abstract: Pt/C electrocatalysts, aimed at maximizing the electrochemical surface area (ECSA) and consequently the specific mass activity of fuel cell reactions, are obtained by firstly depositing Pt nanoparticles on colloidal silica (Pt-silica), followed by the adsorption of the latter onto a carbon support. This method of catalyst preparation increases Pt metal utilization and generates accessible void space in the interpenetrating particle network of carbon and silica for the facile transport of reactants and products. Both electrochemical hydrogen adsorption/desorption and CO oxidation measurements show an increase in the ECSA using this approach. Methanol electrooxidation is used as a test reaction to evaluate the catalytic activity. It is found that the silica modified catalyst is three times as active as a catalyst prepared without silica, under otherwise identical conditions. © 2007 WILEY-VCH Verlag GmbH & Co. KGaA. (22 refs)
Main heading: Electrocatalysts
Controlled terms: Adsorption - Carbon - Electrooxidation - Fuel cells - Nanoparticles - Platinum
Uncontrolled terms: Carbon support - Colloidal silica - Metal utilization - Methanol electrooxidation
Classification Code: 933 Solid State Physics - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 802.3 Chemical Operations - 802.2 Chemical Reactions - 801.4.1 Electrochemistry - 761 Nanotechnology - 702.2 Fuel Cells - 547.1 Precious Metals
Treatment: Theoretical (THR) - Experimental (EXP)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
80. Effect of scan range on Pt surface area loss in potential cycling experiments
Waje, Mahesh M. (1); Li, Wenzhen (1); Chen, Zhongwei (1); Larsen, Paul (1); Yan, Yushan (1)
Source: ECS Transactions, v 11, n 1 PART 2, p 1227-1233, 2007, ECS Transactions - 7th Symposium Devoted to Proton Exchange Membrane Fuel Cells; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566775670; DOI: 10.1149/1.2781036; Conference: 7th Symposium Devoted to Proton Exchange Membrane Fuel Cells - 212th ECS Meeting, October 7, 2007 - October 12, 2007; Sponsor: Electrochemical Society, Energy Technology Division; Electrochemical Society, Phys. Anal. Electrochem. Div.; Electrochemical Society, Battery Division; Electrochemical Society, Ind. Electrolysis Electrochem. Eng. Div.; Publisher: Electrochemical Society Inc.
Author affiliation: (1) Department of Chemical and Environmental Engineering, College of Engineering, University of California, Riverside, CA 92521
Abstract: Effect of upper and lower potential limits on R stability in potential cycling experiments is studied for 20 wt. % R/C E-TEK catalyst in acidic medium. The R electrochemical surface area (ECSA) loss is observed as a parameter to study different potential ranges. It is observed that at upper potential limits the ECSA loss is influenced by electrochemical R dissolution while at lower potential limits reduction of ß oxide phase plays important role in ECSA loss. ©The Electrochemical Society. (17 refs)
Main heading: Surface potential
Controlled terms: Blood vessel prostheses - Cells - Charged particles - Direct energy conversion - Dissolution - Electric batteries - Electrochemistry - Experiments - Fuel cells - Fuels - Gas fuel purification - Industrial economics - Ion exchange membranes - Membranes - Nuclear fuel reprocessing - Photoacoustic effect - Platinum - Proton exchange membrane fuel cells (PEMFC) - Protons - Solid oxide fuel cells (SOFC) - Surfaces
Uncontrolled terms: (001) parameter - Acidic mediums - Electrochemical Society (ECS) - Electrochemical surface area (ESA) - Oxide phase - potential cycling - Potential limits - Proton exchange membrane fuel cell (PEM-FC) - Scan range - Surface area (SA)
Classification Code: 801.4.1 Electrochemistry - 802.1 Chemical Plants and Equipment - 802.3 Chemical Operations - 741.1 Light/Optics - 901.3 Engineering Research - 931.3 Atomic and Molecular Physics - 951 Materials Science - 911.2 Industrial Economics - 702.2 Fuel Cells - 462.4 Prosthetics - 522 Gas Fuels - 547.1 Precious Metals - 461.2 Biological Materials and Tissue Engineering - 621.1.2 Nuclear Fuels for Fission Reactors - 702 Electric Batteries and Fuel Cells - 702.1 Electric Batteries - 701.1 Electricity: Basic Concepts and Phenomena
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
81. Supportless Pt and PtPd nanotubes as electrocatalysts for oxygen-reduction reactions
Chen, Zhongwei (1); Waje, Mahesh (1); Li, Wenzhen (1); Yan, Yushan (1)
Source: Angewandte Chemie - International Edition, v 46, n 22, p 4060-4063, 2007; ISSN: 14337851; DOI: 10.1002/anie.200700894; Publisher: Wiley-VCH Verlag
Author affiliation: (1) Department of Chemical and Environmental Engineering, Bourns College of Engineering, University of California, Riverside, Riverside, CA 92521, United States
Abstract: (Graph Presented) Staying power: A new class of cathode catalysts based on supportless Pt (see picture, left) and PtPd nanotubes (NTs) is introduced. These materials have remarkable durability (right; CV = cyclic voltammetry, ECSA = electrochemical surface area) and high catalytic activity. They have the potential to circumvent most of the degradation pathways of current Pt/C and Pt-black catalysts. © 2007 Wiley-VCH Verlag GmbH & Co. KGaA. (24 refs)
Main heading: Nanotubes
Controlled terms: Catalyst activity - Degradation - Electrocatalysts - Oxygen - Platinum - Reduction
Uncontrolled terms: Degradation pathways - Oxygen reduction reaction - Sustainable chemistry
Classification Code: 547.1 Precious Metals - 761 Nanotechnology - 802.2 Chemical Reactions - 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 933.1 Crystalline Solids
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
82. Degradation of electrocatalysts performance in direct methanol fuel cells
Chen, Wei-Min ; Sun, Gong-Quan ; Zhao, Xin-Sheng ; Sun, Pi-Chang ; Yang, Shao-Hua ; Xin, Qin
Source: Gaodeng Xuexiao Huaxue Xuebao/Chemical Journal of Chinese Universities, v 28, n 5, p 928-931, May 2007; Language: Chinese; ISSN: 02510790; Publisher: Higher Education Press
Abstract: A discharge test was conducted to evaluate the degradation of the performance of electrocatalysts in direct methanol fuel cells (DMFCs). The results of transmission electron microscopy (TEM) and X-ray diffraction (XRD) analyses show that after the test, the mean particle size of the anode electrocatalyst did not change, while that of the cathode electrocatalyst increased remarkably. The main reason for the sintering of electrocatalysts is the existence of liquids. Amorphous Ru species in the anode catalyst inhibit the growing of Pt crystallites. The electrochemical surface area (ECSA) decreased after the discharge test, with a degree higher than the specific surface area(SSA), both for the anode and the cathode. Part of ruthenium was lost from the anode electrocatalyst during the discharge test. (16 refs)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
83. Dynamic activity lifecycle management in ubiquitous computing environments
Hokyum Kim (1); Insuk Park (1); Hyun, S.J. (1); Dongman Lee (1)
Source: 2007 7th IEEE International Conference on Computer and Information Technology, p 985-90, 2007; ISBN-13: 978-0-7695-2983-7; Conference: 2007 7th IEEE International Conference on Computer and Information Technology, 16-19 Oct. 2007, Aizu-Wakamatsu, Fukushima, Japan; Publisher: IEEE Computer Society, Los Alamitos, CA, USA
Author affiliation: (1) Sch. of Eng., Inf. & Commun. Univ., Daejeon, Korea, Republic of
Abstract: It is inherently allowed that a user engages in more than one activity at the same time. The interweave of multiple activities makes an activity have more than two states, i.e. the paused state in addition to active and inactive states and move from one state to another. In this paper, we propose an activity lifecycle management scheme that enables a system to adapt the services which help a user to do an activity to the state transitions of the activity. The proposed scheme detects the interruption between activities in terms of perceivable effects of their associated services. The state transitions of an activity driven by the interruption are handled by Event-Condition-State-Action (ECSA) policy, which is extended from ECA policy. It specifies how the services should be adapted to the interruption degree - how much the interrupting activity interferes the current activity as well as the state transition of an activity. (15 refs)
Inspec controlled terms: ubiquitous computing
Uncontrolled terms: dynamic activity lifecycle management - ubiquitous computing environment - event-condition-state-action policy
Classification Code: B6210L Computer communications - C6150N Distributed systems software - C5620 Computer networks and techniques
IPC Code: G06F9/46 - H04L12/28
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
84. Dynamic activity lifecycle management in ubiquitous computing environments
Kim, Hokyum (1); Park, Insuk (1); Hyun, Soon J. (1); Lee, Dongman (1)
Source: CIT 2007: 7th IEEE International Conference on Computer and Information Technology, p 985-990, 2007, CIT 2007: 7th IEEE International Conference on Computer and Information Technology; ISBN-10: 0769529836, ISBN-13: 9780769529837; DOI: 10.1109/CIT.2007.4385213; Article number: 4385213; Conference: CIT 2007: 7th IEEE International Conference on Computer and Information Technology, October 16, 2007 - October 19, 2007; Publisher: Inst. of Elec. and Elec. Eng. Computer Society
Author affiliation: (1) School of Engineering, Information and Communications University, 119, Munjiro, Yuseong-gu, Daejeon, 305-732, Korea, Republic of
Abstract: It is inherently allowed that a user engages in more than one activity at the same time. The interweave of multiple activities makes an activity have more than two states, i.e. the paused state in addition to active and inactive states and move from one state to another. In this paper, we propose an activity lifecycle management scheme that enables a system to adapt the services which help a user to do an activity to the state transitions of the activity. The proposed scheme detects the interruption between activities in terms of perceivable effects of their associated services. The state transitions of an activity driven by the interruption are handled by Event-Condition-State-Action (ECSA) policy, which is extended from ECA policy. It specifies how the services should be adapted to the interruption degree - how much the interrupting activity interferes the current activity as well as the state transition of an activity. © 2007 IEEE. (15 refs)
Main heading: Life cycle
Controlled terms: Human computer interaction - Ubiquitous computing - User interfaces
Uncontrolled terms: Dynamic activity lifecycle management - State transition
Classification Code: 461.4 Ergonomics and Human Factors Engineering - 722.2 Computer Peripheral Equipment - 723.5 Computer Applications - 913.1 Production Engineering
Treatment: Theoretical (THR)
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
85. Durability and activity study of single-walled, double-walled and multi-walled carbon nanotubes supported Pt catalyst for PEMFCs
Chen, Zhomgwei (1); Deng, Weiqiao (1, 2); Wang, Xin (1, 3); Yan, Yushan (1)
Source: ECS Transactions, v 11, n 1 PART 2, p 1289-1299, 2007, ECS Transactions - 7th Symposium Devoted to Proton Exchange Membrane Fuel Cells; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566775670; DOI: 10.1149/1.2781042; Conference: 7th Symposium Devoted to Proton Exchange Membrane Fuel Cells - 212th ECS Meeting, October 7, 2007 - October 12, 2007; Sponsor: Electrochemical Society, Energy Technology Division; Electrochemical Society, Phys. Anal. Electrochem. Div.; Electrochemical Society, Battery Division; Electrochemical Society, Ind. Electrolysis Electrochem. Eng. Div.; Publisher: Electrochemical Society Inc.
Author affiliation: (1) Department of Chemical and Environmental Engineering, College of Engineering, University of California, Riverside, CA 92521 (2) Division of Chemistry and Biological Chemistry, Nanyang Technological University, Singapore 637722, Singapore (3) Division of Chemical and Biomolecular Engineering, Nanyang Technological University, Singapore 637722, Singapore
Abstract: Pt nanoparticles (2-3 nm) supported on carbon black (C), single-walled carbon nanotubes (SWNT), double-walled carbon nanotubes (DWNT) and multi-walled carbon nanotubes (MWNT) are prepared by an ethylene glycol reduction method. The catalytic activity towards the oxygen reduction reaction (ORR) and the durability of the catalysts are evaluated under condition simulating the environment of proton exchange membrane fuel cell (PEMFCs). The Pt electrochemical surface area (ECSA) of Pt/DWNT and Pt/MWNT degrade 32% after accelerated durability test (ADT), compared with 38% for Pt/SWNT and 48% for Pt/C. The degradation rate of Pt/C is about 1.5 times higher than that of Pt/DWNT. The typical ORR polarization curves of Pt/C, Pt/SWNT, Pt/DWNT and Pt/MWNT obtained before and after ADT are also examined. Before ADT, Pt/DWNT shows the highest catalytic activity towards ORR, followed by Pt/MWNT, Pt/C, and Pt/SWNT in that order. After ADT, the sequence of ORR activity of Pt/C and Pt/SWNT has changed and the overall order is: Pt/DWNT > Pt/MWNT > Pt/SWNT > Pt/C. The Pt/DWNT catalyst shows the highest catalytic activity and the best durability for ORR among the C and CNT supported Pt catalysts. © The Electrochemical Society. (34 refs)
Main heading: Carbon nanotubes
Controlled terms: Blood vessel prostheses - Carbon - Carbon black - Catalysis - Catalyst activity - Catalyst supports - Catalysts - Cell membranes - Cells - Charged particles - Chemical sensors - Cubic boron nitride - Degradation - Direct energy conversion - Durability - Electric batteries - Electrochemical sensors - Electrochemistry - Electrolytic reduction - Ethylene - Ethylene glycol - Fuel cells - Fuels - Fullerenes - Gas fuel purification - Glycols - Ion exchange membranes - Membranes - Multiwalled carbon nanotubes (MWCN) - Nanocomposites - Nanopores - Nanostructured materials - Nanostructures - Nanotechnology - Nanotubes - Oxygen - Platinum - Platinum alloys - Proton exchange membrane fuel cells (PEMFC) - Protons - Rate constants - Reduction - Single-walled carbon nanotubes (SWCN) - Solid oxide fuel cells (SOFC) - Sulfate minerals
Uncontrolled terms: (I ,J) conditions - Catalytic activities - degradation rates - Double walled carbon nanotubes (DWCNT) - Double-walled - Durability testing - Electrochemical Society (ECS) - Electrochemical surface area (ESA) - Multiwalled carbon nanotubes (MW-CNT) - Oxygen reduction reaction (ORR) - Polarization curves (PC) - Proton exchange membrane fuel cell (PEM-FC) - Pt nano-particles - reduction methods - Single-walled - Single-walled carbon nanotubes (SWCNTs) - Supported Pt
Classification Code: 951 Materials Science - 761 Nanotechnology - 801 Chemistry - 801.4.1 Electrochemistry - 802.1 Chemical Plants and Equipment - 802.2 Chemical Reactions - 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 804.1 Organic Compounds - 812.1 Ceramics - 931.3 Atomic and Molecular Physics - 702.2 Fuel Cells - 421 Strength of Building Materials; Mechanical Properties - 461.2 Biological Materials and Tissue Engineering - 462.4 Prosthetics - 482.2 Minerals - 702.1 Electric Batteries - 522 Gas Fuels - 547.1 Precious Metals - 701.1 Electricity: Basic Concepts and Phenomena - 702 Electric Batteries and Fuel Cells - 533.1 Ore Treatment
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
86. Architecture for developing adaptive and adaptable collaborative applications
Anzures-Garcia, M. (1); Hornos, M.J.; Paderewski-Rodriguez, P.
Source: Software Architecture. First European Conference, ECSA 2007, p 271-4, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Fac. de Cienc. de la Comput., Benemerita Univ. Autonoma de Puebla, Puebla, Mexico
Abstract: Many organizations have to carry out their work by groups of people who are geographically distributed. The groups can experiment changes, which demand the development of applications supporting groupwork and allowing the adaptation to different groupwork organization styles and to both individual and collective needs. This paper proposes a SOA-based architecture that provides the suitable structure for the development of collaborative applications that are both adaptive and adaptable. We also present an adaptation process that allows the applications based on the architecture to be adapted to the changes in the groupwork organization and to the necessity of new functionalities. (4 refs)
Inspec controlled terms: groupware
Uncontrolled terms: adaptable collaborative applications - supporting groupwork development - SOA-based architecture - adaptation process - collaborative applications development
Classification Code: C6130G Groupware
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
87. Managing separation of concerns in grid applications through architectural model transformations
Manset, D. (1); Verjus, H. (1); McClatchey, R.
Source: Software Architecture. First European Conference, ECSA 2007, p 308-12, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Univ. of Savoie, Annecy-Le-Vieux, France
Abstract: The grid model-driven engineering (gMDE) approach and environment are currently in use to evaluate potential advantages in the development process of various grid applications. There are clearly identified challenges in the development of systems such as MammoGrid (S.R. Amendolia et al., 2005), which can be addressed by using gMDE. From these case studies, preliminary conclusions are encouraging and highlight the approach relevance. (8 refs)
Inspec controlled terms: grid computing - software architecture
Uncontrolled terms: architectural model transformations - grid model-driven engineering - MammoGrid
Classification Code: C6150N Distributed systems software - C6110B Software engineering techniques
IPC Code: G06F9/44 - G06F9/46
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
88. Beyond ATAM: architecture analysis in the development of large scale software systems
Zalewski, A. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 92-105, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Inst. of Autom. Control & Comput. Eng., Warsaw Univ. of Technol., Warsaw, Poland
Abstract: Large scale software developments require substantial investment and are exposed to high level of risk. Architectural decisions taken at early stages of the development can substantially influence the entire level of technical risk. In this paper architectural decisions are divided into two basic groups: early - top level system organization decision establishing system organization patterns (the notion introduced in this paper) and detailed ones. However as it was shown on notable examples of large scale developments carried out in recent ten years in Poland, wrong decisions concerning system organization pattern can trigger severe risks that can lead to the development crisis. These risks are frequently connected with the complexity explosion syndrome - sudden, undetected growth of design complexity that exceeds the capabiblity of the development team and time budget. To manage these risks properly appropriate architecture analysis method has been introduced. On the contrary to the traditional scenario-based architecture analysis methods, like ATAM, it was based on GQM approach. A complete assessement framework have been defined comprising three goals: complexity control, organizational adequacy and satisfactory perforormance and reliability; a set of questions related to these goals, as well as metrics for the qualities expressed by these questions. The conclusion contains ex post analysis of exemplary large scale systems showing that the proposed framework provides adequate assessement of design risk. It has also been indicated that the critical risks identified during the evalution of the system organization pattern should be carefully managed. (23 refs)
Inspec controlled terms: software architecture - software reliability
Uncontrolled terms: large scale software developments - beyond ATAM - top level system organization decision - organization patterns - Poland - GQM approach - complexity control - organizational adequacy - architecture trade-off analysis methods
Classification Code: C6110B Software engineering techniques
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
89. Experiences using a component-oriented architectural framework for robots and its improvement with a MDE approach
Ortiz, F.J. (1); Pastor, J.A. (1); Alonso, D. (1); Alvarez, B. (1); Sanchez, P. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 335-8, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Div. of Electron. Eng. & Syst. (DSIE), Univ. Politec. de Cartagena, Cartagena, Spain
Abstract: This paper describes the experience of the DSIE research group in the developing of the EFTCoR family of robots using an abstract architectural framework ACRoSeT, following the component-based paradigm. Using abstract components allow us to define very different architectures in a platform independent way. The translation of the abstract components to platform specific code is a hard and difficult task that can be partially automated with the help of the model transformation tools provided by the MDE approach. (9 refs)
Inspec controlled terms: control engineering computing - software architecture - telerobotics
Uncontrolled terms: component-oriented architectural framework - robots - component-based paradigm - abstract components - model transformation tools
Classification Code: C3390T Telerobotics - C7420 Control engineering computing - C6110B Software engineering techniques
IPC Code: G05B15/00 - G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
90. AspectLEDA: extending an ADL with aspectual concepts
Navasa, A. (1); Perez, M.A. (1); Murillo, J.M. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 330-4, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., Univ. of Extremadura, Caceres, Spain
Abstract: When increasing the complexity of software systems new techniques allowing for their adequate manipulation are required. In the last ten years, AOSD has been proposed to manage the systems complexity by considering concepts of AO programming extended along the software life cycle. The suitability of the existence of an AO architectural design appears when AO concepts are extended to the whole life cycle. In order to adequately specify the AO design, Aspect-Oriented ADLs are needed. In this paper AspectLEDA, an ADL to support architectural descriptions treating aspects, is presented. (4 refs)
Inspec controlled terms: high level languages - object-oriented methods - software architecture
Uncontrolled terms: AspectLEDA - aspectual concept - software system complexity - aspect oriented software development - systems complexity - software life cycle - aspect orientation architectural design
Classification Code: C6140D High level languages - C6110B Software engineering techniques - C6110F Formal methods
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
91. Pattern-based evolution of software architectures
Cote, I. (1); Heisel, M. (1); Wentzlaff, I. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 29-43, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. & Cognitive Sci., Univ. Duisburg-Essen, Essen, Germany
Abstract: We propose a pattern-based software development method comprising analysis (using problem frames) and design (using architectural and design patterns), of which especially evolving systems benefit. Evolution operators guide a pattern-based transformation procedure, including re-engineering tasks for adjusting a given software architecture to meet new system demands. Through application of these operators, relations between analysis and design documents are explored systematically for accomplishing desired software modifications. This allows for reusing development documents to a large extent, even when the application environment and the requirements change. (15 refs)
Inspec controlled terms: software architecture
Uncontrolled terms: pattern-based evolution - software architectures - pattern-based software development method - pattern-based transformation procedure - reengineering tasks - software modifications
Classification Code: C6110B Software engineering techniques
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
92. Using connectors to model crosscutting influences in software architectures
Fuentes, L. (1); Gamez, N. (1); Pinto, M. (1); Valenzuela, J.A. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 292-5, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dipt. Lenguajes y Cienc. de la Comput., Univ. of Malaga, Malaga, Spain
Abstract: AO-ADL is an aspect-oriented architecture description language where ‘crosscutting’ becomes a new kind of relationship between components. The semantic of connectors is extended in order to represent such crosscutting relationships. In this paper we focus on an important contribution of AO-ADL, its mechanism for defining aspect-oriented connector templates, which capture generic and reusable crosscutting influences, providing an aspect-oriented architectural pattern. (8 refs)
Inspec controlled terms: object-oriented languages - object-oriented programming - software architecture
Uncontrolled terms: software architectures - AO-ADL - aspect-oriented architecture description language - aspect-oriented connector templates - reusable crosscutting influences - aspect-oriented architectural pattern
Classification Code: C6110B Software engineering techniques - C6110J Object-oriented programming
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
93. An ontology-based approach for modelling architectural styles
Pahl, C. (1); Giesecke, S.; Hasselbring, W.
Source: Software Architecture. First European Conference, ECSA 2007, p 60-75, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Sch. of Comput., Dublin City Univ., Dublin, Ireland
Abstract: The conceptual modelling of software architectures is of central importance for the quality of a software system. A rich modelling language is required to integrate the different aspects of architecture modelling, such as architectural styles, structural and behavioural modelling, into a coherent framework. We propose an ontological approach for architectural style modelling based on description logic as an abstract, meta-level modelling instrument. Architectural styles are often neglected in software architectures. We introduce a framework for style definition and style combination. The link between quality requirements and conceptual modelling of architectural styles is investigated. The application of the ontological framework in the form of an integration into existing architectural description notations such as ACME and UML-based approaches, and also service ontologies is illustrated. (30 refs)
Inspec controlled terms: ontologies (artificial intelligence) - software architecture - software quality - Unified Modeling Language
Uncontrolled terms: ontology-based approach - software architecture - software quality - architectural style model - description logic - ACME - UML-based approach
Classification Code: C6110B Software engineering techniques - C6170K Knowledge engineering techniques - C6110F Formal methods
IPC Code: G06F9/44 - G06F15/18 - G06N5/04
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
94. An active architecture approach to dynamic systems co-evolution
Morrison, R. (1); Balasubramaniam, D. (1); Oquendo, F.; Warboys, B.; Greenwood, R.M.
Source: Software Architecture. First European Conference, ECSA 2007, p 2-10, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Univ. of St Andrews, St. Andrews, United Kingdom
Abstract: The term co-evolution describes the symbiotic relationship between dynamically changing business environments and the software that supports them. Business changes create pressures on the software to evolve, and at the same time technology changes create pressures on the business to evolve. More generally, we are concerned with systems where it is neither economically nor technologically feasible to suspend the operation of the system while it is being evolved. Typically these are long-lived systems in which dynamic co-evolution, whereby a system evolves as part of its own execution in reaction to both predicted and emergent events, is the only feasible option for change. Examples of such systems include continuously running business process models, sensor nets, grid applications, self-adapting/tuning systems, routing systems, control systems, autonomic systems, and pervasive computing applications. Active architectures address both the structural and behavioural requirements of dynamic co-evolving software by modelling software architecture as part of the on-going computation, thereby allowing evolution during execution and formal checking that desired system properties are preserved through evolution. This invited paper presents results on active architectures from the Compliant System Architecture and ArchWare projects. We have designed and constructed the ArchWare-ADL, a formal, well-founded architecture description language, based on the higher-order typed p-calculus, which consists of a set of layers to address the requirements of active architectures. The ArchWare-ADL design principles, concepts and formal notations are presented together with its sophisticated reflective technologies for supporting active architectures and thereby dynamic co-evolution. (35 refs)
Inspec controlled terms: business data processing - software architecture - specification languages
Uncontrolled terms: active architecture approach - dynamic system coevolution - software architecture - ArchWare-ADL
Classification Code: C7100 Business and administrative computing - C6140D High level languages - C6110B Software engineering techniques - C6110F Formal methods
IPC Code: G06F9/44 - G06Q10/00
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
95. Processes for creating and exploiting architectural design decisions with tool support
Nava, F. (1); Capilla, R. (1); Dueñas, J.C. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 321-4, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., Univ. Rey Juan Carlos, Madrid, Spain
Abstract: Software architectures suffer of a serious lack of documented design decisions, but also an explicit definition of the processes needed to create and exploit such architectural knowledge. To address these issues, we focus on the specification of those activities that we believe should be implemented to support the creation and use of design rationale with tool support. (14 refs)
Inspec controlled terms: formal specification - software architecture - software development management - software tools
Uncontrolled terms: architectural design decisions - tool support - architectural knowledge - formal specification
Classification Code: C6110B Software engineering techniques - C6110F Formal methods - C6115 Programming support - C0310F Software management
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
96. A distributed staged architecture for multimodal applications
Pereira, A.C. (1); Hartmann, F. (1); Kadner, K. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 195-206, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci. Tech., Univ. Dresden, Dresden, Germany
Abstract: Most of the research in the area of multimodality discusses either the usability aspect of multimodality or the multimodality support given by or missing in certain markup languages. The overall architectural side of large multimodal systems is unfortunately not adequately represented in today’s literature. This report shows some results obtained during the implementation of such a system, e.g., the use of the multimodal interaction framework and how a staged architecture can be combined with this framework to achieve domain independence. (29 refs)
Inspec controlled terms: formal specification - Internet - software architecture
Uncontrolled terms: distributed staged architecture - multimodal applications - markup languages - multimodal interaction framework
Classification Code: C6150N Distributed systems software - C6110B Software engineering techniques - C6110F Formal methods
IPC Code: G06F9/44 - G06F9/46
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
97. Formal design of structural and dynamic features of publish/subscribe architectural styles
Loulou, I. (1); Kacem, A.H. (1); Jmaiel, M. (1); Drira, K.
Source: Software Architecture. First European Conference, ECSA 2007, p 44-59, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Res. Unit ReDCAD, Univ. of Sfax, Sfax, Tunisia
Abstract: This paper proposes a compositional formal approach to design correct publish/subscribe architecture styles. We provide a set of patterns and the corresponding composition rules to build architecture styles. The defined patterns and rules respect the principle of information propagation requiring that produced information have to reach all the subscribed consumers. We describe patterns as graphs and we use the Z notation to specify formally the semantic of each pattern and each rule. We prove consistency and correctness using the Z-Eves theorem prover. We show how to consider the interconnection topology between dispatchers as well as the subscription mechanism by simple refinements. We also show how to construct the Z specification of the designed architecture style based on applied rules. Moreover, we describe the dynamics of architecture via guarded graph-rewriting rules whose body describe the structural constraints and whose guards mainly describe the functional constraints of the system. We express these rules entirely with the Z notation also, obtaining a unified approach which handles both the static and the dynamic aspects. (17 refs)
Inspec controlled terms: formal specification - software architecture - theorem proving
Uncontrolled terms: formal design - structural-dynamic features - publish-subscribe architectural styles - information propagation - Z-Eves theorem prover - interconnection topology - subscription mechanism - graph-rewriting rules - functional constraints
Classification Code: C6110B Software engineering techniques - C6110F Formal methods - C6170K Knowledge engineering techniques
IPC Code: G06F9/44 - G06F15/18 - G06N5/04
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
98. On the interplay of crosscutting and MAS-specific styles
Molesini, A. (1); Garcia, A.; Chavez, C.; Batista, T.
Source: Software Architecture. First European Conference, ECSA 2007, p 317-20, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Alma Mater Studiorum-Univ. di Bologna, Bologna, Italy
Abstract: This paper presents a systematic case study that analyzes the influence exerted by different styles over the nature of architectural crosscutting concerns in an evolving multi-agent system. The analysis encompassed the systematic comparison of alternative architecture decompositions for the same application that changed over time to address different stakeholders’ concerns. (9 refs)
Inspec controlled terms: multi-agent systems - software architecture
Uncontrolled terms: crosscutting style - MAS-specific style - architectural crosscutting concerns - evolving multiagent system - architecture decomposition
Classification Code: C6170 Expert systems and other AI software and techniques - C6110B Software engineering techniques
IPC Code: G06F9/44 - G06F15/18
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
99. An architectural model for small-scale component-oriented frameworks
Lopes, S. (1); Tavares, A. (1); Monteiro, J. (1); Silva, C. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 300-3, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Ind. Electron., Univ. of Minho, Guimaraes, Portugal
Abstract: Frameworks are an important form of reuse. However, they are often complex and hard to understand, what limits their success as a reuse option. To answer this problem, it has been widely recognized the need to effectively communicate frameworks and provide appropriate tool support, but difficulties still endure. We argue that the properties of frameworks are another aspect that is decisive for reuse problems and has not been sufficiently explored. We discuss these issues and we propose a framework architectural model that can be used to design frameworks that are easier to reuse. (8 refs)
Inspec controlled terms: object-oriented methods - software architecture
Uncontrolled terms: architectural model - small scale component-oriented frameworks - object-oriented design - object-oriented programming
Classification Code: C6110B Software engineering techniques - C6110F Formal methods - C6110J Object-oriented programming
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
100. A goal-oriented approach for the generation and evaluation of alternative architectures
Grau, G. (1); Franch, X. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 139-55, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Univ. Politec. de Catalunya (UPC), Barcelona, Spain
Abstract: There is a recognized gap between requirements and architectures. There is also evidence that architecture evaluation, when done at the early phases of the development lifecycle, is an effective way to ensure the quality attributes of the final system. As quality attributes may be satisfied at a different extent by different alternative architectural solutions, an exploration and evaluation of alternatives is often needed. In order to address this issue at the requirements level, we propose to model architectures using the i* framework, a goal-oriented modelling language that allows to represent the functional and non-functional requirements of an architecture using actors and dependencies instead of components and connectors. Once the architectures are modelled, we propose guidelines for the generation of alternative architectures based upon existing architectural patterns, and for the definition of structural metrics for the evaluation of the resulting alternative models. The applicability of the approach is shown with the home service robot case study. (28 refs)
Inspec controlled terms: programming languages - software architecture
Uncontrolled terms: architecture evaluation - quality attributes - goal-oriented modelling language - structural metrics - home service robot
Classification Code: C6110B Software engineering techniques - C6140 Programming languages
IPC Code: G06F9/44
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
101. What’s in a service? [business process management]
Papazoglou, M.P. (1)
Source: Software Architecture. First European Conference, ECSA 2007, p 11-28, 2007; ISBN-10: 3-540-75131-9; Conference: Software Architecture. First European Conference, ECSA 2007, 24-26 Sept. 2007, Madrid, Spain; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Inf. Syst. & Manage., Tilburg Univ., Tilburg, Netherlands
Abstract: Automated services help enterprises create new value from reuse of software and resources and achieve new levels of agility through greater flexibility and lower cost structures. As services come in many flavors and guises they have differing characteristics. In this paper we describe the most necessary aspects and features of automated services. We also focus on the interplay of SOAs and Business Process Management technologies and argue that the key enablers for Service Oriented Architectures (SOAs) should focus on four inter-related elements: engineering and planning the SOA, SOA implementation, SOA management and monitoring and SOA governance. (16 refs)
Inspec controlled terms: business data processing - software architecture - software reusability - Web services
Uncontrolled terms: automated services - software reuse - SOA - business process management - service oriented architecture
Classification Code: C7100 Business and administrative computing - C6150N Distributed systems software - C6110B Software engineering techniques - D2010 Business and professional IT applications - D5000 Office automation - computing
IPC Code: G06F9/44 - G06F9/46 - G06Q10/00
Treatment: Practical (PRA)
Database: Inspec
Copyright 2008, The Institution of Engineering and Technology
Data Provider: Engineering Village
	


