1. Current and emerging topics in software architecture (ECSA 2010 Workshops Summary)
Weyns, Danny (1); Capilla, Rafael (2)
Source: ACM International Conference Proceeding Series, p 59-62, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842769; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Katholieke Universiteit, Leuven, Belgium (2) Universidad Rey Juan Carlos, Madrid, Spain
Abstract: Since 2004 in St. Andrews (Scotland, U.K.), ECSA the European Conference on Software Architecture (formerly EWSA, the European Workshop on Software Architecture) has been considered as an important meeting point for researchers and practitioners on the topic of software architecture. ECSA has matured from a workshop format to a full software engineering conference in the subfield of software architecture. This year, ECSA has become more ambitious and expanded its scope and schedule up to four full days. The program includes a series of tutorials, a doctoral mentoring program, and four full-day workshops. New and existing software challenges have led to a variety of trends in software architecture research, which makes the conference and workshops more attractive and promotes the discussion on current and emerging topics. Based on the scientific and technical interest of the topics, the innovativeness of workshop topics, and the capacity of the conference workshop program, the workshop co-chairs selected four workshops from the nine submitted proposals. We summarize the aims and goals of each workshop and the contributions accepted for the four workshops: &bull 2nd International Workshop on Software Ecosystems (EcoSys). Piers Campbell, Faheem Ahmed, Jan Bosch, Sliger Jansen. &bull 1st International Workshop on Measurability of Security in Software Architectures (MeSSa). Reijo Savola, Teemu Kranste´n, Antti Evesti. &bull 8th Nordic Workshop on Model Driven Software Engineering (NW-MODE). Andrzej Wasowski, Dragos Truscan, Ludwik Kuzniarz. &bull 1st International Workshop on Variability in Software Product Line Architectures (VARI-ARCH). Alexander Helleboogh, Paris Avgeriou, Nelis Boucke, Patryck Heymans. The ECSA 2010 Workshop co-chairs would like to thanks all workshop organizers for their effort and enthusiasm to attract submission in different software architecture research topics and make the ECSA 2010 workshops a success. © 2010 ACM. (38 refs)
Main heading: Software architecture
Controlled terms: Ecology - Research - Technical presentations
Uncontrolled terms: Architecture research - Campbell - Emerging topics - Innovativeness - International workshops - Mentoring programs - Model driven software engineering - On currents - Scotland - Software ecosystems - Software product line architecture
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming - 901.2 Education - 901.3 Engineering Research
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
2. ECSA 2010 Industry Track
Kolb, Ronny (1); Naedele, Martin (2)
Source: ACM International Conference Proceeding Series, p 35, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842763; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Honeywell International Sarl, Z.A. La Piece 16, CH-1180 Rolle, Switzerland (2) ABB Schweiz AG, Corporate Research, Segelhofstr. 1K, 5405, Baden 5 Dättwil, Switzerland
Abstract: The Industry Track provides a forum for practitioners and industrial and academic researchers describing methods, techniques, and practices as well as other results of direct relevance and applicability to practicing software architects. Contributions take the form of extended abstracts and full papers and focus on practical lessons that drawn from experience and encourage interactive discussion on the presented topic. © 2010 ACM.
Main heading: Software architecture
Controlled terms: Industry - Research - Technical presentations
Uncontrolled terms: Extended abstracts - Industry practices - research challenges - Software architects
Classification Code: 723.1 Computer Programming - 901.2 Education - 901.3 Engineering Research - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	

7. An efficient cluster-based self-organisation algorithm for wireless sensor networks
Lehsaini, M. (1); Guyennet, H. (1); Feham, M. (2)
Source: International Journal of Sensor Networks, v 7, n 1-2, p 85-94, 2010; ISSN: 1748-1279; DOI: 10.1504/IJSNET.2010.031852; Publisher: Inderscience Enterprises Ltd., Switzerland
Author affiliation: (1) LIFC Lab. of Comput. Eng., Franche-Comte Univ., Besancon, France (2) Fac. of Eng. Sci., Tlemcen Univ., Tlemcen, Algeria
Abstract: The paper proposes an Efficient Cluster-based Self-organisation Algorithm (ECSA) for partitioning Wireless Sensor Networks (WSNs) into clusters, thus giving at the network a hierarchical organisation. Each sensor uses its weight based on its k-density and its residual energy to elect a cluster-head in its 2-hop neighbourhood. ECSA operates without a centralised controller, and does not require that the location of sensors be known. Firstly, we estimate the number of clusters formed with ECSA according to transmission range, then we evaluate the amount of packets sent to the sink per energy dissipation by using the same model presented by Heinzelman et al. (2002), and the number of nodes alive per number of packets received at the sink. Simulation results illustrate that ECSA can evenly distribute energy consumption of sensors and consequently maximise network lifetime when compared to LEACH and LEACH-C. (22 refs)
Inspec controlled terms: sensor placement - statistical analysis - wireless sensor networks
Uncontrolled terms: wireless sensor networks - WSN - ECSA - efficient cluster-based self-organisation algorithm - 2-hop neighbourhood - sensor location - energy dissipation - energy consumption
Classification Code: B6250K Wireless sensor networks - B0240Z Other topics in statistics
IPC Code: H04B7/00 - H04W - H04W84/18
Treatment: Practical (PRA) - Theoretical or Mathematical (THR)
Database: Inspec
Copyright 2011, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
8. Activity, stability and degradation of multi walled carbon nanotube (MWCNT) supported Pt fuel cell electrocatalysts
Hasche, F. (1); Oezaslan, M. (1); Strasser, P. (1)
Source: Physical Chemistry Chemical Physics, v 12, n 46, p 15251-8, 2010; ISSN: 1463-9076; DOI: 10.1039/c0cp00609b; Publisher: Royal Society of Chemistry, UK
Author affiliation: (1) Dept. of Chem., Tech. Univ. Berlin, Berlin, Germany
Abstract: Understanding and improving durability of fuel cell catalysts are currently one of the major goals in fuel cell research. Here, we present a comparative stability study of multi walled carbon nanotube (MWCNT) and conventional carbon supported platinum nanoparticle electrocatalysts for the oxygen reduction reaction (ORR). The aim of this study was to obtain insight into the mechanisms controlling degradation, in particular the role of nanoparticle coarsening and support corrosion effects. A MWCNT-supported 20 wt.% Pt catalyst and a Vulcan XC 72R-supported 20 wt.% Pt catalyst with a BET surface area of around 150 m2 g-1 and with a comparable Pt mean particle size were subjected to electrode potential cycling in a “lifetime” stability regime (voltage cycles between 0.5 to 1.0 V vs. RHE) and a “start-up” stability regime (cycles between 0.5 to 1.5 V vs. RHE). Before, during and after potential cycling, the ORR activity and structural/ morphological (XRD, TEM) characteristics were recorded and analyzed. Our results did not indicate any activity benefit of MWCNT support for the kinetic rate of ORR. In the “lifetime” regime, the MWCNT supported Pt catalyst showed clearly smaller electrochemically active surface area (ECSA) and mass activity losses compared to the Vulcan XC 72R supported Pt catalyst. In the “start-up” regime, Pt on MWCNT exhibited a reduced relative ECSA loss compared to Pt on Vulcan XC 72R. We directly imaged the trace of a migrating platinum particle inside a MWCNT suggesting enhanced adhesion between Pt atoms and the graphene tube walls. Our data suggests that the ECSA loss differences between the two catalysts are not controlled by particle growth. We rather conclude that over the time scale of our stability tests (10000 potential cycles and beyond), the macroscopic ECSA loss is primarily controlled by carbon corrosion associated with Pt particle detachment and loss of electrical contact. (34 refs)
Inspec controlled terms: carbon nanotubes - catalysis - catalysts - corrosion - electrochemical electrodes - fuel cells - nanoparticles - particle size - platinum - transmission electron microscopy - X-ray diffraction
Uncontrolled terms: multiwalled carbon nanotube supported Pt fuel cell electrocatalysts - multiwalled carbon nanotube supported platinum nanoparticle electrocatalysts - oxygen reduction reaction - nanoparticle coarsening - support corrosion effects - Vulcan XC 72R-supported Pt catalyst - BET surface area - Pt mean particle size - electrode potential cycling - lifetime stability regime - start-up stability regime - structural characteristics - morphological characteristics - XRD - TEM - kinetic rate - electrochemically active surface area loss - mass activity loss - reduced relative ECSA loss - migrating platinum particle - enhanced adhesion - Pt atoms - graphene tube walls - ECSA loss differences - particle growth - stability tests - macroscopic ECSA loss - carbon corrosion - Pt particle detachment - electrical contact loss - voltage 0.5 V to 1.5 V - C-Pt
Classification Code: A8630G Fuel cells - A8265J Heterogeneous catalysis at surfaces and other surface reactions - A8245 Electrochemistry and electrophoresis - A8160 Corrosion, oxidation, etching, and other surface treatments - A6148 Structure of graphene and graphene-related materials - A6146 Structure of solid clusters, nanoparticles, nanotubes and nanostructured materials - B8410G Fuel cells
IPC Code: B01J - B82B1/00 - C25B11/00 - C25D17/10 - H01M4/00 - H01M8/00
Treatment: Practical (PRA) - Experimental (EXP)
Database: Inspec
Copyright 2011, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
9. Architecture in the age of compositionality
Bosch, Jan (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 1-4, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_1; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Intuit, Mountain View, CA, United States
Abstract: The nature of software engineering is changing. Whereas building systems was the predominant activity, more recently the focus has shifted toward composing systems from open-source, commercial and proprietary components and to only build the functionality that truly is competitively differentiating. In addition, the way software is developed has changed as well, especially focusing on short development cycles and frequent, or even continuous, deployment. Because of these requirements, often teams are organized around features, rather than components, and can change all components in the system, including their interfaces. A third trend is the increasing adoption of software ecosystems, where significant development of functionality relevant for customers occurs outside the platform organization. Obviously, however, the quality attributes that are necessary for system success remain important as well as the ability to easily incorporate new requirements in the system in a cost effective fashion. Because of the above, the role of software architecture and in particular the software architects is more important in this new world, but there is significant evolution in the implementation of the role. The paper starts by characterizing the new approach to software engineering and the role of compositionality. It then explores the implications for software architecture and the role of the software architect, Finally, it defines a number of research challenges for the ECSA community to explore. © 2010 Springer-Verlag Berlin Heidelberg.
Main heading: Software architecture
Controlled terms: Ecology
Uncontrolled terms: Building systems - Compositionality - Cost effective - Development cycle - New approaches - Open-source - Quality attributes - Research challenges - Software architects - Software ecosystems - System success
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
10. Doctoral Symposium of the European Conference on Software Architecture 2010
Ovaska, Eila (1); Raibulet, Claudia (2)
Source: ACM International Conference Proceeding Series, p 1-3, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842754; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) VTT Technical Research Centre of Finland, Kaitoväylä 1, 90570, Oulu, Finland (2) University of Milano-Bicocca, Edificio U14, Viale Sarca, 336, 20126, Milan, Italy
Abstract: The goal of the Doctoral Symposium is to provide PhD students working in the area of software architecture the opportunity to present their research and to receive immediate and expert feedback for the successful completion of their dissertation research. Therefore, the ECSA 2010 Doctoral Symposium enables participants to sustain and discuss their ideas, methods, and preliminary results with senior researchers of the software architecture community in a constructive, friendly, and professional context. The PhD students receive guidance and feedback on various aspects of their research both from experienced researches and from their PhD colleagues. It is an opportunity for students to meet and know each other in order to establish new contacts for possible common research topics and projects. © 2010 ACM.
Main heading: Software architecture
Controlled terms: Research - Students - Technical presentations
Uncontrolled terms: Architecture community - Doctoral symposium - Expert feedback - Research topics
Classification Code: 723.1 Computer Programming - 901.2 Education - 901.3 Engineering Research
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
11. Physical theory of platinum nanoparticle dissolution in polymer electrolyte fuel cells
Rinaldo, Steven G. (1); Stumper, Jürgen (2); Eikerling, Michael (1)
Source: Journal of Physical Chemistry C, v 114, n 13, p 5773-5785, April 8, 2010; ISSN: 19327447, E-ISSN: 19327455; DOI: 10.1021/jp9101509; Publisher: American Chemical Society
Author affiliation: (1) Department of Chemistry, Simon Fraser University, 8888 University Drive, Burnaby, BC, Canada (2) Automotive Fuel Cell Cooperation Corporation, 9000 Glenlyon Parkway, Burnaby, BC, Canada
Abstract: The loss of electrochemically active surface area (ECSA) causes severe performance degradation over relevant lifetimes of polymer electrolyte fuel cells. Using a simple physical model, we analyze the interrelations between kinetics of platinum nanoparticle dissolution, evolution of the particle size distribution, and ECSA loss with time. The model incorporates the initial particle radius distribution, and it accounts for kinetic processes involving Pt dissolution, Pt?O formation, and Pt?O dissolution. Employing reasonable simplifying assumptions to the governing equations, a full analytical solution was found under potentiostatic conditions. The simplified model predicts the evolution of the particle radius distribution as well as ECSA loss with time, in close agreement with experimental ex situ and in situ studies. The study indicates that the rates of chemical Pt?O dissolution, driven by the particle size dependence of the cohesive energy, may dominate over electrochemical dissolution. Fitting of the model to experimental data provides an effective surface tension and an effective rate constant of Pt?O dissolution. Implications of the model for the development of strategies to reduce ECSA loss are discussed. © 2010 American Chemical Society. (60 refs)
Main heading: Dissolution
Controlled terms: Electrolytic reduction - Fuel cells - Nanoparticles - Particle size - Particle size analysis - Platinum - Polyelectrolytes - Rate constants - Strategic planning - Surface tension
Uncontrolled terms: Analytical solutions - Cohesive energies - Electrochemical dissolution - Electrochemically active surface areas - Ex situ - Experimental data - Governing equations - In-Situ Study - Kinetic process - Particle radii - Particle size dependence - Performance degradation - Physical theory - Platinum nanoparticles - Polymer electrolyte fuel cells - Potentiostatic conditions - Simple Physical Models - Simplified models - Simplifying assumptions
Classification Code: 951 Materials Science - 802.3 Chemical Operations - 815.1.1 Organic Polymers - 817.1 Polymer Products - 912.2 Management - 931.2 Physical Properties of Gases, Liquids and Solids - 933 Solid State Physics - 943.2 Mechanical Variables Measurements - 943.3 Special Purpose Instruments - 802.2 Chemical Reactions - 533.1 Ore Treatment - 547.1 Precious Metals - 702.2 Fuel Cells - 801.4.1 Electrochemistry - 708 Electric and Magnetic Materials - 761 Nanotechnology - 801.4 Physical Chemistry - 712.2 Thermionic Materials
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
12. Effect of black catalyst ionomer content on the performance of passive DMFC
Abdelkareem, Mohammad Ali (1); Tsujiguchi, Takuya (2); Nakagawa, Nobuyoshi (2)
Source: Journal of Power Sources, v 195, n 19, p 6287-6293, October 1, 2010; ISSN: 03787753; DOI: 10.1016/j.jpowsour.2010.04.070; Publisher: Elsevier
Author affiliation: (1) Advanced Technology Centre (ATEC), Gunma University, 1-5-1 Tenjin, Kiryu, Gunma, 375-8515, Japan (2) Department of Chemical and Environmental Engineering, Gunma University, 1-5-1 Tenjin, Kiryu, Gunma, 375-8515, Japan
Abstract: The effect of the ionomer content in the catalyst layers of both the anode and the cathode with the black catalyst on the performance of a passive DMFC was investigated in order to increase the power output of the passive DMFC. In situ cyclic voltammetry has been carried out to evaluate the electrochemically active surface area, ECSA and the catalyst utilization. Under the passive conditions, ionomer content had a significant effect on both the mass transport and the ECSA. The optimum ionomer content was affected by the operating current density whether at anode or at cathode. Under low current density region, i.e., activation over voltage region, 20 wt.% showed the highest performance at the anode and the cathode, and the cell performance in this region was varied in accordance with the results of the ECSA. Under high current density region, i.e., mass transport over voltage region, lower ionomer content, 10 and 15 wt.%, had the highest cell performance at the anode and the cathode, respectively. The decrease in the optimum ionomer content at high current density was related to the low mass transport of methanol at the anode, and the flooding at the cathode at the high ionomer contents. The optimum ionomer content whether at anode or at cathode was 20 wt.%, from the power density point of view. The catalyst utilization was 10% and 25% at optimum conditions at the cathode and the anode respectively. © 2010 Elsevier B.V. All rights reserved. (44 refs)
Main heading: Catalysts
Controlled terms: Current density - Cyclic voltammetry - Mass transfer - Methanol
Uncontrolled terms: Catalyst layers - Catalyst utilization - Cell performance - Electrochemically active surface areas - High current densities - In-situ - Low current density - Low mass - Mass transport - Nafion ionomer content - Nafion ionomers - Operating currents - Optimum conditions - Over-voltages - Passive DMFC - Power densities - Power out put
Classification Code: 942.2 Electric Variables Measurements - 804.1 Organic Compounds - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 801.4.1 Electrochemistry - 701.1 Electricity: Basic Concepts and Phenomena - 641.3 Mass Transfer
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
13. Ordered mesoporous WO3-X possessing electronically conductive framework comparable to carbon framework toward long-term stable cathode supports for fuel cells
Kang, Eunae (1); An, Sunhyung (1); Yoon, Songhun (2); Kim, Jin Kon (1); Lee, Jinwoo (1)
Source: Journal of Materials Chemistry, v 20, n 35, p 7416-7421, September 21, 2010; ISSN: 09599428, E-ISSN: 13645501; DOI: 10.1039/c0jm00227e; Publisher: Royal Society of Chemistry
Author affiliation: (1) Department of Chemical Engineering, Pohang University of Science and Technology, Kyungbuk 790-784, Korea, Republic of (2) Advanced Chemical Technology Division, Korea Research Institute of Chemical Technology (KRICT), Daejeon 305-600, Korea, Republic of
Abstract: We report on the successful synthesis of ordered mesoporous WO 3-X with a high conductivity comparable to a mesoporous carbon framework. Ordered mesoporous WO3-X was prepared using KIT-6 as a hard template. Some WO3-X particles have negative replica structures of KIT-6 template and the other particles are generated by asymmetric incorporation of phosphotungstic acid inside channels of KIT-6 template. The wall of this mesostructured WO3-X has a single crystalline structure, which might be responsible for its high conductivity (1.76 S cm-1) comparable to ordered mesoporous carbons (3.0 S cm-1). Pt/mesoporous WO3-X exhibits a significant tolerance to cycling between 0.6 and 1.3 VNHE in 0.5 M H2SO4 solution, preserving 87% of its initial electrochemical surface area (ECSA) after 1000 cycles. On the contrary, the ECSA of the Pt/C decreased significantly with the number of cycles, resulting in loss of 74% of its initial ECSA. © 2010 The Royal Society of Chemistry. (47 refs)
Main heading: Fuel cells
Uncontrolled terms: Carbon framework - Electrochemical surface area - Hard templates - High conductivity - Mesoporous carbon - Mesostructured - Number of cycles - Ordered mesoporous - Ordered mesoporous carbon - Phosphotungstic acid - Single-crystalline structures
Classification Code: 702.2 Fuel Cells
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
14. Platinum catalyst on ordered mesoporous carbon with controlled morphology for methanol electrochemical oxidation
Kong, Ling-Bin (1, 2); Li, Heng (1); Zhang, Jing (1); Luo, Yong-Chun (2); Kang, Long (2)
Source: Applied Surface Science, v 256, n 22, p 6688-6693, September 1, 2010; ISSN: 01694332; DOI: 10.1016/j.apsusc.2010.04.071; Publisher: Elsevier
Author affiliation: (1) State Key Laboratory of Gansu Advanced Non-ferrous Metal Materials, Lanzhou University of Technology, 287 Langongping Road, Lanzhou 730050, China (2) School of Materials Science and Engineering, Lanzhou University of Technology, Lanzhou 730050, China
Abstract: Ordered mesoporous carbons CMK-3 with various morphologies are synthesized by using various mesoporous silica SBA-15 as template and then support to prepare Pt/CMK-3 catalyst. The obtained catalysts are compared in terms of the electrocatalytic activity for methanol oxidation in sulfuric acidic solutions. The structure characterizations and electrochemical analysis reveal that Pt catalysts with the CMK-3 support of large particle size and long channel lengths possess larger electrochemical active surface area (ECSA) and higher activity toward methanol oxidation than those with the other two supports. The better performance of Pt/CMK-3 catalyst may be due to the larger area of electrode/electrolyte interface and larger ECSA value of Pt catalyst, which will provide better structure in favor of the mass transport and the electron transport. © 2010 Elsevier B.V. (33 refs)
Main heading: Electrochemical oxidation
Controlled terms: Catalyst supports - Methanol - Morphology - Particle size analysis - Platinum - Silica
Uncontrolled terms: Acidic solutions - Channel length - Controlled morphology - Electrocatalytic activity - Electrochemical active surface areas - Electrochemical analysis - Electrode/electrolyte interfaces - Electron transport - Large particles - Mass transport - Mesoporous Silica - Methanol electrochemical oxidation - Methanol Oxidation - Ordered mesoporous carbon - Platinum catalysts - Pt catalysts - Structure characterization
Classification Code: 951 Materials Science - 812 Ceramics, Refractories and Glass - 804.1 Organic Compounds - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 802.2 Chemical Reactions - 547.1 Precious Metals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
15. Systems engineering training in engineering education
Holm, Johann E.W. (1); Van Der Walt, Marthie (2); Stoker, Piet W. (1)
Source: 2010 IEEE Transforming Engineering Education: Creating Interdisciplinary Skills for Complex Global Environments, 2010, 2010 IEEE Transforming Engineering Education: Creating Interdisciplinary Skills for Complex Global Environments; ISBN-13: 9781424460427; DOI: 10.1109/TEE.2010.5508820; Article number: 5508820; Conference: 2010 IEEE Transforming Engineering Education: Creating Interdisciplinary Skills for Complex Global Environments, April 6, 2010 - April 9, 2010; Publisher: IEEE Computer Society
Author affiliation: (1) Faculty of Engineering, North-West University, Potchefstroom, South Africa (2) Faculty of Educational Sciences, North-West University, Potchefstroom, South Africa
Abstract: The Engineering Council of South Africa (ECSA) emphasizes the role of project management, interdisciplinary projects, and other non-engineering skills that engineers inevitably will use in their careers. An excellent mechanism with which to achieve this goal is to use systems engineering and project management as teaching modules and in metacognitive fashion. This can be done in different ways, but a common thread is required over the period of the engineering course. As a result, students are exposed to engineering skills such as requirements analysis and management, specification practices, behavioral analysis, and project management. Systems engineering, when applied properly, draws together all aspects of engineering, including human, legal, economic, environmental, and other requirements, while project management draws together interpersonal skills. Ethics, entrepreneurship and other soft skills are taught under the same umbrella modules in order to show relevance that has previously been lacking. ©2010 IEEE. (5 refs)
Main heading: Engineering education
Controlled terms: Curricula - Environmental regulations - Professional aspects - Project management - Requirements engineering - Systems engineering
Uncontrolled terms: Behavioral analysis - Curriculum designs - Engineering council of south africa - Engineering course - Engineering skills - Engineering training - Interdisciplinary project - Interpersonal skills - Metacognitives - Professional practices - Requirements analysis - Soft skills - Teaching module
Classification Code: 961 Systems Science - 912.2 Management - 912 Industrial Engineering and Management - 901.2 Education - 901.1 Engineering Professional Aspects - 723 Computer Software, Data Handling and Applications - 454.2 Environmental Impact and Protection
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
16. Nanostructured Pt dispersed on graphene-multiwalled carbon nanotube hybrid nanomaterials as electrocatalyst for PEMFC
Jafri, R. Imran (1); Arockiados, T. (1); Rajalakshmi, N. (2); Ramaprabhu, S. (1)
Source: Journal of the Electrochemical Society, v 157, n 6, p B874-B879, 2010; ISSN: 00134651; DOI: 10.1149/1.3374353; Publisher: Electrochemical Society Inc.
Author affiliation: (1) Alternative Energy and Nanotechnology Laboratory, Nano Functional Materials Technology Center, Department of Physics, Madras, Chennai 600 036, India (2) Centre for Fuel Cell Technology, International Advanced Research Centre for Powder Metallurgy and New Materials, Chennai 600 113, India
Abstract: Nanostructured platinum dispersed on functionalized graphene and functionalized multiwalled carbon nanotube [Pt/(f-G-f-MWNT)] hybrid nanomaterials, a unique combination of three-, two, and one-dimensional structures, were used as an electrocatalyst for oxygen reduction reaction (ORR) in proton exchange membrane fuel cell (PEMFC). Electrochemical studies performed on Pt/(f-G-f-MWNT) composite materials by varying the ratio of the composition of f-G and f-MWNT for the investigation of the electrochemical active surface area (ECSA) have resulted in an ECSA as high as 108 m2 /g for the Pt dispersed on nanocomposite containing equal proportions of f-G and f-MWNT. Polarization graphs for the ORR reaction in PEMFC with Pt/(f-G-f-MWNT) as an electrocatalyst resulted in the best performance of 540 mW/ cm2 for the Pt/ (50 wt % f-G+50 wt % f-MWNT) cathode catalyst, agreeing with the electrochemical active surface area of Pt, due to good accessibility and uniform dispersion of the nanostructured Pt catalyst dispersed on the f-G-f-MWNT catalyst support, making them a suitable electrocatalyst for advanced PEMFC. © 2010 The Electrochemical Society. (30 refs)
Main heading: Proton exchange membrane fuel cells (PEMFC)
Controlled terms: Catalyst supports - Electrocatalysts - Electrolytic reduction - Graphene - Multiwalled carbon nanotubes (MWCN) - Nanocomposites - Nanostructured materials - Oxygen - Platinum
Uncontrolled terms: Cathode catalyst - Electrochemical active surface areas - Electrochemical studies - Functionalized - Functionalized multi-walled carbon nanotubes - Hybrid nanomaterials - Nano-structured - One-dimensional structure - Oxygen reduction reaction - Pt catalysts - Uniform dispersions
Classification Code: 933 Solid State Physics - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 802.2 Chemical Reactions - 761 Nanotechnology - 702.2 Fuel Cells - 547.1 Precious Metals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
17. Preparation and characterization of graphitic particles as alternative support for oxygen reduction reaction catalysts in fuel cells
Wang, Mei-Xian (1); Xu, Fan (1); Sun, Hong-Fang (2); Liu, Qi (1); Artyushkova, Kateryna (3); Stach, Eric A. (2); Xie, Jian (1)
Source: ECS Transactions, v 33, n 1 PART 1, p 533-544, 2010, Polymer Electrolyte Fuel Cells 10, PEFC 10; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566778206; DOI: 10.1149/1.3484549; Conference: 10th Polymer Electrolyte Fuel Cell Symposium, PEFC 10 - 218th ECS Meeting, October 10, 2010 - October 15, 2010; Sponsor: Energy Technology (ETD); Physical and Analytical Electrochemistry (PAED); Battery (BATT); Ind. Electrochem. Electrochem. Eng. (IEEE); Publisher: Electrochemical Society Inc.
Author affiliation: (1) Department of Mechanical Engineering, Purdue School of Engineering and Technology, Indiana University-Purdue University, Indianapolis, IN 46202, United States (2) School of Materials Engineering, Birck Nanotechnology Center, Purdue University, West Lafayette, IN 47907, United States (3) Department of Chemical and Nuclear Engineering, University of New Mexico, Albuquerque, NM 87131, United States
Abstract: The suitability of a nanoscale graphite as a catalyst support for use in polymer electrolyte membrane fuel cells (PEMFCs) was evaluated and compared with that of most popular commercial catalysts on Vulcan XC72 carbon black. It is observed that the distribution and structure of Pt nanopartcles for the synthesized catalyst and commercial catalysts are similar. The synthesized Pt catalysts show a better electrochemical surface area (ECSA). The accelerated degradation tests were performed using a glassy carbon rotating disk electrode. The results show that the ECSA loss after 1500th cycling for the synthesized catalyst and commercial catalyst was 46.92% and 62.2%, while mass activity loss was 59.2% and 79.9%, respectively. The temperature-programmed oxidation results also show that the synthesized catalysts have better resistance against the corrosion. The results show that nanoscale graphite can be a promising alternative electrocatalyst support to the traditionally- used Vulcan XC72 carbon black. ©The Electrochemical Society. (32 refs)
Main heading: Catalyst supports
Controlled terms: Carbon black - Electrocatalysts - Electrolytic reduction - Gas fuel purification - Glassy carbon - Graphite - Nanostructured materials - Oxygen - Platinum - Polyelectrolytes - Polymers - Proton exchange membrane fuel cells (PEMFC) - Rotating disks
Uncontrolled terms: Accelerated degradation tests - Commercial catalyst - Electrocatalyst support - Electrochemical surface area - Graphitic particles - Mass activity - Nano scale - Oxygen reduction reaction - Polymer electrolyte membrane fuel cells - Pt catalysts - Rotating disk electrodes - Temperature programmed oxidation - Vulcan XC72
Classification Code: 951 Materials Science - 815.1.1 Organic Polymers - 815.1 Polymeric Materials - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 802.2 Chemical Reactions - 761 Nanotechnology - 702.2 Fuel Cells - 601.2 Machine Components - 547.1 Precious Metals - 522 Gas Fuels
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
18. EDTA-directed self-assembly and enhanced catalytic properties of sphere-constructed platinum nanochains
Chen, Xiaohua (1); Xie, Jingsi (1); Hu, Jianqiang (1); Feng, Xiumei (1); Li, Aiqing (2)
Source: Journal of Physics D: Applied Physics, v 43, n 11, 2010; ISSN: 00223727, E-ISSN: 13616463; DOI: 10.1088/0022-3727/43/11/115403; Article number: 115403; Publisher: Institute of Physics Publishing
Author affiliation: (1) College of Chemistry and Chemical Engineering, South China University of Technology, Guangzhou 510640, China (2) Key Laboratory for Organ Failure Research, Education Ministry of People’s Republic of China, Southern Medical University, Guangzhou 510515, China
Abstract: A simple and synthetically directed self-assembly approach to the construction of platinum nanochains (PtNCs) has been demonstrated. Micrometre-length PtNCs constructed with spherical Pt nanoparticles (PtNPs) of about 5 nm were synthesized by the reduction of Pt-EDTA (ethylenediaminetetraacetic acid) chelate complex with sodium borohydride (NaBH4). It was found that EDTA played a critical role in the formation of sphere-constructed PtNCs. The PtNPs-Nafion/glassy carbon (GC) and PtNCs-Nafion/GC modified electrodes were fabricated and their corresponding electrocatalytic activities were studied. Comparative studies demonstrated that the PtNCs catalyst had a higher electrochemically active surface area (ECSA, almost 2 times) and better catalytic activity (almost 10 times) in comparison with the PtNPs catalyst. The PtNCs catalyst with a high ECSA and catalyst activity will be a good anode catalyst candidate for direct methanol fuel cells. © 2010 IOP Publishing Ltd. (32 refs)
Main heading: Catalyst activity
Controlled terms: Electrochemical sensors - Fuel cells - Metal analysis - Methanol - Methanol fuels - Platinum - Platinum compounds - Self assembly - Sodium - Spheres
Uncontrolled terms: Anode catalysts - Catalytic activity - Catalytic properties - Chelate complex - Comparative studies - Directed self-assembly - Electrocatalytic activity - Electrochemically active surface areas - Ethylene diamine tetra-acetic acid - Modified electrodes - Nanochains - Pt nanoparticles - Sodium borohydrides
Classification Code: 951 Materials Science - 801.4.1 Electrochemistry - 802.2 Chemical Reactions - 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 804.1 Organic Compounds - 804.2 Inorganic Compounds - 931.3 Atomic and Molecular Physics - 933.1 Crystalline Solids - 801 Chemistry - 523 Liquid Fuels - 531 Metallurgy and Metallography - 547.1 Precious Metals - 732.2 Control Instrumentation - 549.1 Alkali Metals - 702.2 Fuel Cells - 714.2 Semiconductor Devices and Integrated Circuits - 631 Fluid Flow
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
19. Platinum dendrites with controlled sizes for oxygen reduction reaction
Kim, Cheonghee (1); Oh, Jong-Gil (1); Kim, Yong-Tae (2); Kim, Hansung (1); Lee, Hyunjoo (1)
Source: Electrochemistry Communications, v 12, n 11, p 1596-1599, November 2010; ISSN: 13882481; DOI: 10.1016/j.elecom.2010.09.004; Publisher: Elsevier Inc.
Author affiliation: (1) Department of Chemical and Biomolecular Engineering, Specialized Graduate School of Hydrogen and Fuel Cell, Yonsei University, Seoul 120-749, Korea, Republic of (2) School of Mechanical Engineering, Pusan National University, Busan 609-735, Korea, Republic of
Abstract: Platinum dendrites were synthesized with the controlled sizes of 13-53 nm, and their electrocatalytic properties were evaluated for oxygen reduction reaction (ORR). Dendrites showed a superior activity for ORR and better selectivity for the production of H2O, compared to commercial E-tek catalysts. Durability was also tested by estimating the change in electrochemically active surface area (ECSA) after extended periods of oxygen reduction. Dendrites with larger sizes showed improved durability. © 2010 Elsevier B.V. All rights reserved. (18 refs)
Main heading: Dendrites (metallography)
Controlled terms: Durability - Electrolytic reduction - Oxygen - Platinum
Uncontrolled terms: Activity - Controlled size - Dendrites - Electrocatalytic properties - Electrochemically active surface areas - Oxygen Reduction - Oxygen reduction reaction - Platinum dendrites
Classification Code: 421 Strength of Building Materials; Mechanical Properties - 547.1 Precious Metals - 802.2 Chemical Reactions - 804 Chemical Products Generally - 933.1.2 Crystal Growth
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
20. Porous carbon nanotube electrodes supported by natural polymeric membranes for PEMFC
Yun, Young Soo (1); Bak, Hyeonseong (1); Jin, Hyoung-Joon (1)
Source: Synthetic Metals, v 160, n 7-8, p 561-565, April 2010; ISSN: 03796779; DOI: 10.1016/j.synthmet.2009.12.003; Publisher: Elsevier Ltd
Author affiliation: (1) Department of Polymer Science and Engineering, Inha University, 253 Yonghyun-Dong, Nam-Gu, Incheon, 402-751, Korea, Republic of
Abstract: A new type of porous multiwalled carbon nanotube (MWCNT) electrode with a macroporous networking inner-structure was prepared. First, the MWCNTs were homogeneously introduced inside and outside of a bacterial cellulose membrane with a 3D inter-connected network structure using ultrasound treatment and vacuum filtration in order to form the GDL. Second, the CL was formed on the surface of the GDL through vacuum filtration of the Pt incorporated MWCNTs (Pt/MWCNTs). Finally, the electrode was created through freeze-drying. The final electrode had a sheet resistance of 80 O/ and an electro-chemical active surface area (ECSA) of 10.1 m2/g. Although the ECSA of the electrode did not have the efficiency (14.3 m2/g) of a typical electrode (carbon cloth/Pt/carbon black), these results suggested that the new type of electrode has potential as a proton exchange membrane fuel cell. © 2009 Elsevier B.V. All rights reserved. (24 refs)
Main heading: Multiwalled carbon nanotubes (MWCN)
Controlled terms: Carbon black - Carbon nanotubes - Diffusion in gases - Electric resistance - Microfiltration - Platinum - Polymeric membranes - Porous materials - Proton exchange membrane fuel cells (PEMFC) - Protons - Vacuum
Uncontrolled terms: Active surface area - Bacterial cellulose membranes - Connected networks - Macroporous - Porous carbon - Porous carbons - Ultrasound treatments - Vacuum filtration
Classification Code: 803 Chemical Agents and Basic Industrial Chemicals - 817.1 Polymer Products - 818.3.1 Processing Agents - 951 Materials Science - 931.2 Physical Properties of Gases, Liquids and Solids - 932.1 High Energy Physics - 933.1 Crystalline Solids - 931.3 Atomic and Molecular Physics - 802.3 Chemical Operations - 802.1 Chemical Plants and Equipment - 423 Non Mechanical Properties and Tests of Building Materials - 547.1 Precious Metals - 633 Vacuum Technology - 701.1 Electricity: Basic Concepts and Phenomena - 702.2 Fuel Cells - 761 Nanotechnology
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
21. Tracking design elements in a mechanical engineering curriculum
Oladiran, M.T. (1); Uziak, J. (1); Kommula, V. (1)
Source: Advanced Materials Research, v 367, p 601-10, 2010; ISSN: 1022-6680; DOI: 10.4028/www.scientific.net/AMR.367.601; Conference: 2010 Third International Conference on Engineering Research and Development - Advances in Engineering, Science and Technology (ICERD 2010), 7-9 Sept. 2010, Benin City, Nigeria; Publisher: Trans Tech Publications Ltd., Switzerland
Author affiliation: (1) Dept. of Mech. Eng., Univ. of Botswana, Gaborone, Botswana
Abstract: Design activity is core to modern engineering practice. Some design experience is demanded by professional bodies that accredit degree engineering programmes (e.g. ABET and ECSA). The purpose of this paper is to track design related topics through the curriculum of the mechanical engineering degree programme at the University of Botswana. A questionnaire was designed and administered to staff teaching on the programme. The responses were used to map design components in the curriculum and assess the design experience of students. The results showed that design topics were delivered in various courses and the knowledge gained by students increased steadily from Year 3 to Year 5. Some observed deficiencies in the teaching of design included lack of industry recommended projects, negligible application of design software, and the use of only single discipline based problems (i.e. no multi disciplinary teaching approach). It was concluded that a programme review is needed to improve the pedagogy of design and enhance programme robustness. It is envisaged that the study will help in designing a new mechanical engineering curriculum to satisfy accreditation requirements. (13 refs)
Inspec controlled terms: design engineering - educational institutions - engineering education - mechanical engineering - teaching
Uncontrolled terms: mechanical engineering curriculum - design activity - design experience - mechanical engineering degree program - University of Botswana - staff teaching - design topic - design teaching - design software - single discipline based problem - program review - design pedagogy - accreditation requirement - design element tracking
Classification Code: E1400 Design - E0250 Education and training
Treatment: Practical (PRA)
Database: Inspec
Copyright 2012, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
22. Alternative catalyst supports deposited on nanostructured thin films for proton exchange membrane fuel cells
Garsuch, Arnd (1); Stevens, D.A. (1); Sanderson, R.J. (1); Wang, S. (1); Atanasoski, R.T. (2); Hendricks, S. (2); Debe, M.K. (2); Dahn, J.R. (1)
Source: Journal of the Electrochemical Society, v 157, n 2, p B187-B194, 2010; ISSN: 00134651; DOI: 10.1149/1.3261855; Publisher: Electrochemical Society Inc.
Author affiliation: (1) Department of Physics and Atmospheric Science, Dalhousie University, Halifax, NS B3H 3J5, Canada (2) 3M Center, 3M Fuel Cell Components Program, St. Paul, MI 55144, United States
Abstract: A series of platinum-coated underlayer materials, alumina, gold, titanium carbide, and titanium disilicide, deposited by a high throughput magnetron sputtering method have been investigated as cathode catalyst supports in fuel cells. Orthogonal thickness gradients of the underlayer materials (0-100 nm planar equivalent) and the platinum top layer (0-75 nm planar equivalent) made up the 76×76 mm libraries. The resulting catalyst films were characterized by surface profilometry, X-ray diffraction, scanning electron microscopy, and X-ray photoelectron spectroscopy. The electrochemical properties of the catalyst composition spreads were investigated simultaneously in 64-electrode proton exchange membrane fuel cells with emphasis placed on the determination of the electrochemical surface area (ECSA) as a function of underlayer thickness and chemistry. The present study shows that gold and titanium disilicide used as underlayers on 3M’s nanostructured thin film supports lead to a loss of ECSA during operation. Migration and surface accumulation were observed when gold was used as underlayer material. For titanium disilicide, alloying and the generation of platinum silicide phases occurred. Alumina and titanium carbide were found to be potentially acceptable underlayer materials as well as alternative support materials on the basis of their influence on the catalyst surface area. © 2009 The Electrochemical Society. (30 refs)
Main heading: Catalyst supports
Controlled terms: Catalysis - Chemical detection - Coated materials - Electrochemical properties - Gold - Membranes - Platinum - Proton exchange membrane fuel cells (PEMFC) - Protons - Scanning electron microscopy - Silicides - Surfaces - Thin films - Titanium - Titanium carbide - X ray photoelectron spectroscopy
Uncontrolled terms: Alternative catalysts - Catalyst composition - Catalyst film - Catalyst surfaces - Cathode catalyst - Disilicides - Electrochemical surface area - High throughput - Magnetron sputtering method - Nanostructured thin film - Platinum silicides - Support materials - Surface accumulation - Surface profilometry - Thickness gradients - Underlayer thickness - Underlayers
Classification Code: 804 Chemical Products Generally - 804.2 Inorganic Compounds - 812.2 Refractories - 813 Coatings and Finishes - 803 Chemical Agents and Basic Industrial Chemicals - 931 Classical Physics; Quantum Theory; Relativity - 931.3 Atomic and Molecular Physics - 932.1 High Energy Physics - 951 Materials Science - 931.2 Physical Properties of Gases, Liquids and Solids - 802.2 Chemical Reactions - 542.3 Titanium and Alloys - 547.1 Precious Metals - 604.2 Machining Operations - 702.2 Fuel Cells - 539 Metals Corrosion and Protection; Metal Plating - 714.2 Semiconductor Devices and Integrated Circuits - 801 Chemistry - 801.4 Physical Chemistry - 801.4.1 Electrochemistry - 741.1 Light/Optics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
23. Electrochemical performance and stability of thin film electrodes with metal oxides in polymer electrolyte fuel cells
Wesselmark, M. (1); Wickman, B. (2); Lagergren, C. (1); Lindbergh, G. (1)
Source: Electrochimica Acta, v 55, n 26, p 7590-7596, November 1, 2010; ISSN: 00134686; DOI: 10.1016/j.electacta.2009.12.040; Publisher: Elsevier Ltd
Author affiliation: (1) Applied Electrochemistry, School of Chemistry and Chemical Engineering, KTH, SE-100 44 Stockholm, Sweden (2) Competence Centre for Catalysis, Department of Applied Physics, Chalmers University of Technology, SE-412 96 Göteborg, Sweden
Abstract: Thin film electrodes are prepared by thermal evaporation of nanometer thick layers of metal oxide and platinum on a gas diffusion layer (GDL), in order to evaluate different metal oxides’ impact on the activity and stability of the platinum cathode catalyst in the polymer electrolyte fuel cell. Platinum deposited on tin, tantalum, titanium, tungsten and zirconium oxide is investigated and the morphology and chemistry of the catalysts are examined with scanning electron microscopy and X-ray photoelectron spectroscopy. Cyclic sweeps in oxygen and nitrogen are performed prior and after potential cycling degradation tests. Platinum seems to disperse better on the metal oxides than on the GDL and increased electrochemically active surface area (ECSA) of platinum is observed on tin, titanium and tungsten oxide. A thicker layer metal oxide results in a higher ECSA. Platinum deposited on tungsten performs better than sole platinum in the polarisation curves and displays higher Tafel slopes at higher current densities than all other samples. The stability does also seem to be improved by the addition of tungsten oxide, electrodes with 3 nm platinum on 3, 10 and 20 nm tungsten oxide, performs better than all other electrodes after the accelerated degradation tests. © 2009 Elsevier Ltd. (40 refs)
Main heading: Thermal evaporation
Controlled terms: Catalysts - Degradation - Diffusion in gases - Electrochemical electrodes - Electrolytic reduction - Fuel cells - Metals - Oxygen - Platinum - Polyelectrolytes - Scanning electron microscopy - Tantalum - Tantalum oxides - Thin films - Tin - Tin oxides - Titanium - Titanium oxides - Transition metal compounds - Tungsten - Tungsten compounds - X ray photoelectron spectroscopy - Zirconia - Zirconium
Uncontrolled terms: Accelerated degradation tests - Degradation test - Electrochemical performance - Electrochemically active surface areas - Gas diffusion layers - Metal oxides - Oxygen reduction - PEMFC - Platinum cathodes - Polarisation - Polymer electrolyte fuel cells - Potential cycling - Tafel slopes - Thick layers - Thin-film electrode - Transition metal oxides - Tungsten oxide - Zirconium oxide
Classification Code: 933.1.2 Crystal Growth - 801 Chemistry - 801.4.1 Electrochemistry - 802.1 Chemical Plants and Equipment - 802.2 Chemical Reactions - 804 Chemical Products Generally - 804.2 Inorganic Compounds - 815.1.1 Organic Polymers - 931.2 Physical Properties of Gases, Liquids and Solids - 714.2 Semiconductor Devices and Integrated Circuits - 531 Metallurgy and Metallography - 542.3 Titanium and Alloys - 543.4 Tantalum and Alloys - 702.2 Fuel Cells - 543.5 Tungsten and Alloys - 547.1 Precious Metals - 549.3 Nonferrous Metals and Alloys excluding Alkali and Alkaline Earth Metals - 546.2 Tin and Alloys
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
24. Structure of carbon-supported Pt-Ru nanoparticles and their electrocatalytic behavior for hydrogen oxidation reaction
Velázquez, Amado (1); Centellas, Francesc (1); Garrido, José Antonio (1); Arias, Conchita (1); Rodríguez, Rosa María (1); Brillas, Enric (1); Cabot, Pere-Lluís (1)
Source: Journal of Power Sources, v 195, n 3, p 710-719, February 1, 2010; ISSN: 03787753; DOI: 10.1016/j.jpowsour.2009.08.039; Publisher: Elsevier
Author affiliation: (1) Laboratori d’Electroquímica dels Materials i del Medi Ambient, Departament de Química Física, Universitat de Barcelona, Martí i Franquès 1-11, 08028 Barcelona, Spain
Abstract: The electrochemical activity towards hydrogen oxidation reaction (HOR) of a high performance carbon-supported Pt-Ru electrocatalyst (HP 20 wt.% 1:1 Pt-Ru alloy on Vulcan XC-72 carbon black) has been studied using the thin-film rotating disk electrode (RDE) technique. The physical properties of the Pt-Ru nanoparticles in the electrocatalyst were previously determined by transmission electron microscopy (TEM), high resolution TEM, fast Fourier transform (FFT), electron diffraction and X-ray diffraction (XRD). The corresponding compositional and size-shape analyses indicated that nanoparticles generally presented a 3D cubo-octahedral morphology with about 26 at.% Ru in the lattice positions of the face-centred cubic structure of Pt. The kinetics for HOR was studied in a hydrogen-saturated 0.5 M H2SO4 solution using thin-film electrodes prepared by depositing an ink of the electrocatalyst with different Nafion contents in a one-step process on a glassy carbon electrode. A maximum electrochemically active surface area (ECSA) of 119 m2 g Pt-1 was found for an optimum Nafion composition of the film of about 35 wt.%. The kinetic current density in the absence of mass transfer effects was 21 mA cm-2. A Tafel slope of 26 mV dec-1, independent of the rotation rate and Nafion content, was always obtained, evidencing that HOR behaves reversibly. The exchange current density referred to the ECSA of the Pt-Ru nanoparticles was 0.17 mA cm-2, a similar value to that previously found for analogous inks containing pure Pt nanoparticles. © 2009 Elsevier B.V. All rights reserved. (53 refs)
Main heading: Platinum alloys
Controlled terms: Carbon black - Diffraction - Electrocatalysis - Electrocatalysts - Electrodes - Fast Fourier transforms - Glass membrane electrodes - High resolution transmission electron microscopy - Hydrogen - Ink - Kinetic parameters - Nanoparticles - Oxidation - Platinum - Rotating disks - Rotation - Ruthenium alloys - Thin film devices - Three dimensional - X ray diffraction
Uncontrolled terms: Cubo-octahedral morphology - Electrocatalytic behavior - Electrochemical activities - Electrochemically active surface areas - Exchange current densities - Face-centred cubic - Glassy carbon electrodes - High-resolution TEM - Hydrogen oxidation reaction - Kinetic currents - Lattice positions - Mass transfer effects - Nafion contents - One-step process - Pt nanoparticles - Pt-Ru nanoparticles - PtRu alloy - Rotating disk electrodes - Rotation rate - Shape analysis - Supported Pt - Tafel slopes - TEM - Thin-film electrode - Vulcan XC72
Classification Code: 801.4.1 Electrochemistry - 802.2 Chemical Reactions - 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 812.3 Glass - 818.3.1 Processing Agents - 902.1 Engineering Graphics - 921.3 Mathematical Transformations - 931 Classical Physics; Quantum Theory; Relativity - 931.1 Mechanics - 931.3 Atomic and Molecular Physics - 933 Solid State Physics - 933.1.1 Crystal Lattice - 761 Nanotechnology - 547.1 Precious Metals - 601.1 Mechanical Devices - 601.2 Machine Components - 631.1 Fluid Flow, General - 704.1 Electric Components - 708 Electric and Magnetic Materials - 711.1 Electromagnetic Waves in Different Media - 712.2 Thermionic Materials - 714.1 Electron Tubes - 714.2 Semiconductor Devices and Integrated Circuits - 723.5 Computer Applications - 741.1 Light/Optics - 741.3 Optical Devices and Systems
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
25. Enterprise Cloud Service Architecture
Tang, Longji (1); Dong, Jing (1); Zhao, Yajing (1); Zhang, Liang-Jie (2)
Source: Proceedings - 2010 IEEE 3rd International Conference on Cloud Computing, CLOUD 2010, p 27-34, 2010, Proceedings - 2010 IEEE 3rd International Conference on Cloud Computing, CLOUD 2010; ISBN-13: 9780769541303; DOI: 10.1109/CLOUD.2010.10; Article number: 5558013; Conference: 3rd IEEE International Conference on Cloud Computing, CLOUD 2010, July 5, 2010 - July 10, 2010; Sponsor: IEEE Comput. Soc. Tech. Comm. Serv. Comput. (TC-SVC); Publisher: IEEE Computer Society
Author affiliation: (1) Department of Computer Science, University of Texas at Dallas, Richardson, TX 75083, United States (2) T.J. Watson Research Center, IBM, 19 Skyline Drive, Hawthorne, NY 10532, United States
Abstract: Cloud computing, a new paradigm of distributed computing, introduces many new ideas, concepts, principals, technologies and architectural styles into enterprise service-oriented computing. The enterprise service-oriented architecture (ESOA) style is an abstraction of concrete enterprise service-orientated architectures, which includes SOA architectural elements, service design patterns as well as principles, and SOA quality attributes. It can be extended to a new style for realizing enterprise cloud computing. Meanwhile, the principles and style of enterprise service-oriented computing facilitate the enterprise-wide adoption of cloud computing. This paper extends the ESOA style to a new hybrid architectural style, Enterprise Cloud Service Architecture (ECSA). The style is described by extending enterprise service-oriented formula for ESOA. We model the style through specifying each element in the formula with both service-oriented and cloud architectural styles. © 2010 IEEE. (37 refs)
Main heading: Architecture
Controlled terms: Grid computing - Industry - Information services
Uncontrolled terms: Architectural element - Architectural style - Cloud computing - Cloud services - Distributed Computing - Enterprise services - Quality attributes - Service design - Service Oriented
Classification Code: 402 Buildings and Towers - 722.4 Digital Computers and Systems - 903.4 Information Services - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
26. Aniline as a cationic and aromatic contaminant in PEMFCs
Cho, Hyun-Seok (1); Jung, Myunghee (1); Navarro, Jose (1); Ohashi, Masato (1); Van Zee, J.W. (1)
Source: ECS Transactions, v 33, n 1 PART 2, p 1627-1635, 2010, Polymer Electrolyte Fuel Cells 10, PEFC 10; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566778206; DOI: 10.1149/1.3484652; Conference: 10th Polymer Electrolyte Fuel Cell Symposium, PEFC 10 - 218th ECS Meeting, October 10, 2010 - October 15, 2010; Sponsor: Energy Technology (ETD); Physical and Analytical Electrochemistry (PAED); Battery (BATT); Ind. Electrochem. Electrochem. Eng. (IEEE); Publisher: Electrochemical Society Inc.
Author affiliation: (1) Department of Chemical Engineering, University of South Carolina, Columbia, SC 29208, United States
Abstract: Aniline as a possible contaminant in polymer electrolyte membrane fuel cells (PEMFCs) has been studied by several ex-situ techniques. The aniline isotherm for MEA shows more affinity to ion-exchange with the PEM than other monovalent such as sodium and ammonium ions, thus indicating stronger performance loss at the same concentration. The results of cyclic voltammetry (CV) of Pt/C show the loss of electrochemical surface area (ECSA) by with the addition of aniline in the electrolyte. The appearance of unknown peaks in CV may indicate the production of polyaniline (PAN1) film which appears to grow with the number of CV tests. These studies indicate that the use of balance of plant components that leach aniline should be avoided since its presence appears to decrease the electrochemical activity of the electrode for the oxygen reduction reaction. Further studies on aniline with in-situ experiment may not be warranted. ©The Electrochemical Society. (18 refs)
Main heading: Proton exchange membrane fuel cells (PEMFC)
Controlled terms: Ammonium compounds - Aniline - Cyclic voltammetry - Electrochemistry - Electrolytic reduction - Ion exchange - Ions - Leaching - Oxygen - Polyaniline - Polyelectrolytes - Polymers
Uncontrolled terms: Ammonium ions - Aromatic contaminants - Balance of plant - Electrochemical activities - Electrochemical surface area - Ex situ - In-situ experiments - Oxygen reduction reaction - Performance loss - Polymer electrolyte membrane fuel cells
Classification Code: 815.1.1 Organic Polymers - 815.1 Polymeric Materials - 804.1 Organic Compounds - 804 Chemical Products Generally - 802.3 Chemical Operations - 802.2 Chemical Reactions - 801.4.1 Electrochemistry - 801 Chemistry - 702.2 Fuel Cells
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
27. Carbon supported Pt-shell modified PdCo-core with electrocatalyst for methanol oxidation
Wang, Rongfang (1, 2); Wang, Hui (1, 2); Wei, Bangxing (1, 2); Wang, Wei (1, 2); Lei, Ziqiang (1, 2)
Source: International Journal of Hydrogen Energy, v 35, n 19, p 10081-10086, October 2010; ISSN: 03603199; DOI: 10.1016/j.ijhydene.2010.07.008; Publisher: Elsevier Ltd
Author affiliation: (1) Key Laboratory of Eco-Environment-Related Polymer Materials, Ministry of Education, China (2) Key Laboratory of Gansu Polymer Materials, College of Chemistry and Chemical Engineering, Northwest Normal University, Anning East Road 967, Lanzhou, Gansu 730070, China
Abstract: A catalyst for anode oxidation of methanol, carbon supported pseudo-core-shell PdCo@Pt particles with Pt shell is prepared via a two-step procedure, which consists of an organic colloid method and a surface replacement reaction step. Transmission electron microscopy (TEM) and X-ray diffraction (XRD) are used for the catalysts characterization. The electrochemical surface areas (ECSA) are 6 and 4 times as large as those of Pt/C and PtRu/C catalysts, respectively. Furthermore, based on the Pt mass, the cyclic voltammetry (CV) and chronoamperometry results demonstrate that the electrocatalytic activity and stability of the PdCo@Pt/C catalyst for methanol oxidation are much higher than those of the Pt/C and PtRu/C catalysts. The PdCo@Pt/C catalyst is better utilization of Pt than pure Pt and Pt-based alloy catalysts. © 2010 Professor T. Nejat Veziroglu. Published by Elsevier Ltd. All rights reserved. (34 refs)
Main heading: Platinum alloys
Controlled terms: Cerium alloys - Chronoamperometry - Cyclic voltammetry - Electrocatalysts - Fuel cells - Methanol - Nanoparticles - Oxidation - Platinum - Substitution reactions - Surface reactions - Transmission electron microscopy - X ray diffraction
Uncontrolled terms: Alloy catalyst - Anode oxidation - Core-shell - Electrocatalytic activity and stability - Electrochemical surface area - Methanol oxidation - Organic colloids - Pt particle - Pt/C catalysts - PtRu/C catalysts - Replacement reactions - Supported Pt - TEM - Two-step procedure
Classification Code: 933.1.1 Crystal Lattice - 933 Solid State Physics - 804.1 Organic Compounds - 802.2 Chemical Reactions - 801.4.1 Electrochemistry - 761 Nanotechnology - 741.3 Optical Devices and Systems - 708 Electric and Magnetic Materials - 702.2 Fuel Cells - 547.2 Rare Earth Metals - 547.1 Precious Metals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
28. Prospective of Pd/MOx as alternative Pt anode catalyst for polymer electrolyte fuel cell
Muhamad, Ernee Noryana (1, 2); Takeguchi, Tatsuya (1); Wang, Guoxiong (1); Yamanaka, Toshiro (1); Ueda, Wataru (1)
Source: ECS Transactions, v 28, n 23, p 253-258, 2010, Electrode Processes Relevant to Fuel Cell Technology; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781607681991; DOI: 10.1149/1.3502356; Conference: Electrode Processes Relevant to Fuel Cell Technology - 217th ECS Meeting, April 25, 2010 - April 30, 2010; Sponsor: Physical and Analytical Electrochemistry; Energy Technology; Publisher: Electrochemical Society Inc.
Author affiliation: (1) Catalysis Research Center, Hokkaido University, Sapporo 001-0021, Japan (2) Chemistry Department, Faculty of Science, Universiti Putra Malaysia, 43400 Serdang, Selangor, Malaysia
Abstract: The performances of anode Pd catalysts modified with metal oxides in CO-contaminated H2 were investigated for polymer electrolyte fuel cell (PEFC). The catalysts were prepared by facile impregnation method and characterized by X-ray diffraction (XRD), Scanning Transmission Electron Microscope (STEM) and CO-stripping voltammetry. Comparison of both modified Pd anode with pure Pd/C and state-of-the-art Pt/C shows an improvement in the cell performance when 500 ppm CO/H2 mixture is fed. The improvement was due to much smaller Pd particle size, which significantly increases the electrochemical surface area (ECSA). In principle, carbon-supported Pd modified with metal oxides catalyst has shown a possibility to replace the used of Pt as anode electrode for PEFC. ©The Electrochemical Society. (9 refs)
Main heading: Fuel cells
Controlled terms: Catalysts - Palladium - Platinum - Polyelectrolytes - Transmission electron microscopy - X ray diffraction
Uncontrolled terms: Anode electrodes - Cell performance - Electrochemical surface area - Impregnation methods - Metal oxides - Pd catalyst - Pd particle size - Polymer electrolyte fuel cells - Pt anodes - Scanning transmission electron microscopes
Classification Code: 931.3 Atomic and Molecular Physics - 815.1.1 Organic Polymers - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 741.3 Optical Devices and Systems - 702.2 Fuel Cells - 547.1 Precious Metals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
29. Advanced gas diffusion layers for PEM fuel cells
Stanic, V. (1); Tatalovich, J. (1)
Source: ECS Transactions, v 33, n 1 PART 2, p 1123-1132, 2010, Polymer Electrolyte Fuel Cells 10, PEFC 10; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566778206; DOI: 10.1149/1.3484606; Conference: 10th Polymer Electrolyte Fuel Cell Symposium, PEFC 10 - 218th ECS Meeting, October 10, 2010 - October 15, 2010; Sponsor: Energy Technology (ETD); Physical and Analytical Electrochemistry (PAED); Battery (BATT); Ind. Electrochem. Electrochem. Eng. (IEEE); Publisher: Electrochemical Society Inc.
Author affiliation: (1) EnerFuel, Inc., West Palm Beach, FL 33407, United States
Abstract: One of the most critical components for proper water management and catalyst functioning in the proton exchange membrane fuel cell (PEMFC) is the Gas diffusion layer (GDL). This paper presents a preliminary study on advanced GDL performance characteristics in fuel cell environment. Off-shelf-carbon fiber based materials with promising microstructure typically used for applications other than PEM FC were employed for this study. The material electrochemical functionalities were evaluated in-situ and compared with standard Sigracet SGL 35 BC The 5cm2 fuel cells were assembled with a 3-layer standard MEA and the GDLs and tested at 80°C with 100% humidified gases at ambient pressure. The results show that the advanced GDL enhanced catalyst ECSA, and decreased fuel cell ohmic losses. Finally, the current status of the advanced GDL functionalization properties are discussed and future materials optimization is proposed. ©The Electrochemical Society. (10 refs)
Main heading: Proton exchange membrane fuel cells (PEMFC)
Controlled terms: Carbon fibers - Catalysts - Diffusion in gases - Gas fuel purification - Polyelectrolytes
Uncontrolled terms: Ambient pressures - Critical component - Current status - Fiber-based materials - Functionalizations - Gas diffusion layers - In-situ - Ohmic loss - PEM fuel cell - Performance characteristics
Classification Code: 522 Gas Fuels - 702.2 Fuel Cells - 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 815.1.1 Organic Polymers - 931.2 Physical Properties of Gases, Liquids and Solids
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
30. Accelerated test analysis of reversal potential caused by fuel starvation during PEMFCs operation
Kang, Jungtak (1); Jung, Dong Won (2); Park, Soon (2); Lee, Jong-Hyun (3); Ko, Jaejoon (3); Kim, Junbom (1)
Source: International Journal of Hydrogen Energy, v 35, n 8, p 3727-3735, April 2010; ISSN: 03603199; DOI: 10.1016/j.ijhydene.2010.01.071; Publisher: Elsevier Ltd
Author affiliation: (1) School of Chemical Engineering and Bioengineering, University of Ulsan, Ulsan, 680-749, Korea, Republic of (2) School of Materials Science and Engineering, University of Ulsan, Ulsan, 680-749, Korea, Republic of (3) Hyundai Motor Company, Fuel Cell Vehicle Team 1, 104 Mabuk-dong, Giheung-Gu, Yongin-Si, Gyeonggi-Do 446-912, Korea, Republic of
Abstract: The performance of polymer electrolyte membrane fuel cells (PEMFCs) was reduced due to the degradation of the catalyst layer when reverse potential was generated by fuel starvation in PEMFCs. Detailed analysis was performed through accelerated reversal potential tests. The electrochemical impedance spectroscopy (EIS) measurement results showed that the charge transfer resistance increased and the electrochemical active surface area (ECSA) reduction was confirmed through the cyclic voltammetry (CV) measurements. Corrosion of the carbon used as the catalyst support was detected by confirming the CO peak in the 1st cyclic voltammogram in the CV measurements. Growth of the Pt catalyst due to the agglomeration and sintering of Pt was confirmed during increasing cycles of the accelerated reversal potential through X-ray diffraction (XRD) and transmission electron microscopy (TEM) analyses. © 2010 Professor T. Nejat Veziroglu. (21 refs)
Main heading: Proton exchange membrane fuel cells (PEMFC)
Controlled terms: Agglomeration - Catalyst supports - Charge transfer - Cyclic voltammetry - Electrochemical corrosion - Electrochemical impedance spectroscopy - Ion exchange - Photodegradation - Platinum - Scanning electron microscopy - Sintering - Transmission electron microscopy - X ray diffraction - X ray diffraction analysis
Uncontrolled terms: Accelerated tests - C-V measurement - Carbon corrosion - Catalyst layers - Charge transfer resistance - Cyclic voltammograms - Electrochemical active surface areas - Electrochemical impedance spectroscopy measurements - Polymer electrolyte membrane fuel cells - Pt catalysts - TEM
Classification Code: 942.2 Electric Variables Measurements - 802.2 Chemical Reactions - 802.3 Chemical Operations - 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 812.2 Refractories - 931.2 Physical Properties of Gases, Liquids and Solids - 931.3 Atomic and Molecular Physics - 933.1.1 Crystal Lattice - 801.4.1 Electrochemistry - 533.1 Ore Treatment - 536.1 Powder Metallurgy Operations - 539.1 Metals Corrosion - 801 Chemistry - 547.1 Precious Metals - 741.1 Light/Optics - 741.3 Optical Devices and Systems - 702.2 Fuel Cells
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
31. Preparation of bimodal porous carbon supported PtRu catalysts for fuel cells
Hwang, S. (1, 2); Park, G.-G. (1); Yim, S.-D. (1); Park, S.-H. (1); Yang, T.-H. (1); Kim, H. (2); Kim, C.-S. (1)
Source: Fuel Cells, v 10, n 2, p 245-250, April 2010; ISSN: 16156846, E-ISSN: 16156854; DOI: 10.1002/fuce.200900140; Publisher: John Wiley and Sons Ltd
Author affiliation: (1) Fuel Cell Research Center, Korea Institute of Energy Research, 102, Gajeong-ro, Yuseong-gu, Daejeon 305-343, Korea, Republic of (2) Department of Chemical Engineering, Yonsei University, 134 Shinchon-Dong, Seodaemun-gu, 120-749, Seoul, Korea, Republic of
Abstract: In this work, we synthesised the bimodal porous carbon supported electro-catalyst as a novel catalyst for fuel cells. For this purpose, the bimodal porous carbons with different pore sizes were prepared by imprinting method. Three kinds of bimodal porous carbons were fabricated by using the silica spheres with diameters of ca. 50, 100 and 300 nm and SBA-15 particle having 200-250 nm diameter and 700-900 nm length as templates. The BET surface areas of the bimoal porous carbons were determined to be 235-294 m2 g-1, which are similar to that of Vulcan XC72. To evaluate the electro-catalytic activity, the PtRu nanoparticles of ca. 1.9-2.6 nm were loaded on the bimodal porous carbon supports. The PtRu/C100, synthesised by using SBA-15 and 100 nm silica sphere, had the higher electrochemical surface area (ECSA) and the lower on-set potential and showed comparable performance with the commercial catalyst. © 2010 WILEY-VCH Verlag GmbH & Co. KGaA, Weinheim. (26 refs)
Main heading: Catalyst supports
Controlled terms: Fuel cells - Platinum alloys - Silica
Uncontrolled terms: BET surface area - Commercial catalyst - Different pore sizes - Electrocatalytic activity - Electrochemical surface area - Novel catalysts - Porous carbons - Pt-Ru catalysts - Pt-Ru nanoparticles - Silica Sphere - Support materials - Vulcan XC72
Classification Code: 812 Ceramics, Refractories and Glass - 804.2 Inorganic Compounds - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 702.2 Fuel Cells - 547.1 Precious Metals - 482.2 Minerals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
32. Extending the corkscrew algorithm to find bifurcations of vessels
Wette, Philip (1); Arens, Stephan (1); Eisner, Andreas (1); Domik, Gitta (1)
Source: Proceedings of the 11th IASTED International Conference on Computer Graphics and Imaging, CGIM 2010, p 317-323, 2010, Proceedings of the 11th IASTED International Conference on Computer Graphics and Imaging, CGIM 2010; ISBN-13: 9780889868243; Conference: 11th IASTED International Conference on Computer Graphics and Imaging, CGIM 2010, February 17, 2010 - February 19, 2010; Publisher: Acta Press
Author affiliation: (1) Department of Computer Science, University of Paderborn, Germany
Abstract: Medical diagnosis can be supported by segmenting structures of interest inside a large data volume. The Corkscrew Segmentation Algorithm (CSA) is known to work well on elongated structures [1]. Additionally it is a simple and easy to extend algorithm, thus providing a useful basis for further optimizations. Although it was designed for segmenting vessels, it has not been evaluated yet with the Rotterdam Coronary Artery Algorithm Evaluation Frame- work1 [2]. This is due to the fact that coronary arteries are indeed elongated structures but additionally characterized by bifurcations that the CSA can not handle. This paper discusses an extension to the CSA to find these bifurcations. First evaluations of the extended CSA (eCSA) showed reasonable results on segmenting the coronary tree using data sets of the Coronary Artery Algorithm Evaluation. (20 refs)
Main heading: Trees (mathematics)
Controlled terms: Algorithms - Bifurcation (mathematics) - Blood vessels - Computer graphics - Diagnosis - Heart - Image segmentation - Medical imaging - Semiconducting cadmium compounds - Volume rendering
Uncontrolled terms: Algorithm evaluation - Corkscrew algorithm - Coronary arteries - Coronary tree - Coronary tree tracking - Data sets - Elongated structures - Frame-work - Large data volumes - Medical diagnosis - Rotterdam - Segmentation algorithms
Classification Code: 921 Mathematics - 746 Imaging Techniques - 741.1 Light/Optics - 741 Light, Optics and Optical Devices - 723.5 Computer Applications - 921.4 Combinatorial Mathematics, Includes Graph Theory, Set Theory - 723.2 Data Processing and Image Processing - 712.1.2 Compound Semiconducting Materials - 461.6 Medicine and Pharmacology - 461.2 Biological Materials and Tissue Engineering - 461.1 Biomedical Engineering - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
33. Core-protected platinum monolayer shell high-stability electrocatalysts for fuel-cell cathodes
Sasaki, K. (1); Naohara, H. (2); Yun Cai (1); Yong Man Choi (1); Ping Liu (1); Vukmirovic, M.B. (1); Wang, J.X. (1); Adzic, R.R. (1)
Source: Angewandte Chemie International Edition, v 49, n 46, p 8602-7, 8 Nov. 2010; ISSN: 1433-7851; DOI: 10.1002/anie.201004287; Publisher: Wiley-VCH Verlag GmbH, Germany
Author affiliation: (1) Chem. Dept., Brookhaven Nat. Lab., Upton, NY, United States (2) Fuel Cell Syst. Dev. Div., Toyota Motor Corp., Susono, Japan
Abstract: Herein, we describe the mechanism of stabilization of new core/shell electrocatalysts illustrated by development of Pd and Pd9Au1 alloy core/Pt monolayer shell electrocatalysts with high activity and the very high stability that can facilitate their use in automotive fuel cells. We present an understanding of their properties that firmly establishes the concept of Pt monolayer catalysts that can address the future challenges of limited Pt resources. The concept is applicable for similar applications of other noble metals, and is demonstrated by our findings from accelerated fuel-cell tests of the electrocatalyst stability during 100000 and 200000 potential cycles with PtML/Pd/C and PtML/Pd9Au1/C, respectively. The data illustrate that the Pd core protects the Pt shell from dissolution. After 100000 or 200000 potential cycles, the electrocatalysts showed a small loss of ECSA and of catalytic activity, and a negligible loss of Pt. Under the same conditions, Pt/C catalysts suffer very large losses. (26 refs)
Inspec controlled terms: catalysis - electrochemical electrodes - fuel cells - gold alloys - monolayers - palladium - palladium alloys - platinum
Uncontrolled terms: fuel-cell cathodes - core-protected platinum monolayer shell - high-stability electrocatalysts - core-shell electrocatalysts - automotive fuel cells - monolayer catalysts - dissolution - Pd-Pd9Au-Pt
Classification Code: A8265J Heterogeneous catalysis at surfaces and other surface reactions - A6817 Monolayers and Langmuir-Blodgett films - A8630G Fuel cells - A8245 Electrochemistry and electrophoresis - B8410G Fuel cells
IPC Code: B01J - C25B11/00 - C25D17/10 - H01M4/00 - H01M8/00
Treatment: Practical (PRA) - Experimental (EXP)
Database: Inspec
Copyright 2012, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
34. Titania supported platinum catalyst with high electrocatalytic activity and stability for polymer electrolyte membrane fuel cell
Huang, S.Y. (1); Ganesan, P. (1); Jung, W.S. (1); Cadirov, N. (2); Popov, B.N. (1)
Source: ECS Transactions, v 33, n 1 PART 1, p 483-491, 2010, Polymer Electrolyte Fuel Cells 10, PEFC 10; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566778206; DOI: 10.1149/1.3484546; Conference: 10th Polymer Electrolyte Fuel Cell Symposium, PEFC 10 - 218th ECS Meeting, October 10, 2010 - October 15, 2010; Sponsor: Energy Technology (ETD); Physical and Analytical Electrochemistry (PAED); Battery (BATT); Ind. Electrochem. Electrochem. Eng. (IEEE); Publisher: Electrochemical Society Inc.
Author affiliation: (1) Center for Electrochemical Engineering, Department of Chemical Engineering, University of South Carolina, Columbia, SC 29208, United States (2) Department of Chemical Engineering, University of Massachusetts Amherst, Amherst, MA 01003, United States
Abstract: Titania supported Pt electrocatalysts (Pt/TiO2) were synthesized and investigated as alternative cathode catalysts for polymer electrolyte membrane fuel cells (PEMFCs). Transmission electron microscope (TEM) images revealed uniform distribution of Pt nanoparticles (dPt = 3-5 nm) on the TiO2 support. In-house developed accelerated durability test (ADT, continuous potential cycling between 0.6 and 1.4 V) in half-cell condition indicated nearly ten-fold higher ORR activity (1.20 mA cm-2) when compared to the Pt/C catalyst (0.13 mA cm-2). The Pt/C catalyst showed no activity in fuel cell testing after 2000 potential cycles due to severe carbon corrosion. Conversely, the Pt/TiO2 electrocatalyst showed only a small voltage loss (0.09 V at 0.8 A cm-2) even after 4000 cycles. The ADT results showed excellent stability for the Pt/TiO 2 electrocatalysts at high potentials in terms of minimum loss in the Pt electrochemical surface area (ECSA). ©The Electrochemical Society. (21 refs)
Main heading: Catalyst supports
Controlled terms: Catalyst activity - Electrocatalysts - Membranes - Platinum - Platinum alloys - Polyelectrolytes - Polymers - Proton exchange membrane fuel cells (PEMFC) - Titanium dioxide - Transmission electron microscopy
Uncontrolled terms: Carbon corrosion - Cathode catalyst - Durability test - Electrocatalytic activity and stability - Electrochemical surface area - Fuel-cell testing - High potential - Polymer electrolyte membrane fuel cells - Potential cycles - Potential cycling - Pt nanoparticles - Supported platinum catalysts - Supported Pt - TiO - Titania - Transmission electron microscope - Uniform distribution - Voltage loss
Classification Code: 951 Materials Science - 815.1.1 Organic Polymers - 815.1 Polymeric Materials - 804.2 Inorganic Compounds - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 741.3 Optical Devices and Systems - 702.2 Fuel Cells - 547.1 Precious Metals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
35. Three-dimensional Pt-on-Pd bimetallic nanodendrites supported on graphene nanosheet: Facile synthesis and used as an advanced nanoelectrocatalyst for methanol oxidation
Guo, Shaojun (1, 2); Dong, Shaojun (1, 2); Wang, Erkang (1, 2)
Source: ACS Nano, v 4, n 1, p 547-555, January 26, 2010; ISSN: 19360851, E-ISSN: 1936086X; DOI: 10.1021/nn9014483; Publisher: American Chemical Society
Author affiliation: (1) State Key Laboratory of Electroanalytical Chemistry, Changchun Institute of Applied Chemistry, Chinese Academy of Sciences, Changchun 130022, Jilin, China (2) Graduate School, Chinese Academy of Sciences, Beijing 100039, China
Abstract: Graphene nanosheet, the hottest material in physics and materials science, has been studied extensively because of its unique electronic, thermal, mechanical, and chemical properties arising from its strictly 2D structure and because of its potential technical applications. Particularly, these remarkable characteristics enable it to be a promising candidate as a new 2D support to load metal nanoparticles (NPs) for application in fuel cells. However, constructing high-quality graphene/bimetallic NP hybrids with high electrochemical surface area (ECSA) remains a great challenge to date. In this paper, we demonstrate for the first time a wet-chemical approach for the synthesis of high-quality three-dimensional (3D) Pt-on-Pd bimetallic nanodendrites supported on graphene nanosheets (TP-BNGN), which represents a new type of graphene/metal heterostructure. The resulting hybrids were characterized by atomic force microscopy (AFM), transmission electron microscopy (TEM), high-resolution TEM (HRTEM), energy-dispersive X-ray (EDX) spectroscopy, X-ray photoelectron spectroscopy (XPS), thermogravimetric analysis (TGA), Raman spectroscopy, and electrochemical technique. It is found that small single-crystal Pt nanobranches supported on Pd NCs with porous structure and good dispersion were directly grown onto the surface of graphene nanosheets, which exhibits high electrochemical active area. Furthermore, the number of nanobranches for Pt-on-Pd bimetallic nanodendrites on the surface of graphene nanosheets could be easily controlled via simply changing the synthetic parameters, thus resulting in the tunable catalytic properties. Most importantly, the electrochemical data indicate that the as-prepared graphene/bimetallic nanodendrite hybrids exhibited much higher electrocatalytic activity toward methanol oxidation reaction than the platinum black (PB) and commercial E-TEK Pt/C catalysts. © 2010 American Chemical Society. (43 refs)
Main heading: X ray photoelectron spectroscopy
Controlled terms: Atomic force microscopy - Atomic spectroscopy - Chemical properties - Communication channels (information theory) - Crystal structure - Fuel cells - Graphene - Graphite - High resolution transmission electron microscopy - Mechanical properties - Metal fuels - Methanol - Molecular orbitals - Nanosheets - Oxidation - Palladium - Platinum - Raman spectroscopy - Surfaces - Synthesis (chemical) - Thermogravimetric analysis - Three dimensional - Two dimensional
Uncontrolled terms: 2D structures - Active area - Bimetallic nanostructure - Bimetallic nanostructures - Catalytic properties - Electrocatalytic activity - Electrochemical data - Electrochemical surface area - Electrochemical techniques - Energy dispersive x-ray - Facile synthesis - Graphene nanosheet - Graphenes - Heterostructures - High quality - High-resolution TEM - Metal nanoparticles - Methanol Oxidation - Methanol oxidation reactions - Nanodendrites - Platinum black - Porous structures - Potential technical applications - Synthetic parameters - TEM - Three-dimensional (3D) - Wet-chemical approach
Classification Code: 951 Materials Science - 801.4 Physical Chemistry - 802.2 Chemical Reactions - 804 Chemical Products Generally - 804.1 Organic Compounds - 812.2 Refractories - 813.2 Coating Materials - 902.1 Engineering Graphics - 931 Classical Physics; Quantum Theory; Relativity - 931.1 Mechanics - 931.3 Atomic and Molecular Physics - 933 Solid State Physics - 933.1.1 Crystal Lattice - 801 Chemistry - 423 Non Mechanical Properties and Tests of Building Materials - 482.2 Minerals - 524 Solid Fuels - 531.2 Metallography - 547.1 Precious Metals - 761 Nanotechnology - 604.2 Machining Operations - 716.1 Information Theory and Signal Processing - 723.5 Computer Applications - 741.1 Light/Optics - 741.3 Optical Devices and Systems - 702.2 Fuel Cells
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
36. Membrane electrode assembly degradation by dry/wet gas on a PEM fuel cell
Kang, Jungtak (1); Kim, Junbom (1)
Source: International Journal of Hydrogen Energy, v 35, n 23, p 13125-13130, December 2010; ISSN: 03603199; DOI: 10.1016/j.ijhydene.2010.04.077; Publisher: Elsevier Ltd
Author affiliation: (1) School of Chemical Engineering and Bioengineering, Ulsan University, Ulsan 680-749, Korea, Republic of
Abstract: The vehicle that use a Polymer Electrolyte Membrane Fuel Cell (PEMFC) as a power source frequently experiences start up and shut down. Membrane Electrode Assembly (MEA) degradation by wet/dry gas repetition was studied for vehicle start up and shut down. The time of the wet/dry equilibrium state on the PEMFC was measured with High Frequency Resistance (HFR). The gas injection time was 20 min and 5 min for dry gas and wet gas, respectively. An experiment was carried out using electrochemical methods and a cross-section of the MEA was visualized with a Field Emission Scanning Electron Microscope (FE-SEM). After 1200 wet/dry cycles, the performance of the cell decreased by 45.7% to its current density of 800 mA/cm2. Ohmic and charge transfer resistances of the cell increased in the Electrochemical Impedance Spectroscopy (EIS). The crossover current of hydrogen also increased in the linear sweep voltammetry (LSV). The reduction of the electrochemical active surface area (ECSA) was confirmed through cyclic voltammetry (CV). The interface among the membrane, catalyst layer, and gas diffusion layer was separated and significantly deteriorated compared with fresh MEA. © 2009 Professor T. Nejat Veziroglu. Published by Elsevier Ltd. All rights reserved. (15 refs)
Main heading: Phase interfaces
Controlled terms: Charge transfer - Cyclic voltammetry - Degradation - Diffusion in gases - Electrochemical corrosion - Electrochemical impedance spectroscopy - Field emission - Gases - Ion exchange - Proton exchange membrane fuel cells (PEMFC) - Scanning electron microscopy
Uncontrolled terms: Catalyst layers - Charge transfer resistance - Cross-over currents - Dry gas - Electrochemical active surface areas - ELectrochemical methods - Equilibrium state - Field emission scanning electron microscopes - Gas diffusion layers - Gas injection - High frequency resistance - Linear sweep voltammetry - Membrane electrode assemblies - PEM fuel cell - PEMFC - Polymer electrolyte membrane fuel cells - Power sources - Shut down - Start-ups - Wet gas - Wet/dry cycles - Wet/dry gas repetition
Classification Code: 702.2 Fuel Cells - 801 Chemistry - 801.4.1 Electrochemistry - 802.2 Chemical Reactions - 931.2 Physical Properties of Gases, Liquids and Solids - 932 High Energy Physics; Nuclear Physics; Plasma Physics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
37. Electrocatalytic activity and stability of niobium-doped titanium oxide supported platinum catalyst for polymer electrolyte membrane fuel cells
Huang, Sheng-Yang (1); Ganesan, Prabhu (1); Popov, Branko N. (1)
Source: Applied Catalysis B: Environmental, v 96, n 1-2, p 224-231, April 26, 2010; ISSN: 09263373; DOI: 10.1016/j.apcatb.2010.02.025; Publisher: Elsevier
Author affiliation: (1) Center for Electrochemical Engineering, Department of Chemical Engineering, University of South Carolina, Columbia, SC 29208, United States
Abstract: Rutile phase niobium-doped titanium oxide [NbxTi(1 - x)O2, x = 0.25] with a high electrical conductivity (1.11 S cm-1) was synthesized and investigated as a cathode catalyst support material for polymer electrolyte membrane fuel cells (PEMFCs). The TEM image of the Pt/NbxTi(1 - x)O2 catalyst revealed that Pt particles (dPt = 3-4 nm) were deposited on the NbxTi(1 - x)O2 support using a borohydride reduction method. The Pt/NbxTi(1 - x)O2 catalyst showed comparable oxygen reduction reaction (ORR) activity to that of a commercial Pt/C catalyst (E-TEK) when tested in rotating ring-disk electrode (RRDE). The results of an accelerated durability test (ADT, continuous cycling between 0.6 and 1.4 V) in RRDE indicated high stability for the Pt/NbxTi(1 - x)O2 electrocatalysts at high potentials in terms of minimum loss in Pt electrochemical surface area (ECSA). Furthermore, the Pt/NbxTi(1 - x)O2 showed nearly 10-fold higher ORR activity after potential cycling tests when compared to the Pt/C catalyst (1.19 and 0.13 mA cm-2 for Pt/NbxTi(1 - x)O2 and Pt/C, respectively). The Pt/C catalyst showed no activity in fuel cell testing after 1000 cycles due to severe carbon corrosion and subsequent disintegration of the catalyst layer. Conversely, the Pt/NbxTi(1 - x)O2 catalyst showed only a small voltage loss (0.11 V at 0.6 A cm-2) even after 3000 cycles. Based on the ADT results, the Pt/NbxTi(1 - x)O2 electrocatalyst synthesized in this investigation offers a new approach to improve the reliability and durability of PEM-based fuel cell cathode catalysts. © 2010 Elsevier B.V. All rights reserved. (43 refs)
Main heading: Catalyst supports
Controlled terms: Catalyst activity - Corrosion resistance - Durability - Electric conductivity - Electrocatalysts - Electrolysis - Electrolytic reduction - Membranes - Metallic compounds - Niobium - Niobium oxide - Oxide minerals - Oxygen - Platinum - Platinum alloys - Polyelectrolytes - Proton exchange membrane fuel cells (PEMFC) - Protons - Titanium - Titanium oxides
Uncontrolled terms: Cathode catalyst - Cathode catalyst support - Metal oxide - Metal oxides - Oxygen reduction reaction
Classification Code: 803 Chemical Agents and Basic Industrial Chemicals - 804 Chemical Products Generally - 804.1 Organic Compounds - 804.2 Inorganic Compounds - 802.2 Chemical Reactions - 815.1.1 Organic Polymers - 931.3 Atomic and Molecular Physics - 932.1 High Energy Physics - 951 Materials Science - 817.1 Polymer Products - 801.4.1 Electrochemistry - 482.2 Minerals - 533.1 Ore Treatment - 539.1 Metals Corrosion - 542.3 Titanium and Alloys - 421 Strength of Building Materials; Mechanical Properties - 547.1 Precious Metals - 701.1 Electricity: Basic Concepts and Phenomena - 702 Electric Batteries and Fuel Cells - 702.2 Fuel Cells - 549.3 Nonferrous Metals and Alloys excluding Alkali and Alkaline Earth Metals
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
38. Structure-activity relationship of dealloyed PtCo3 and PtCu 3 nanoparticle electrocatalyst for oxygen reduction reaction in PEMFC
Oezaslan, M. (1); Hasché, F. (1); Strasser, P. (1)
Source: ECS Transactions, v 33, n 1 PART 1, p 333-341, 2010, Polymer Electrolyte Fuel Cells 10, PEFC 10; ISSN: 19385862, E-ISSN: 19386737; ISBN-13: 9781566778206; DOI: 10.1149/1.3484531; Conference: 10th Polymer Electrolyte Fuel Cell Symposium, PEFC 10 - 218th ECS Meeting, October 10, 2010 - October 15, 2010; Sponsor: Energy Technology (ETD); Physical and Analytical Electrochemistry (PAED); Battery (BATT); Ind. Electrochem. Electrochem. Eng. (IEEE); Publisher: Electrochemical Society Inc.
Author affiliation: (1) Department of Chemistry, Technical University Berlin, 10623 Berlin, Germany
Abstract: We report a synthesis and study on carbon supported PtCo3 and PtCu3 alloy nanoparticle catalyst for ORR. The chemical composition of alloys was carried out with EDS. The electrochemical measurements were conducted using a thin-film RDE method. Recently, we have demonstrated that dealloyed PtCu3 nanoparticle exhibits 3-4 times higher mass activity and 4 times higher specific activity for ORR than Pt. Here, the dealloyed PtCo3 also shows about 4 fold increase in specific activity, but 2-3 fold in mass activity than Pt/C. The in-situ generated Pt rich surface of Co rich Pt alloy nanoparticle catalyst tested for ORR activity. Geometric effects based on Pt surface constitution were assumed for the high activity for ORR. PtCo3 nanoparticle catalyst seems to be an interesting opportunity for further studies for ORR. The thermodynamic instable deposition of Co and the robust Pt ECSA are probably the large advantages to other Pt alloys. ©The Electrochemical Society. (19 refs)
Main heading: Platinum alloys
Controlled terms: Alloys - Catalyst activity - Electrocatalysts - Electrolytic reduction - Fuel cells - Nanoparticles - Oxygen - Platinum - Polyelectrolytes - Synthesis (chemical)
Uncontrolled terms: Alloy nanoparticle - Chemical compositions - Electrochemical measurements - Geometric effects - High activity - In-situ - Mass activity - Nanoparticle catalysts - Oxygen reduction reaction - Pt alloy - Specific activity - Structure activity relationships
Classification Code: 815.1.1 Organic Polymers - 804 Chemical Products Generally - 803 Chemical Agents and Basic Industrial Chemicals - 802.2 Chemical Reactions - 933 Solid State Physics - 761 Nanotechnology - 702.2 Fuel Cells - 547.1 Precious Metals - 531.1 Metallurgy - 708 Electric and Magnetic Materials
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
39. Pt-Ru/CeO2/carbon nanotube nanocomposites: An efficient electrocatalyst for direct methanol fuel cells
Sun, Zhenyu (1); Wang, Xiang (1); Liu, Zhimin (1); Zhang, Hongye (1); Yu, Ping (1); Mao, Lanqun (1)
Source: Langmuir, v 26, n 14, p 12383-12389, July 20, 2010; ISSN: 07437463, E-ISSN: 15205827; DOI: 10.1021/la101060s; Publisher: American Chemical Society
Author affiliation: (1) Beijing National Laboratory for Molecular Sciences, Institute of Chemistry, Chinese Academy of Sciences, Beijing 100190, China
Abstract: Pt-Ru/CeO2multiwalled carbon nanotube (MWNT) electrocatalysts were prepared using a rapid sonicationfacilitated deposition method and were characterized by X-ray diffraction (XRD), X-ray photoemission spectroscopy (XPS), transmission electron microscopy (TEM), energy-dispersive spectroscopy (EDS), and voltammetry. Morphological characterization by TEM revealed thatCeO2 nanoparticles (NPs) were in intimate contact with Pt-Ru NPs, and both were highly dispersed on the exteriors of nanotubes with a small size and a very narrow size distribution. Compared with the Pt-Ru/MWNT and Pt/MWNT electrocatalysts, the as-prepared Pt-Ru/C eO2/MWNT exhibited a significantly improved electrochemically active surface area (ECSA) and a remarkably enhanced activity toward methanol oxidation. The effects of the Pt-Ru loading and the Pt-to-Ru molar ratio on the electrocatalytic activity of Pt-Ru/ CeO 2/MWNTfor methanol oxidation were investigated.Wefound that a maximum activity towardmethanol oxidation reached at the 10 wt%of Pt-Ru loading and 1:1 of Pt-to-Ru ratio. Moreover, the role of CeO2 in the catalysts for the enhancement of methanol oxidation was discussed in terms of both bifunctional mechanism and electronic effects.© 2010 American Chemical Society. (41 refs)
Main heading: Platinum
Controlled terms: Electrocatalysts - Emission spectroscopy - Energy dispersive spectroscopy - Fuel cells - Methanol - Methanol fuels - Multiwalled carbon nanotubes (MWCN) - Nanocomposites - Nanotubes - Oxidation - Transmission electron microscopy - X ray diffraction
Uncontrolled terms: Bifunctional mechanisms - Deposition methods - Electrocatalytic activity - Electrochemically active surface areas - Electronic effects - Methanol Oxidation - Molar ratio - Morphological characterization - Narrow size distributions - Small size - TEM - X ray photoemission spectroscopy
Classification Code: 933 Solid State Physics - 804.1 Organic Compounds - 803 Chemical Agents and Basic Industrial Chemicals - 802.2 Chemical Reactions - 933.1.1 Crystal Lattice - 801 Chemistry - 741.3 Optical Devices and Systems - 702.2 Fuel Cells - 547.1 Precious Metals - 761 Nanotechnology
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
40. Identity management mismatch challenges in the Danish municipality administration system
Schaarup, M. (1); Christensen, H.B. (1)
Source: Software Architecture. Proceedings 4th European Conference, ECSA 2010, p 476-9, 2010; ISBN-13: 978-3-642-15113-2; Conference: Software Architecture. 4th European Conference, ECSA 2010, 23-26 Aug. 2010, Copenhagen, Denmark; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci., Aarhus Univ., Aarhus, Denmark
Abstract: Integrating a COTS product in a company’s product portfolio is appealing from a business perspective but highly challenging from the perspective of the software architecture. In this paper we outline research challenges regarding authorization in the identity management part of the Danish municipality administration system, called Opus BRS, a system that integrates SAP, legacy mainframe systems, and other systems present in the individual municipalities. Each of these systems defines their own access control model and architecture, which leads to architectural mismatch that impacts security, usability, as well as maintainability. We outline a three-year research project and discuss our research method that will include elements of action research as well as experiments using architectural prototyping. The project is carried out in cooperation with KMD, one of the largest Danish IT companies, who is the producer of the Opus system. (12 refs)
Inspec controlled terms: administrative data processing - software architecture - software prototyping
Uncontrolled terms: identity management mismatch - Danish municipality administration system - COTS product - product portfolio - software architecture - SAP - legacy mainframe systems - access control model - KMD - Opus system
Classification Code: C7100 Business and administrative computing - C6110B Software engineering techniques - C0310F Software management
IPC Code: G06F9/44 - G06Q10/00
Treatment: Practical (PRA)
Database: Inspec
Copyright 2010, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
41. An ADL-Approach to Specifying and Analyzing Centralized-Mode Architectural Connection
Guoxin Su (1); Mingsheng Ying (1); Chengqi Zhang (1)
Source: Software Architecture. Proceedings 4th European Conference, ECSA 2010, p 8-23, 2010; ISBN-13: 978-3-642-15113-2; Conference: Software Architecture. 4th European Conference, ECSA 2010, 23-26 Aug. 2010, Copenhagen, Denmark; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Centre for Quantum Comput. & Intell. Syst., Univ. of Technol., Sydney, NSW, Australia
Abstract: A rigorous paradigm coordinating components is important in the design stage of large-scale software engineering. In this paper we propose a new Architecture Description Language, called ACDL, to represent the centralized-mode architectural connection in which all components are linked by a single connector. Following one usual approach to architectural description, in which component types and components are distinguished, and connectors integrate behaviors of components by specifying their coordination protocols, ACDL describes connectors in such a way that connectors are insensitive to the numbers of attached same-type components. Based on ACDL, we develop analytic techniques to facilitate the system checking of temporal properties of an architecture. In particular, our method shows to what extent one can add, delete and replace components without making the whole system lose desired temporal properties, and improves the system checking in several ways, for example enhancing the use of previous checking results to deal with new checking problems. (19 refs)
Inspec controlled terms: program verification - software architecture - specification languages
Uncontrolled terms: design stage - large-scale software engineering - architecture description language - ACDL language - centralized-mode architectural connection - coordination protocol - system checking - temporal property
Classification Code: C6110B Software engineering techniques - C6110F Formal methods - C6150G Diagnostic, testing, debugging and evaluating systems
IPC Code: G06F9/44 - G06F11/36
Treatment: Practical (PRA)
Database: Inspec
Copyright 2010, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
42. Ontological Analysis for Generating Baseline Architectural Descriptions
Kiwelekar, A.W. (1); Joshi, R.K. (1)
Source: Software Architecture. Proceedings 4th European Conference, ECSA 2010, p 409-16, 2010; ISBN-13: 978-3-642-15113-2; Conference: Software Architecture. 4th European Conference, ECSA 2010, 23-26 Aug. 2010, Copenhagen, Denmark; Publisher: Springer-Verlag, Berlin, Germany
Author affiliation: (1) Dept. of Comput. Sci. & Eng., Indian Inst. of Technol. Bombay, Mumbai, India
Abstract: Mapping elements from an application domain to architectural abstractions is a significant architecture description activity from the point of view of seamlessness in descriptions. For establishing such a mapping of domain elements to architectural abstractions, an approach based on ontological analysis is presented. The central idea of the approach is to establish the mapping through a uniform framework of understanding that is applicable over the problem domain as well as the solution domain. The reference ontology used is an adaptation of Bunge-Wand-Weber (BWW) ontology. Typically, an element from an application domain is mapped with an architectural abstraction when both represent the same phenomena from BWW ontology. The approach is realized as a model-driven transformation process. (18 refs)
Inspec controlled terms: ontologies (artificial intelligence)
Uncontrolled terms: ontological analysis - architectural descriptions - architectural abstractions - reference ontology - Bunge-Wand-Weber - BWW
Classification Code: C6170K Knowledge engineering techniques
IPC Code: G06F15/18 - G06N5/04
Treatment: Practical (PRA)
Database: Inspec
Copyright 2010, The Institution of Engineering and Technology
Data Provider: Engineering Village
	
43. Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics): Preface
Babar, Muhammad Ali ; Gorton, Ian
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p v-vi, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
44. Independently extensibile contexts
Rytter, Martin (1); Jrgensen, Bo Nrregaard (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 327-334, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_25; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Maersk Mc-Kinney Moller Institute, University of Southern Denmark, Campusvej 55, Odense M 5230, Denmark
Abstract: Building and maintaining non-trivial software systems that are independently extensible is a difficult task. This is because the combination of independent extensions tends to produce conflicts that are difficult to anticipate, and to which no general resolution strategy exists. In this paper, we show how some of these conflicts can be avoided if domain-specific contexts are modeled using a representation that is open for extension and safe for sharing among independent extensions. © 2010 Springer-Verlag Berlin Heidelberg. (17 refs)
Main heading: Software architecture
Uncontrolled terms: Context - Domain specific - Independent extensibility - Non-trivial - Openness - Resolution strategy - Sharing - Software systems
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
45. Facilitating the selection of architectural patterns by means of a marked requirements model
Berrocal, Javier (1); García-Alonso, José (1); Murillo, Juan Manuel (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 384-391, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_32; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Escuela Politécnica, University of Extremadura, Av. Universidad S/N, Cáceres 10071, Spain
Abstract: Architecture definition requires architects who are highly qualified in both the use of architectural patterns and the analysis of the application’s requirements. This is because they have to identify what patterns satisfy the application’s functional requirements (FR) and quality attributes (QA), and the interrelationships between them. However, since QAs and FRs are usually addressed separately, their interrelationships are not detailed in full. This situation means that the architect has to expend considerable effort on their identification, with the risk of misinterpretations that lead to an inappropriate choice of patterns. We here present a model that allows the FRs to be marked with the constraints imposed by the QAs. The marks are conceived to be re-used during the architecture definition. The model brings knowledge of the requirements and their relationships closer to the architect, allowing patterns aligned with the requirements to be identified with less effort. © 2010 Springer-Verlag Berlin Heidelberg. (18 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Requirements engineering
Uncontrolled terms: Architectural pattern - Functional requirement - Quality attributes - Requirements Models
Classification Code: 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
46. Identifying architectural connectors through formal concept analysis of communication primitives
Kiwelekar, Arvind W. (1); Joshi, Rushikesh K. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 515-518, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_53; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science and Engineering, Indian Institute of Technology Bombay, Mumbai 400076, India
Abstract: A set of interaction primitives and properties are systematically analyzed through Formal Concept Analysis (FCA) leading to identification of connector types and relationships among them. The approach is illustrated through a set of communication primitives from the web services modeling languages. The identified concepts are elaborated in terms of UML/OCL descriptions. The FCA based analysis and OCL descriptions can be used to automatically build an ontology of architectural connectors. © 2010 Springer-Verlag Berlin Heidelberg. (4 refs)
Main heading: Software architecture
Controlled terms: Information analysis - Ontology - Web services
Uncontrolled terms: Architectural connectors - Communication primitives - Formal concept analysis - Modeling languages
Classification Code: 723 Computer Software, Data Handling and Applications - 903 Information Science - 903.1 Information Sources and Analysis
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
47. Dynamic architectural constraints monitoring and reconfiguration in service architectures
John, Jose (1); Wang, Mingxue (1); Pahl, Claus (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 311-318, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_23; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) School of Computing, Dublin City University, Dublin, Ireland
Abstract: Service-oriented architecture is an architectural approach that can be applied for building autonomous service systems dynamically to satisfy on-demand business requests. During the execution of service compositions, architectural constraint violations relating to functional and non-fucntional system properties need to be handled intelligently and autonomously, possibly requiring architectural reconfigurations. We propose integrated architectural constraint violation handling to deal with architectural quality problems through dynamic reconfiguration. We concentrate on service replacement selection as a remedial strategy for a possible quality violation requiring architectural remedies. © 2010 Springer-Verlag Berlin Heidelberg. (12 refs)
Main heading: Software architecture
Controlled terms: Dynamic models - Information services
Uncontrolled terms: Architectural approach - Architectural constraints - Architectural quality - Dynamic re-configuration - Remedial strategies - Replacement selections - Service architecture - Service compositions - Service systems - System property
Classification Code: 723.1 Computer Programming - 903.4 Information Services - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
48. Experiences in making architectural decisions during the development of a New Base Station platform
Savolainen, Juha (1); Kuusela, Juha (2); Männistö, Tomi (3); Nyyssönen, Aki (4)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 425-432, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_37; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Nokia Research Center, Itämerenkatu 11-13, Helsinki 00180, Finland (2) Nokia Devices, Keilalahdentie 4, Espoo 02150, Finland (3) Aalto University, Tekniikantie 14, Espoo 02150, Finland (4) Nokia Siemens Networks, Kaapelitie 4, Oulu 90650, Finland
Abstract: Creating architecture for a complex telecommunication system is a difficult task and requires expertise of many different stakeholders. The software architecture design process relies on understanding the architecturally significant requirements (ASRs) for the system under design. This paper describes experiences in creating a new base station product line. A goal was to create a process to facilitate fulfillment of ASRs during the development of the product line. The approach proved to be feasible for developing large-scale systems in the telecommunications infrastructure domain. This paper describes the approach taken, experiences gathered during the development process and promotes the idea of defining concrete ASRs for each project and refining them through architecture for all relevant subsystems. © 2010 Springer-Verlag Berlin Heidelberg. (7 refs)
Main heading: Software architecture
Controlled terms: Base stations - Design - Refining - Software design
Uncontrolled terms: Architectural decision - Design decisions - Development process - Product-lines - Refinement - Requirements process - Software architecture design - Station platforms - Telecommunications infrastructures
Classification Code: 408 Structural Design - 716.3 Radio Systems and Equipment - 723.1 Computer Programming - 811.1.1 Papermaking Processes
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
49. Modelling changes and data transfers for architecture-based runtime evolution of distributed applications
Phung-Khac, An (1); Gilliot, Jean-Marie (1); Segarra, Maria-Teresa (1); Beugnard, Antoine (1); Kaboré, Eveline (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 392-400, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_33; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, Télécom Bretagne, Technopôle Brest-Iroise, Brest Cedex 3, CS 83818 - 29238, France
Abstract: Architecture-based approaches for runtime evolution enable software systems to dynamically move between consistent architectural variants. Successful runtime evolution must enable the new, replacement variant to be initialized with the data of the replaced one. In distributed systems, however, the initialization is complex and may be time-consuming due to data transfers across sites. Identifying systems’ components subject to change is then critical for planning evolution and reducing replacement actions, avoid unnecessary data transfers, and then, reduce downtime of system services. Addressing this issue, this paper presents an approach to runtime evolution of distributed applications. We present how a development process allows to 1) specify architectural variants of an application and 2) identify components subject to change and operations for transferring data managed by these components. Moreover, the design information is used at runtime to automatically plan evolution. © 2010 Springer-Verlag Berlin Heidelberg. (19 refs)
Main heading: Software architecture
Controlled terms: Biology - Data transfer
Uncontrolled terms: Design information - Development process - Distributed applications - Distributed systems - Identifying system - Runtime evolution - Runtimes - Software systems - System services
Classification Code: 461.9 Biology - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
50. A formal approach to enforcing consistency in self-adaptive systems
Kacem, Najla Hadj (1); Kacem, Ahmed Hadj (1); Drira, Khalil (2, 3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 279-294, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_21; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) ReDCAD Laboratory, University of Sfax, B.P.1088, Sfax 3018, Tunisia (2) CNRS, LAAS, 7 Avenue du Colonel Roche, Toulouse F-31077, France (3) UPS, INSA, INP, ISAE, LAAS, Université de Toulouse, Toulouse F-31077, France
Abstract: The ability of systems to adapt is increasingly seen as a necessary underlying capability for modern software systems. The resulting self-adaptive systems are not only supposed to cope with changes, but must also preserve their consistency. To deal with such challenges in a systematic way, the design of self-adaptive systems needs to be put on a formal basis. In this paper, we argue for the benefits of a formal yet extensible approach to behavioural adaptations of component-based system architectures. This approach provides the usage of alternative adaptation processes rather than being limited to a single one. The application of Coloured Petri Nets for modelling and analysing the adaptation processes proves to be useful to trust consistency preservation. © 2010 Springer-Verlag Berlin Heidelberg. (14 refs)
Main heading: Software architecture
Controlled terms: Adaptive systems - Petri nets
Uncontrolled terms: Adaptation process - Coloured Petri Nets - Component based systems - Consistency preservation - Formal approach - Self-adaptive system - Software systems
Classification Code: 723.1 Computer Programming - 731.1 Control Systems - 921.4 Combinatorial Mathematics, Includes Graph Theory, Set Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
51. An architectural approach to composing reputation-based distributed services
Phoomvuthisarn, Suronapee (1, 3, 4); Liu, Yan (2, 3); Zhu, Liming (1, 3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 133-149, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_12; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) National ICT Australia (NICTA), Australia (2) Pacific Northwest National Laboratory, United States (3) School of Computer Science and Engineering, University of New South Wales, Australia (4) Mahanakorn University of Technology, Bangkok, Thailand
Abstract: Reputation-Based Trust (RBT) model with embedded incentive mechanisms provides an accurate quantitative measurement for services choosing their partners based on fair ratings accumulated from users. These mechanisms stimulate services to offer ratings truthfully, otherwise they lose their gains or even receive penalties. However, leveraging such mechanisms in distributed environments is a challenging task by its centralized nature. In this paper, we propose a new architecture development that combines relevant architectural components to make trust systems highly scalable with the auction mechanisms’ capability to prevent lie. In this architecture we define an auction-based trust negotiation protocol that guides the interactions of distributed services and realize it in the distributed trust framework. Our architecture scales efficiently for increasing numbers of services interacting with the system, while still achieving protection against untruthful incentives even when a majority of ratings are unfair. An example of a supply chain is devised with empirical evidence collected. © 2010 Springer-Verlag Berlin Heidelberg. (18 refs)
Main heading: Software architecture
Controlled terms: Network architecture - Supply chains
Uncontrolled terms: Architectural approach - Architectural components - Auction mechanisms - Distributed environments - Distributed service - Empirical evidence - Incentive mechanism - Quantitative measurement - Trust frameworks - Trust negotiations - Trust systems
Classification Code: 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
52. Context-aware quality model driven approach: A new approach for quality control in pervasive computing environments
Alti, Adel (1); Boukerram, Abdellah (1); Roose, Philippe (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 441-448, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_39; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Computer Science Departement, Engineering Faculty, Ferhat Abbas University of Setif, Setif 19000, Algeria (2) LIUPPA / IUT Bayonne, 2 Allée du Parc Montaury, Anglet 64600, France
Abstract: This paper presents extension of MDA called Context-aware Quality Model Driven Architecture (CQ-MDA) which can be used for quality control in pervasive computing environments. The proposed CQ-MDA approach based on ContextualArchRQMM (Contextual ARCHitecture Quality Requirement MetaModel), being an extension to the MDA, allows for considering quality and resources-awareness while conducting the design process. The main idea of presented extension consists in three abstractions levels: PIM (Platform Independent Model), CPIM (Contextual Platform Independent Model) and CPSM (Contextual Platform Specific Model). At the PIM level, a model decomposed into a two interrelated models: software architecture artifacts, which reflect functional requirements and quality model. At the CPIM level a simultaneous transformation of these two models with contextual information details is elaborated and then refined to a specific platform at the CPSM level. Such a procedure ensures that the transformation decisions should be based on the quality assessment of the created models. © 2010 Springer-Verlag Berlin Heidelberg. (15 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Quality control - Ubiquitous computing
Uncontrolled terms: ADL - Context - Context-Aware - Contextual information - Design process - Functional requirement - Interrelated models - MDA - MDA approach - Meta model - New approaches - Pervasive computing environment - PIM level - Platform independent model - Platform specific model - Quality assessment - Quality models - Quality requirements
Classification Code: 723 Computer Software, Data Handling and Applications - 913.3 Quality Assurance and Control
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
53. Integrating requirements and design decisions in architecture representation
Weinreich, Rainer (1); Buchgeher, Georg (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 86-101, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_9; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Johannes Kepler University Linz, Austria (2) Software Competence Center, Hagenberg, Austria
Abstract: It has been proposed to make architectural design decisions first-class entities in software architecture representation. The actual means of capturing, representing, and managing architectural design decisions is still an open issue of research. We present an approach for capturing requirements and design decisions during design and development. We integrate design decisions, requirements, scenarios, and their relationships along with other architectural elements directly in a single, consistent, and formally defined architecture model. Capturing, visualizing, and tracing of architectural knowledge are supported by an integrated set of tools working on this model. The approach supports comprehensive tracing between requirements, design decisions, other architectural elements, and implementation artifacts, impact analysis, and architecture analysis and evaluation. © 2010 Springer-Verlag Berlin Heidelberg. (27 refs)
Main heading: Software architecture
Controlled terms: Architectural design - Decision making - Knowledge management
Uncontrolled terms: Architectural design decisions - Architectural element - Architectural knowledge - Architecture analysis - Architecture models - Design and Development - Design decisions - Impact analysis - Software Architecture Models
Classification Code: 402 Buildings and Towers - 723.1 Computer Programming - 723.5 Computer Applications - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
54. Towards architecture-centric software generation
Lung, Chung-Horng (1); Balasubramaniam, Balasangar (2); Selvarajah, Kamalachelva (1); Elankeswaran, Poopalasinkam (2); Gopalasundaram, Umatharan (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 38-52, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_6; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Systems and Computer Engineering, Carleton University, Ottawa, ON, Canada (2) Nortel Networks, Ottawa, ON, Canada
Abstract: Architecture-centric software generation has the potential to support flexible design and large-scale reuse. This paper describes the development of an architecture-centric framework that consists of multiple architecture alternatives, from which the architect can select and generate a working prototype in a top-down manner through a user interface rather than building it from scratch. The framework is primarily built with well-understood design patterns in distributed and concurrent computing. The development process involves extensive domain analysis, variability management, and bottom-up component engineering effort. The framework enables the architect or designer to effectively conduct upfront software architecture analysis and/or rapid architectural prototyping. © 2010 Springer-Verlag Berlin Heidelberg. (27 refs)
Main heading: Software architecture
Controlled terms: Computer software reusability - Design - User interfaces
Uncontrolled terms: Concurrency - Domain analysis - Generative techniques - Patterns - Variability management
Classification Code: 408 Structural Design - 722.2 Computer Peripheral Equipment - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
55. On the role of architectural styles in improving the adaptation support of middleware platforms
Esfahani, Naeem (1); Malek, Sam (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 433-440, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_38; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, George Mason University, United States
Abstract: Modern middleware platforms provide the applications deployed on top of them with facilities for their adaptation. However, the level of adaptation support provided by the state-of-the-art middleware solutions is often limited to dynamically loading and off-loading of software components. Therefore, it is left to the application developers to handle the details of change such that the system’s consistency is not jeopardized. In this paper, we present an approach that addresses the current shortcomings by utilizing the information encoded in a software system’s architectural style. This information drives the development of adaptation patterns, which could be employed to enhance the adaptation support in middleware platforms. The patterns specify both the exact sequence of changes and the time at which those changes need to occur. © 2010 Springer-Verlag Berlin Heidelberg. (10 refs)
Main heading: Software architecture
Controlled terms: Architecture - Dynamic loads - Middleware
Uncontrolled terms: Adaptation Patterns - Application developers - Architectural style - Middleware platforms - Off-loading - Software component - Software systems
Classification Code: 402 Buildings and Towers - 408.1 Structural Design, General - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
56. A classification of value for software architecture decisions
Eklund, Ulrik (1); Arts, Thomas (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 368-375, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_30; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Applied IT, Chalmers Univ. of Technology, Göteborg University, Sweden
Abstract: This paper introduces a classification for decisions originating from work performed by architects. With the creation of a new architecture, all observed decisions were documented using an existing taxonomy extended with the introduced classification. In the first four months, 80 decisions were documented. Not all decisions have the same value for the architecture and one needed a classification to reason about importance of decisions. After realization of the first increment of the architecture a sanity check was performed: The architects showed how the six most important design artefacts and the fifteen most important architectural constraints and prerequisites were related. The relationship was via decisions and the classification helps to reduce the work to make and maintain this connection over time. The classification is dynamic and over time decisions can be classified differently. This enables architectural learning by pointing out which decisions were taken too early or had little impact. © 2010 Springer-Verlag Berlin Heidelberg. (8 refs)
Main heading: Software architecture
Uncontrolled terms: Architectural constraints - Architecture decisions - Sanity check
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
57. Automated detection of least privilege violations in software architectures
Scandariato, Riccardo (1); Buyens, Koen (1); Joosen, Wouter (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 150-165, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_13; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) IBBT-DistriNet, Katholieke Universiteit Leuven, Leuven 3001, Belgium
Abstract: Due to the lack of both precise definitions and effective software engineering methodologies, security principles are often neglected by software architects, resulting in potentially high-risk threats to the systems. This work lays the formal foundations for the understanding of the least privilege (LP) principle in software architectures and provides a technique to identify LP violations. The proposed approach is supported by tools and has been validated in four case studies, one of which is presented in detail in this paper. © 2010 Springer-Verlag Berlin Heidelberg. (21 refs)
Main heading: Software architecture
Uncontrolled terms: Architectural analysis - Automated detection - Formal foundation - Least privilege - Precise definition - Security - Security principles - Software architects - Software engineering methodologies
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
58. Using domain knowledge to boost software architecture evaluation
Eloranta, Veli-Pekka (1); Koskimies, Kai (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 319-326, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_24; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Software Systems, Tampere University of Technology, Finland
Abstract: Benefits of scenario-based software architecture evaluation such as ATAM are widely recognized. However, full-scale software architecture evaluation is resource and time consuming. In this paper we propose a technique to facilitate the creation of scenarios in a particular domain using a conceptual model especially targeted for architecture evaluation. The technique supports the finding of general, system-independent scenarios and the use of general scenarios in new evaluations. If the model is annotated with a (domain-specific) pattern language, the approach also supports the identification of solutions and the analysis of the architecture. The potential benefits of the technique in terms of semi-automatically produced scenarios are analyzed in the context of an industrial architecture evaluation. © 2010 Springer-Verlag Berlin Heidelberg. (13 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation
Uncontrolled terms: Architecture evaluation - BOOST software - Conceptual model - Domain knowledge - Domain specific - Industrial architecture - Pattern languages - Potential benefits - Software architecture evaluation
Classification Code: 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
59. Learning from the cell life-cycle: A self-adaptive paradigm
Di Marco, Antinisca (1); Gallo, Francesco (1); Inverardi, Paola (1); Ippoliti, Rodolfo (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 485-488, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_46; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Dipartimento di Informatica, University of l’Aquila, Italy (2) Dipartimento di Biologia di Base Ed Applicata, University of l’Aquila, Italy
Abstract: In the software domain, self-adaptive systems are able to modify their behavior at run-time to respond to changes in the environment they run, to changes of the users’ requirements or to changes occurring in the system it-self. In life science, biological cells are power entities able to adapt to the (unpredictable) situations they incur in, in a complete decentralized fashion. Learning adaptation mechanism from the cell life-cycle, we propose in this paper a new architectural paradigm for self-adaptive software systems. © 2010 Springer-Verlag Berlin Heidelberg. (6 refs)
Main heading: Software architecture
Controlled terms: Adaptive systems - Computer software - Embedded systems
Uncontrolled terms: Adaptation mechanism - Biological cells - Cell life - Life-sciences - Runtimes - Self-adaptive - Self-adaptive software - Self-adaptive system - Software domains
Classification Code: 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
60. Explaining architectural choices to non-architects
Bernini, Diego (1); Tisato, Francesco (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 352-359, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_28; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) D.I.S.Co., University of Milano-Bicocca, Viale Sarca, 336, Milano 20126, Italy
Abstract: Explaining and motivating architectural choices are crucial points both in real system development and in computer scientists education. Stakeholders and students should fully understand from a high level perspective the rationale behind basic architectural choices. The paper proposes a communication approach that is complementary to established design processes and can be exploited in workshops that involve the “non-architects” at the end of each phase of an iterative development process. Starting from a problem analysis focused on the significant aspects of data, activities and information flows, a logical architecture is defined by grouping activities into logical components. Different logical architectures are rated according to several conceptual dimensions, in order to highlight their specific rationale and benefits. Finally, deployment solutions are considered to weight the ratings according to costs and constraints of different deployment architectures and of the underlying technologies. © 2010 Springer-Verlag Berlin Heidelberg. (14 refs)
Main heading: Software architecture
Controlled terms: Architectural design - Requirements engineering - Technical presentations
Uncontrolled terms: Components - Computer scientists - Deployment architecture - Design process - Information flows - Iterative development - Logical architecture - Problem analysis - Real systems - Requirements analysis
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
61. Dynamic adaptive service architecture - Towards Coordinated Service Composition
Pahl, Claus (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 472-475, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_43; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) School of Computing, Dublin City University, Dublin, Ireland
Abstract: With software services becoming a strategic capability for the software sector, software architecture needs to address integration problems to help services to collaborate and coordinate their activities. The increasing need to address dynamic and automated changes can be answered by a service coordination architecture with event-based collaboration that enables dynamic and adaptive architectures. Intelligent service and process identification and adaptation techniques are suitable solutions for event-driven and on-demand service architectures. We define an architectural solution space and identify research challenges. © 2010 Springer-Verlag Berlin Heidelberg. (10 refs)
Main heading: Software architecture
Uncontrolled terms: Adaptation techniques - Adaptive architecture - Adaptive services - Architectural solutions - Event driven - Event-based - Integration problems - Intelligent Services - On-demand services - Process identification - Research challenges - Service compositions - Service coordination - Software services - Strategic capability - Suitable solutions
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
62. Assessing the impact of AOSD on layered software architectures
Saraiva, Juliana (1); Soares, Sérgio (1); Castor, Fernando (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 344-351, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_27; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Centro de Informática, Universidade Federal de Pernambuco (UFPE), Recife, PE, Brazil
Abstract: Software structuring techniques aim to make software systems easier to develop and maintain, increasing their quality. Aspect-Oriented Software Development (AOSD) and Software Architectural Styles are examples of such techniques. In spite of all the benefits of structuring techniques, both actual and intended, it is not always easy or even advantageous to integrate two or more of these techniques. For example, the effects of combining AOSD and Layered Software Architectures are still not well understood. This might be detrimental to system quality and can be a decisive factor when deciding whether or not to employ AOSD, specially considering the pervasiveness of layered architectures. This paper presents a study aiming to assess the impact of AOSD on software architectures adopting the layered style. To better account for the influence of aspects on the layered structure of the system, we have extended existing approaches to measure dependencies and layering violations in software architectures. © 2010 Springer-Verlag Berlin Heidelberg. (10 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Computer systems programming - Software design
Uncontrolled terms: Aspect oriented software development - Layered architecture - Layered Structures - Layering Software Architectures - Layering Structuring Violations - Software architectural styles - Software systems - System quality
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
63. BeeEye: A framework for constructing architectural views
Verjus, Hervé (1); Cîmpan, Sorana (1); Razavizadeh, Azadeh (1); Ducasse, Stéphane (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 376-383, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_31; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) LISTIC Lab, University of Savoie, France (2) RMoD Team, INRIA Lille-Nord Europe, France
Abstract: We believe that offering means for defining and building multiple architectural views of a given system enhances the understanding of the system as a whole. BeeEye is a generic and open framework for architecture reconstruction, which allows to construct architectural views using different (possibly combined) viewpoints and perspectives. The framework follows a model-driven approach where viewpoints and views (abstract and concrete) are models that are defined, constructed and used. © 2010 Springer-Verlag Berlin Heidelberg. (18 refs)
Main heading: Software architecture
Uncontrolled terms: Architectural views - Architecture reconstruction - Model driven approach - Open frameworks
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
64. Architecting a model-driven aspect-oriented product line for a digital Tv middleware: A refactoring experience
Saraiva, Diego (1); Pereira, Lucas (1); Batista, Thais (1); Delicato, Flávia C. (1); Pires, Paulo F. (1); Kulesza, Uirá (1); Araújo, Rodrigo (1); Freitas, Tássia (1); Miranda, Sindolfo (1); Souto, Ana Liz (1); Coelho, Roberta (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 166-181, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_14; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Computer Science Department, Federal University of Rio Grande Do Norte (UFRN), Natal, RN 59072-970, Brazil
Abstract: In this paper, we present the experience of refactoring the architecture of Ginga, the Brazilian Terrestrial Digital TV System (SBTVD) middleware. The main goal of the Ginga refactoring was to increase its configurability, through the automatic management of its variabilities. The resultant middleware, named GingaForAll, is based on a software product line (SPL) architecture, which encompasses both the middleware commonalities and its specific functionalities. Aspect-oriented techniques were used to improve the modularization of crosscutting mandatory and variable features from the Ginga SPL architecture. A model-driven based process was developed to allow the automatic management of the common and variable features in a high abstraction level that supports the management of code assets in terms of configurable models. The integration of such software engineering techniques have contributed to provide a flexible and configurable Ginga architecture, which allows the automatic generation of middleware customizations driven by the devices constraints and applications needs. © 2010 Springer-Verlag Berlin Heidelberg. (11 refs)
Main heading: Software architecture
Controlled terms: Digital television - Middleware - Modular construction - Network architecture - Software design
Uncontrolled terms: Aspect-oriented - Configurable - Model-driven development - Refactorings - Software Product Line
Classification Code: 405.2 Construction Methods - 716.4 Television Systems and Equipment - 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
65. A framework for dynamic self-optimization of power and dependability requirements in green cloud architectures
Bahsoon, Rami (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 510-514, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_52; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) School of Computer Science, University of Birmingham Edgbaston, Birmingham B15 2TT, United Kingdom
Abstract: I report on the activities and research challenges, their rationales, and the work in progress related to the ongoing EPSRC/UoB Bridging the Gap Fellowship project on Green Cloud Architectures. The initiative is aimed at a framework for dynamic self-optimization of cloud architectures taking into account the tradeoffs involved in maintaining acceptable dependability requirements/ Quality of Service (QoS) with minimal power at runtime. I argue that linkage between dependability requirements and power should be explicit. I motivate the need for new meters for Power-per-QoS value (and sacrifices) for cloud architectures. I motivate the need for an economics-inspired approach for dynamic self-optimization of cloud architectures. I discuss the role of Data Driven Simulation Systems in implementing such framework. © 2010 Springer-Verlag Berlin Heidelberg. (4 refs)
Main heading: Software architecture
Controlled terms: Optimization - Quality of service
Uncontrolled terms: Data-driven simulation - Minimal power - Research challenges - Runtimes - Self-optimization - Work in progress
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723 Computer Software, Data Handling and Applications - 921.5 Optimization Techniques
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
66. Reference models and reference architectures based on service-oriented architecture: A systematic review
De Oliveira, Lucas Bueno Ruas (1); Romero Felizardo, Katia (1); Feitosa, Daniel (1); Nakagawa, Elisa Yumi (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 360-367, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_29; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Dept. of Computer Systems, University of São Paulo - USP, PO Box 668, São Carlos, SP 13560-970, Brazil
Abstract: Service-Oriented Architecture (SOA) has received increasing attention by providing low coupling, reuse, productivity, and a better understanding of the business domain. However, there are challenges in creating quality solutions using services. Based on SOA, reference models and reference architectures have been proposed to support the understanding, development, and standardization in the development of service-oriented systems. Considering the relevance of SOA, as well as the lack of a complete panorama about these models and architectures, this paper aims at presenting a detailed view about the establishment and use of these models and architectures. For this, we conducted a systematic review. As main results, we observed a recent increase in the number of work regarding reference models and reference architectures based on SOA, including for different domains. Furthermore, based on the presented view, we identified interesting and important perspectives for future research. © 2010 Springer-Verlag Berlin Heidelberg. (7 refs)
Main heading: Software architecture
Controlled terms: Information services - Models
Uncontrolled terms: Business domain - Different domains - Low coupling - Reference architecture - Reference models - Service Oriented Systems - Systematic Review
Classification Code: 723.1 Computer Programming - 902.1 Engineering Graphics - 903.4 Information Services
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
67. Flexible working architectures: Agile architecting using PPCs
Pérez, Jennifer (1); Díaz, Jessica (1); Garbajosa, Juan (1); Alarcón, Pedro P. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 102-117, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_10; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) E.U. Informática, Technical University of Madrid (UPM), Madrid, Spain
Abstract: Software systems need software architectures to improve their scalability and maintenance. However, many agile practitioners claim that the upfront design of software architectures is an investment that does not pay off, since customers can rarely appreciate the value delivered by architectures. Furthermore, conventional architectural practices may be considered unacceptable from the Agile values and principles perspective. In this paper, the development of working architectures in agile iterations is presented as an attempt to solve the problem of designing software architectures in Agile. This contribution is based on the new concept of Plastic Partial Component (PPC). PPCs are highly malleable components that can be partially described, what increases the flexibility of architecture design. PPCs based architectures let reinforce some of the agile values and principles. Our experience of putting this contribution into practice is illustrated through the agile development of a Testing Framework for Biogas Plants. © 2010 Springer-Verlag Berlin Heidelberg. (32 refs)
Main heading: Software architecture
Controlled terms: Biogas - Computer software maintenance - Software design
Uncontrolled terms: Agile development - Architecture designs - Biogas plants - Flexible working - Software systems - Testing framework
Classification Code: 522 Gas Fuels - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
68. Identity management mismatch challenges in the danish municipality administration system
Andersen, Mads Schaarup (1); Christensen, Henrik Brbak (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 476-479, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_44; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, Aarhus University, Aarhus, Denmark
Abstract: Integrating a COTS product in a company’s product portfolio is appealing from a business perspective but highly challenging from the perspective of the software architecture. In this paper we outline research challenges regarding authorization in the identity management part of the Danish municipality administration system, called Opus BRS, a system that integrates SAP, legacy mainframe systems, and other systems present in the individual municipalities. Each of these systems defines their own access control model and architecture, which leads to architectural mismatch that impacts security, usability, as well as maintainability. We outline a three-year research project and discuss our research method that will include elements of action research as well as experiments using architectural prototyping. The project is carried out in cooperation with KMD, one of the largest Danish IT companies, who is the producer of the Opus system. © 2010 Springer-Verlag Berlin Heidelberg. (12 refs)
Main heading: Software architecture
Controlled terms: Access control - Legacy systems - Maintainability - Research
Uncontrolled terms: Action research - Architectural mismatches - COTS - Identity management - Prototyping
Classification Code: 723 Computer Software, Data Handling and Applications - 901.3 Engineering Research - 913.5 Maintenance
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
69. An ADL-approach to specifying and analyzing centralized-mode architectural connection
Su, Guoxin (1); Ying, Mingsheng (1, 2); Zhang, Chengqi (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 8-23, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_4; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Centre for Quantum Computation and Intelligent Systems, Faculty of Engineering and Information Technology, University of Technology, Sydney, NSW 2007, Australia (2) State Key Laboratory of Intelligent Technology and Systems, Department of Computer Science and Technology, Tsinghua University, Beijing 100084, China
Abstract: A rigorous paradigm coordinating components is important in the design stage of large-scale software engineering. In this paper we propose a new Architecture Description Language, called ACDL, to represent the centralized-mode architectural connection in which all components are linked by a single connector. Following one usual approach to architectural description, in which component types and components are distinguished, and connectors integrate behaviors of components by specifying their coordination protocols, ACDL describes connectors in such a way that connectors are insensitive to the numbers of attached same-type components. Based on ACDL, we develop analytic techniques to facilitate the system checking of temporal properties of an architecture. In particular, our method shows to what extent one can add, delete and replace components without making the whole system lose desired temporal properties, and improves the system checking in several ways, for example enhancing the use of previous checking results to deal with new checking problems. © 2010 Springer-Verlag Berlin Heidelberg. (19 refs)
Main heading: Software architecture
Uncontrolled terms: Analytic technique - Architectural descriptions - Architecture description languages - Coordination protocols - Design stage - Large-scale softwares - Temporal property - Whole systems
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
70. Linking design decisions to design models in model-based software development
Könemann, Patrick (1); Zimmermann, Olaf (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 246-262, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_19; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Informatics and Mathematical Modelling, Technical University of Denmark, 2800 Kgs. Lyngby, Denmark (2) IBM Research - Zürich, Säumerstrasse 8, Rüschlikon 8803, Switzerland
Abstract: Numerous design decisions are made in model-based software development which often are not documented explicitly. Hence, the design knowledge is ‘in the designers mind’ and communicated orally, if at all, and the rationale behind the decisions is lost. Existing tools tackle this problem for architectural decisions which refer to the higher level architecture of a system. However, these decisions are separate artifacts and not linked to individual design model elements. Hence, there is no automatic check whether the design models comply with made decisions. This paper presents concepts for explicitly linking design decisions and design model elements. As first class artifacts, design decisions can be used for documentation, consistency checking, and reuse. In case consistency constraints are violated, the user is notified that the design models no longer comply with the decisions made. Reuse is realized by extracting design model changes as reusable patterns for recurring decisions. © 2010 Springer-Verlag Berlin Heidelberg. (22 refs)
Main heading: Software design
Controlled terms: Design - Software architecture
Uncontrolled terms: Architectural decision - Consistency checking - Consistency constraints - Design decisions - Design knowledge - Design models - Model-based - Software development
Classification Code: 408 Structural Design - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
71. ByADL: An MDE framework for building extensible architecture description languages
Di Ruscio, Davide (1); Malavolta, Ivano (1); Muccini, Henry (1); Pelliccione, Patrizio (1); Pierantonio, Alfonso (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 527-531, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_56; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Dipartimento di Informatica, University of l’Aquila, Italy
Abstract: In order to deal with evolving needs and stakeholder concerns, next generation ADLs should support incremental extension and customization. In this direction we proposed byADL (Build Your ADL), a framework which allows software architects to (i) extend existent ADLs with domain specificities, new architectural views, or analysis aspects, (ii) integrate an ADL with development processes and methodologies, and (iii) customize an ADL. This paper presents the byADL tool and its features. © 2010 Springer-Verlag Berlin Heidelberg. (6 refs)
Main heading: Software architecture
Uncontrolled terms: Architectural views - Architecture description languages - Development process - Domain specificity - Software architects
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
72. Many to many service discovery: A first approach
Hock-Koon, Anthony (1); Oussalah, Mourad (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 449-456, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_40; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) LINA Laboratory, University of Nantes, 2 rue de la Houssiniere, NANTES 44322, France
Abstract: Dynamic service discovery is one of the main concepts which define the Service Oriented Architectures (SOA). This mechanism ensures loosely coupled services. It supports the reusability of services and the flexibility of applications. This paper provides a new service discovery approach which enhances the number of services potentially discovered and thus, it multiplies the number of candidate services. This multiplication ensures a better selection of the most suitable services and more alternatives is case of failures. © 2010 Springer-Verlag Berlin Heidelberg. (11 refs)
Main heading: Software architecture
Controlled terms: Information services - Quality of service - Reusability - Service oriented architecture (SOA)
Uncontrolled terms: Dynamic service discovery - Many to many - New services - Number of services - Service compositions - Service discovery - SOA
Classification Code: 903.4 Information Services - 723 Computer Software, Data Handling and Applications - 722.4 Digital Computers and Systems - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television - 452.3 Industrial Wastes
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
73. Lightweight and continuous architectural software quality assurance using the aSQA technique
Christensen, Henrik Brbak (1); Hansen, Klaus Marius (2); Lindstrm, Bo (3)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 118-132, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_11; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, Aarhus University, Aarhus, Denmark (2) Department of Computer Science, University of Iceland, Reykjavík, Iceland (3) Systematic A/S, Aarhus, Denmark
Abstract: In this paper, we present a novel technique for assessing and prioritizing architectural quality in large-scale software development projects. The technique can be applied with relatively little effort by software architects and thus suited for agile development in which quality attributes can be assessed and prioritized, e.g., within each development sprint. We outline the processes and metrics embodied in the technique, and report initial experiences on the benefits and liabilities. In conclusion, the technique is considered valuable and a viable tool, and has benefits in an architectural, technical, context, as well as in a business and people context. © 2010 Springer-Verlag Berlin Heidelberg. (22 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Quality assurance - Software design
Uncontrolled terms: Agile development - Architectural quality - Large-scale softwares - Novel techniques - Quality attributes - Software architects - Software quality assurance
Classification Code: 723 Computer Software, Data Handling and Applications - 913.3 Quality Assurance and Control
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
74. Impact evaluation for quality-oriented architectural decisions regarding evolvability
Bode, Stephan (1); Riebisch, Matthias (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 182-197, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_15; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Ilmenau University of Technology, P.O. Box 10 05 65, Ilmenau 98684, Germany
Abstract: Quality goals have to be under a special consideration during software architectural design. Evolvability constitutes a quality goal with a special relevance for business critical systems. Architectural patterns can significantly contribute to the satisfaction of quality goals. But architectural design decisions regarding these goals have to be made in a systematic, methodical way and concerning the patterns’ influence on quality properties. Unfortunately, pattern catalogs do not well support quality goal-oriented design decisions. This paper presents a systematic refinement and mapping of the quality goal evolvability to properties for good architectural design. A set of architectural patterns is evaluated regarding these properties. Furthermore, a calculation scheme is provided that enables the evaluation of the patterns to support design decisions. The results have been developed, revised, and evaluated in a series of applications based on industrial expertise. © 2010 Springer-Verlag Berlin Heidelberg. (35 refs)
Main heading: Quality control
Controlled terms: Architectural design - Computer software selection and evaluation - Software architecture - Software design - Structural design
Uncontrolled terms: Architectural decision - Architectural design decisions - Architectural pattern - Calculation scheme - Critical systems - Design decisions - Evolvability - Impact evaluation - Quality goals - Quality properties - Software architectural - Support design - Support quality
Classification Code: 408.1 Structural Design, General - 723 Computer Software, Data Handling and Applications - 913.3 Quality Assurance and Control
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
75. Architecture-centric component-based development needs a three-level ADL
Zhang, Huaxi (1); Urtado, Christelle (1); Vauttier, Sylvain (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 295-310, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_22; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) LGI2P / Ecole des Mines d’Alès, Nîmes, France
Abstract: Architecture-centric, component-based development intensively reuses components from repositories. Such development processes produce architecture definitions, using architecture description languages (Adls). This paper proposes a three step process. Architecture specifications first capture abstract and ideal architectures imagined by architects to meet requirements. Specifications do not describe complete component types but only component roles (usages). Architecture configurations then capture implementation decisions, as the architects select specific component classes from the repository to implement component roles. Finally, architecture assemblies define how components instances are created and initialized to customize the deployment of architectures in their own execution contexts. This development process is supported by a three-level Adl which enables the separate definition of these three representations. The refinement relationships between these architecture representations are also discussed. © 2010 Springer-Verlag Berlin Heidelberg. (16 refs)
Main heading: Software architecture
Controlled terms: Specifications
Uncontrolled terms: Architecture configuration - Architecture description languages - Architecture specification - Component-Based Development - Development process - Execution context - Specific component - Three-level - Three-step process
Classification Code: 723.1 Computer Programming - 902.2 Codes and Standards
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
76. Feature-based composition of software architectures
Parra, Carlos (1); Cleve, Anthony (1); Blanc, Xavier (1); Duchien, Laurence (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 230-245, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_18; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) INRIA Lille-Nord Europe, LIFL CNRS UMR 8022, Université des Sciences et Technologies de Lille, France
Abstract: In Software Product Lines variability refers to the definition and utilization of differences between several products. Feature Diagrams (FD) are a well-known approach to express variability, and can be used to automate the derivation process. Nevertheless, this may be highly complex due to possible interactions between selected features and the artifacts realizing them. Deriving concrete products typically involves the composition of such inter-dependent software artifacts. This paper presents a feature-based composition approach to automatically derive a product architecture from a given feature configuration. The proposed approach relies on the combination of Model-Driven Engineering (MDE) and Aspect-Oriented Modeling (AOM) techniques. We introduce a metamodel to reify each feature as a high-level aspect model. Product derivation is achieved by weaving the set of aspect models corresponding to a particular feature configuration. The weaving strategy is derived from an in-depth cross-analysis of both the feature interactions and the aspect model dependencies. © 2010 Springer-Verlag Berlin Heidelberg. (22 refs)
Main heading: Software architecture
Controlled terms: Concrete products - Software design - Weaving
Uncontrolled terms: Aspect model - Aspect-Oriented Modeling - Feature configuration - Feature diagrams - Feature interactions - Feature-based - Given features - Meta model - Model-driven engineering - Product architecture - Product derivation - Software artifacts - Software Product Line
Classification Code: 412 Concrete - 723.1 Computer Programming - 819.5 Textile Products and Processing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
77. On the need of safe software product line architectures
Lopez-Herrejon, Roberto E. (1); Egyed, Alexander (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 493-496, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_48; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Institute for Systems Engineering and Automation, Johannes Kepler University Linz, Austria
Abstract: A Software Product Line (SPL) is a family of related software systems distinguished by the different sets of features each system provides. Over the last decade, the substantial benefits of SPL practices have been extensively documented and corroborated both in academia and industry. Several architecture methods have been proposed that employ different artifacts for expressing the components of a SPL, their properties and relationships. Of crucial importance for any SPL architecture method is to guarantee that the variability, for instance as expressed in feature models, is not only preserved but also kept consistent across all artifacts used. In this research challenge paper we argue that Safe Composition - the guarantee that all programs of a product line are type safe - can be leveraged to address this guarantee for structural properties of SPL architectures and the challenges that that entails. © 2010 Springer-Verlag Berlin Heidelberg. (29 refs)
Main heading: Software architecture
Controlled terms: Software design - Structural properties
Uncontrolled terms: Feature models - Product-lines - Research challenges - Software product line architecture - Software product lines - Software systems
Classification Code: 408 Structural Design - 723.1 Computer Programming - 951 Materials Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
78. A NUI based multiple perspective variability modeling CASE tool
Bashroush, R. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 523-526, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_55; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) School of Computing, IT and Engineering, University of East London, London, United Kingdom
Abstract: With current trends towards moving variability from hardware to software, and given the increasing desire to postpone design decisions as much as is economically feasible, managing the variability from requirements elicitation to implementation is becoming a primary business requirement in the product line engineering process. One of the main challenges in variability management is the visualization and management of industry size variability models. In this demonstration, we introduce our CASE tool, MUSA. MUSA is designed around our work on multiple perspective variability modeling and is implemented using the state-of-the-art in NUI, multi-touch interfaces, giving it the power and flexibility to create and manage large-scale variability models with relative ease. © 2010 Springer-Verlag Berlin Heidelberg. (12 refs)
Main heading: Software architecture
Controlled terms: Production engineering - Visualization
Uncontrolled terms: Business requirement - CASE tools - Current trends - Design decisions - Feature modeling - Multi-touch interfaces - Multiple perspectives - Product line engineering - Requirements elicitation - Software Product Line - Variability management - Variability model - Variability modeling
Classification Code: 723.1 Computer Programming - 902.1 Engineering Graphics - 913.1 Production Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
79. Experiences from scenario-based architecture evaluations with ATAM
Reijonen, Ville (1); Koskinen, Johannes (1); Haikala, Ilkka (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 214-229, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_17; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Institute of Software Systems, Tampere University of Technology, PL 553, Tampere 33101, Finland
Abstract: Software architecture may go through many changes during its existence. Architecture evaluation can point out current problems, help to anticipate some of the future changes, and also show the absolute limits of a design. This paper presents experiences from eleven scenario based architecture evaluations with ATAM. The evaluations were completed on a tight two day evaluation schedule. This limited time forced to search for alternative scheduling options. The evaluated system designs had relatively long life cycle up to 30 years and all the designs were evaluated for the first time. We have learnt that in evaluations current issues often overshadow the long view of the future. We suggest that architecture evaluations should be integrated to the development process as a tool not only for today but also for tomorrow. © 2010 Springer-Verlag Berlin Heidelberg. (13 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Design
Uncontrolled terms: Alternative scheduling - Architecture evaluation - Development process - Long life - System design
Classification Code: 408 Structural Design - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
80. MDA tool for telecom service functional design
Ahuja, Ankit (1, 2); Simonin, Jacques (2); Nedelec, Rémi (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 519-522, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_54; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Orange Labs, 2 avenue P. Marzin, Lannion 22300, France (2) Institut Télécom, Télécom Bretagne, Lab-STICC UMR CNRS 3192, UEB, Technopole Brest-Iroise, Brest 29238, France
Abstract: Telecom service development process followed at Orange consists of a sequence of interrelated tasks. We present an MDA tool which describes this process using SPEM 2.0 compatible graphical editor, and then associates a model to each defined task for its execution. These models are validated for conformance to functional rules embedded inside the tool. Task automation is achieved using MDA model transformations, which use Orange knowledge model as the basis to extract the existing reusable functional components and their interdependencies. Graphical editor and model transformations have been integrated together in an ECLIPSE environment. Finally, the validated functional design model is transformed towards a UML2 profile, so as the telecom architect can manipulate it in an environment he is familiar. © 2010 Springer-Verlag Berlin Heidelberg. (4 refs)
Main heading: Software architecture
Controlled terms: Telecommunication - Telecommunication systems
Uncontrolled terms: Component reuse - Eclipse environment - Functional components - Functional design - Graphical editors - Knowledge model - Model transformation - Model-driven architecture - SPEM 2.0 - Task automation - TeleCOM - Telecom service development - Telecom services
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
81. REST in practice
Webber, Jim (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 7, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_3; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) ThoughtWorks, 168-173 High Holborn, London WC1V 7AA, United Kingdom
Abstract: The Web has emerged as a viable platform for building distributed systems beyond its traditional scope as a scalable means of sharing and disseminating information. In this paper I present observations from recent industrial development projects where commodity Web infrastructure and common patterns have been used to create large, scalable, and dependable computer systems. © 2010 Springer-Verlag Berlin Heidelberg.
Main heading: Software architecture
Controlled terms: Information dissemination - Network security - Scalability
Uncontrolled terms: Dependability - Distributed systems - ESB - Industrial development - REST - SOA - Web infrastructure
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
82. Mediating connector patterns for components interoperability
Spalazzese, Romina (1); Inverardi, Paola (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 335-343, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_26; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Università Degli Studi dell’Aquila, via Vetoio, L’Aquila I-67100, Italy
Abstract: A key objective for ubiquitous environments is to enable system interoperability between system’s components that are highly heterogeneous. In particular, the challenge is to embed in the system architecture the necessary support to cope with behavioral diversity in order to allow components to coordinate and communicate. In this paper we present the design building blocks for the dynamic and on-the-fly interoperability between heterogeneous components. Specifically, we describe an Architectural Pattern called Mediating Connector, that is the key enabler for communication. In addition, we present a set of Basic Mediator Patterns, that describe the basic mismatches which can occur when components try to interact, and their corresponding solutions. © 2010 Springer-Verlag Berlin Heidelberg. (22 refs)
Main heading: Software architecture
Controlled terms: Interoperability
Uncontrolled terms: Architectural pattern - Basic Mediator Patterns - Behavioral diversity - Building blockes - Corresponding solutions - Heterogeneous component - Key objective - On-the-fly - System architectures - System interoperability - Ubiquitous environments
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
83. Software architecture recovery process based on object-oriented source code and documentation
Chardigny, Sylvain (1); Seriai, Abdelhak (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 409-416, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_35; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) MGPS, Port-Saint-Louis, France (2) LIRMM, University of Montpellier II/CNRS, Montpellier, France
Abstract: Architecture recovery aims at providing a high level abstraction of a system using the architectural elements to represent functionalities and interactions. This architecture makes easier the program comprehension and then provides many advantages during all the phases of software life cycle. Nevertheless, most architecture recovery approaches fail to combine the human expertise on the system with a high automation level. In order to solve this issue, we propose to use the intentional architecture of a system, which represent the system as imagined by its designers, to improve the adequation between the resulting software architecture and the architect’s expectations without requiring more human expertise. Thus, we present in this paper a semi-automatic process to recover intentional architecture from the available documentation and the expert recommendations. This process is an extension of ROMANTIC, an approach aiming at recovering a component-based architecture of an existing object-oriented system. © 2010 Springer-Verlag Berlin Heidelberg. (18 refs)
Main heading: Software architecture
Controlled terms: Object oriented programming - Recovery
Uncontrolled terms: Architectural element - Architecture recovery - Component-based architecture - Expert recommendations - High automation - High-level abstraction - Human expertise - Object oriented - Object-oriented system - Program comprehension - Semi-automatics - Software architecture recovery - Software life cycles - Source codes
Classification Code: 531 Metallurgy and Metallography - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
84. Expert activities automation through enhanced business services orchestration
Krupaviciute, Asta (1); Fayn, Jocelyne (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 497-500, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_49; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) MTIC-EA4171, INSA de Lyon, Université de Lyon 1, Bron F69677, France
Abstract: Automating sophisticated, personalized expert activities, which are based on the application of professional knowledge to process an individual case, remains a great challenge. It is all the more relevant in some complex domains such as preventive medicine or e-learning where reliable and self-adaptive solutions are expected by users. In this paper we analyze differences between typical procedure-based business processes automation and expert activities automation. We propose to integrate context related knowledge into the business process modeling via the development of an intelligent process management agent. The latter is designed to dynamically orchestrate the set of services that will build up the process reproducing an expert activity, adapted to the concrete client’s context. © 2010 Springer-Verlag Berlin Heidelberg. (4 refs)
Main heading: Software architecture
Controlled terms: Automation - Ontology - Web services
Uncontrolled terms: Dynamic business process - Expert activity - Model-driven - Ontology-based approach - Web services orchestration
Classification Code: 723 Computer Software, Data Handling and Applications - 731 Automatic Control Principles and Applications - 732 Control Devices - 903 Information Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
85. Where did all this good architectural knowledge go?
Kruchten, Philippe (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 5-6, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_2; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Electrical and Computer Engineering, University of British Columbia, 2332 Main Mall, Vancouver, BC V6T1Z4, Canada
Abstract: Software architecture represents a significant intellectual asset. But much of the architectural knowledge in organizations is still tacit knowledge. Different parties involved in software development have different needs in terms of architecture at different point in time, not limited to the architects themselves. How can we deliver the right information at the right time to the right person, as schedules are compressed? And where would the information be coming from? And how good is it? Various strategies have been tried, from central, bureaucratic accumulation of data-codification strategies, to simply giving access to the right person-personalization strategies, and a few hybrid strategies in between. This goes beyond mere software documentation, we need to effectively support the reasoning of the architects and developers. © 2010 Springer-Verlag Berlin Heidelberg. (5 refs)
Main heading: Software architecture
Controlled terms: Knowledge management - Software design
Uncontrolled terms: Architectural knowledge - Hybrid strategies - Intellectual assets - Personalizations - Right information - Software development - Software documentation - Tacit knowledge
Classification Code: 723.1 Computer Programming - 723.5 Computer Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
86. Specifying loose coupling from existing service composition approaches
Hock-Koon, Anthony (1); Oussalah, Mourad (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 464-471, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_42; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) LINA Laboratory, University of Nantes, 2 rue de la Houssiniere, NANTES 44322, France
Abstract: The loose coupling notion associated with the service composition is a key concept which defines the Service Oriented Architectures (SOA) paradigm. Given that this notion is intuitively understood, its definition lacks formalism. Moreover, the existing evaluation metrics are limited and cannot take into account all the specificities of the SOA’s composition mechanism. In this paper, we present a set of metrics based on a clear definition of the loose coupling. We combine these metrics in a formula which calculates a weight. This weight allows for clear measurements of a composite’s coupling. © 2010 Springer-Verlag Berlin Heidelberg. (21 refs)
Main heading: Software architecture
Controlled terms: Information services - Quality of service - Service oriented architecture (SOA)
Uncontrolled terms: Composite services - Composition mechanisms - Evaluation metrics - Loose couplings - Metrics - Service compositions - SOA
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 722.4 Digital Computers and Systems - 723 Computer Software, Data Handling and Applications - 903.4 Information Services
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
87. Software architecture constraints as customizable, reusable and composable entities
Tibermacine, Chouki (1); Dony, Christophe (1); Sadou, Salah (2); Fabresse, Luc (3, 4)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 505-509, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_51; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) LIRMM, CNRS and Montpellier University, France (2) VALORIA, Université Bretagne-Sud, Vannes, France (3) Université Lille Nord de France, France (4) École des Mines de Douai, France
Abstract: One of the major advantages of component-based software engineering is the ability for developers to reuse and assemble software entities to build complex software. Whereas decomposition of software into components has been and is largely addressed for what concerns the business (functional) part of applications, this is not yet the case for what concerns their documentation (non-functional) part. In this paper, we propose a new and original solution to express componentbased software non-functional documentation, and we will focus more especially on architecture constraints, which formalize parts of architecture decisions, as executable, customizable, reusable and composable building blocks represented by components. Component-based applications using business and constraint components can be modeled with CLACS, a dedicated ADL which is also introduced in the paper. Architecture constraints can be executed at design-time within CLACS. CLACS is implemented as a plugin in the Eclipse IDE. © 2010 Springer-Verlag Berlin Heidelberg. (7 refs)
Main heading: Software architecture
Controlled terms: Computer software reusability
Uncontrolled terms: Architecture decisions - Building blockes - Complex software - Component based applications - Component based software - Component-based software engineering - Customizable - Non-functional - Plug-ins - Software entities
Classification Code: 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
88. A model for dynamic reconfiguration in service-oriented architectures
Fiadeiro, José Luiz (1); Lopes, Antónia (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 70-85, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_8; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science, University of Leicester, University Road, Leicester LE1 7RH, United Kingdom (2) Faculty of Sciences, University of Lisbon, Campo Grande, Lisboa 1749-016, Portugal
Abstract: The importance of modelling the dynamic architectural characteristics of software systems has long been recognised. However, the nature of the dynamic architectural characteristics of service-oriented applications goes beyond what is currently addressed by existing architecture description languages (ADLs). At the heart of the service-oriented approach is the logical separation of service need from the need-fulfillment mechanism, i.e., the service provider: the binding between the two is deferred to runtime and established at the instance level, i.e. each time the need for the service emerges. In this paper we present an architecture-oriented model for dynamic reconfiguration that paves the way for the definition of ADLs that are able to address the specification of dynamic architectural characteristics of service-oriented applications. © 2010 Springer-Verlag Berlin Heidelberg. (33 refs)
Main heading: Software architecture
Controlled terms: Dynamic models - Information services
Uncontrolled terms: Architecture description languages - Dynamic re-configuration - Runtimes - Service Oriented - Service provider - Software systems
Classification Code: 723.1 Computer Programming - 903.4 Information Services - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
89. Naive architecting - Understanding the reasoning process of students: A descriptive survey
Van Heesch, Uwe (1, 2); Avgeriou, Paris (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 24-37, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_5; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) University of Groningen, Netherlands (2) Fontys University of Applied Sciences Venlo, Netherlands
Abstract: Software architecting entails making architecture decisions, which requires a lot of experience and expertise. Current literature contains several methods and processes to support architects with architecture design, documentation and evaluation but not with the design reasoning involved in decision-making. In order to derive a systematic reasoning process we need to understand the current state of practice and propose ways to improve it. In this paper we present the results of a survey that was conducted with undergraduate software engineering students, aiming to find out the innate reasoning process during architecting. The results of the survey are compared to the existing architecture literature in order to identify promising directions towards systematic reasoning processes. © 2010 Springer-Verlag Berlin Heidelberg. (33 refs)
Main heading: Software architecture
Controlled terms: Decision making - Surveys
Uncontrolled terms: Architecture decisions - Architecture designs - Reasoning process - Software architecting - State of practice - Undergraduate software engineering
Classification Code: 405.3 Surveying - 723.1 Computer Programming - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
90. An architectural blueprint for model driven development and maintenance of business logic for information systems
Brückmann, Tobias (1); Gruhn, Volker (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 53-69, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_7; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) University of Leipzig, Klostergasse 3, Leipzig 04107, Germany (2) University of Duisburg-Essen, Schützenbahn 70, Essen 45127, Germany
Abstract: Despite of ongoing development of model-driven development approaches in industry and academia, we believe that in particular for business logic aspects of information systems there is a lack of integrated support considering all phases of a model driven software process, from analysis until code generation. In our work we developed a framework consisting of meta-models, model transformations and tools that address a consistent support of development and maintenance tasks. As contribution of this article, we present an architecture for generated business logic code as part our infrastructure blueprint. We aim at the generation of robust business logic layers and consider particularly maintenance and integration issues of complex information systems with external dependencies. For this purpose, our infrastructure supports the specification of global domain states and local conditions in visual software models and generates corresponding code artifacts which assure these conditions automatically. © 2010 Springer-Verlag Berlin Heidelberg. (19 refs)
Main heading: Software architecture
Controlled terms: Computer software maintenance - Information systems
Uncontrolled terms: Business logic - Code Generation - Complex information - Global domain - Integrated supports - Integration issues - Local conditions - Maintenance tasks - Meta model - Model driven development - Model transformation - Model-driven - Robust business - Software process - Visual software models
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
91. Ontological analysis for generating baseline architectural descriptions
Kiwelekar, Arvind W. (1); Joshi, Rushikesh K. (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 417-424, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_36; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Computer Science and Engineering, Indian Institute of Technology Bombay, Powai, Mumbai 400076, India
Abstract: Mapping elements from an application domain to architectural abstractions is a significant architecture description activity from the point of view of seamlessness in descriptions. For establishing such a mapping of domain elements to architectural abstractions, an approach based on ontological analysis is presented. The central idea of the approach is to establish the mapping through a uniform framework of understanding that is applicable over the problem domain as well as the solution domain. The reference ontology used is an adaptation of Bunge-Wand-Weber (BWW) ontology. Typically, an element from an application domain is mapped with an architectural abstraction when both represent the same phenomena from BWW ontology. The approach is realized as a model-driven transformation process. © 2010 Springer-Verlag Berlin Heidelberg. (18 refs)
Main heading: Software architecture
Controlled terms: Abstracting - Mapping - Ontology
Uncontrolled terms: Application domains - Architectural descriptions - Architecture description - Domain elements - Model-driven - Ontological analysis - Problem domain - Transformation process - Uniform framework
Classification Code: 723 Computer Software, Data Handling and Applications - 902.1 Engineering Graphics - 903 Information Science - 903.1 Information Sources and Analysis
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
92. Customer value in architecture decision making
Ivanovic, Ana (1); America, Pierre (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 263-278, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_20; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Philips Research, High Tech Campus 37, Eindhoven 5656 AE, Netherlands
Abstract: This paper focuses on the business aspects of architecture decision making - in particular how to quantify the customer value of quality improvements to support architecture investment decisions. We developed concepts for quantifying the impact of quality improvements on customer value, customer value-in-use, and customer segments. In two real-life case studies we present (1) how the concept for quantifying customer value was used, (2) how the customer value relates to the existing value indicators in the organization, and (3) how the importance of customer value for architecture decision making was assessed by practitioners in the organization. © 2010 Springer-Verlag Berlin Heidelberg. (18 refs)
Main heading: Software architecture
Controlled terms: Customer satisfaction - Decision making - Investments - Sales
Uncontrolled terms: Architecture decisions - Architecture investments - Business aspects - Customer segments - Customer values - Quality improvement
Classification Code: 723.1 Computer Programming - 911.2 Industrial Economics - 911.4 Marketing - 912 Industrial Engineering and Management - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
93. Functional architecture modeling for the software product industry
Brinkkemper, Sjaak (1); Pachidi, Stella (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 198-213, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_16; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Information and Computing Sciences, University of Utrecht, P.O. Box 80.089, Utrecht, TB 3508, Netherlands
Abstract: Although a lot of research has been carried out on the technical architecture of software systems, the domain of Functional Architecture in the software product industry lacks a formalization of the related concepts and practices. Functional Architecture Modeling is essential for identifying the functionalities of the software product and translating them into modules, which interact with each other or with third party products. Furthermore, the Functional Architecture serves as a base for mapping the functional requirements and planning the product releases. In this paper, we present the Functional Architecture Diagrams, a powerful modeling tool for the Functional Architecture of software products, which comprises: a modular decomposition of the product functionality; a simple notation for easy comprehension by non-specialists; and applicability in any line of business, offering a uniform method for modeling the functionalities of software products. © 2010 Springer-Verlag Berlin Heidelberg. (28 refs)
Main heading: Software architecture
Uncontrolled terms: Functional architecture - Functional requirement - Modeling tool - Modular decomposition - Modularity - Product release - Software products - Software systems - Technical architecture - Third parties
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
94. From web components to web services: Opening development for third parties
Tibermacine, Chouki (1); Kerdoudi, Mohamed Lamine (2)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 480-484, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_45; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) LIRMM, CNRS and Montpellier University, France (2) Computer Science Department, University of Biskra, Algeria
Abstract: One of the main advantages of the Web component-based development paradigm is the ability to build customizable and composable web application modules as independent units of development, and to share them with other developers by publishing them in libraries as COTS (Commercial Off The Shelf) or free components. Besides this, since many years, Web services confirmed their status of the most pertinent solution for a given service provider, like Google, Amazon or FedEx, to open its solutions for third party development. In this paper, we present an approach to build web services starting from existing web component-based applications and deploy them on a web service provider. This transformation helps server-side web application developers in transforming their “user interface”-based web components into a set of web services intended for remote code extensions. We implemented our solution on a collection of Java EE technologies. © 2010 Springer-Verlag Berlin Heidelberg. (8 refs)
Main heading: Software architecture
Controlled terms: Internet - User interfaces - Web services
Uncontrolled terms: Commercial off the shelves - Customizable - Free component - Remote code - Service provider - Third parties - Third-party development - WEB application - Web components - Web service providers
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 722.2 Computer Peripheral Equipment - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
95. Architecture decision-making in support of complexity control
Zalewski, Andrzej (1); Kijas, Szymon (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 501-504, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_50; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Institute of Automatic Control and Computational Engineering, Warsaw University of Technology, Poland
Abstract: The main challenge of software engineering has always been to bring software complexity under control. Different kinds of abstractions have been devised and applied for that purpose at different levels of software design. Some of them have proven successful, such as function hierarchies, layers, API’s, abstract classes, encapsulation, interfaces etc. and are widely used in practice. Concepts from the genre of software architecture should also help to manage software complexity. We argue that, before architecture decisions and architecture decision-making become a common industrial practice, they have to support software complexity management much more efficiently than at present. Despite the substantial progress already made, it is still a major challenge both in theory (architecture decisions representation and architecture decision-making methods) and practice (tool support). © 2010 Springer-Verlag Berlin Heidelberg. (11 refs)
Main heading: Software architecture
Controlled terms: Abstracting - Architecture - Decision making - Decision theory - Software design
Uncontrolled terms: Abstract class - Architectural style - Architecture decision-making - Architecture decisions - Industrial practices - Software complexity - Tool support
Classification Code: 402 Buildings and Towers - 723.1 Computer Programming - 903.1 Information Sources and Analysis - 912.2 Management - 921 Mathematics - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
96. Communicating architectural knowledge: Requirements for software architecture knowledge management tools
Schwittek, Widura (1); Eicker, Stefan (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 457-463, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_41; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Paluno - the Ruhr Institute for Software Technology, University of Duisburg-Essen, Universitätsstr. 9, Essen 45141, Germany
Abstract: Architecting is a communication intensive task in which architectural knowledge is shared between the architect and the stakeholders. The software architect’s communicative action is often conducted face-to-face, e.g. in presentations and workshops. A software architecture documentation as a carrier of explicit architectural knowledge can also be seen as an architect’s communicative action. This perspective opens the door for treating a software architecture documentation as an expression of an asynchronous knowledge communication process enabling the application of principles from communication theory. In this paper this perspective is taken and specific requirements are derived for software architecture knowledge management tools with respect to the context-oriented communication model. © 2010 Springer-Verlag Berlin Heidelberg. (21 refs)
Main heading: Software architecture
Controlled terms: Communication - Information theory - Knowledge management - Technical presentations
Uncontrolled terms: Architectural knowledge - Communication models - Communication theory - Communicative actions - Knowledge communication - Knowledge management tool - Software architects
Classification Code: 716 Telecommunication; Radar, Radio and Television - 716.1 Information Theory and Signal Processing - 723.1 Computer Programming - 723.5 Computer Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
97. Toward an aspect oriented ADL for embedded systems
Loukil, Sihem (1); Kallel, Slim (1); Zalila, Bechir (1); Jmaiel, Mohamed (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 489-492, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_47; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) ReDCAD Laboratory, University of Sfax, B.P. 1173, Sfax 3038, Tunisia
Abstract: Managing embedded systems complexity and scalability is one of the most important problems in software development. To better address this problem, it is very recommended to have an abstraction level high enough to model complex systems. Architectural description languages (ADLs) intend to model these systems and manage their structure at a high abstraction level. Traditional ADLs do not provide appropriate formalisms to separate any kind of crosscutting concerns. This frequently results in poor descriptions of the software architectures and a tedious adaptation to constantly changing user requirements and specifications. AOSD (Aspect Oriented Software Development) deals with these problems by considering crosscutting concerns in software development. The effectiveness of AOSD appears when aspect concepts are considered throughout the software’s life-cycle. In this paper, we propose a new aspect language called AO4AADL that adequately manipulates aspect oriented concepts at the software architecture level to master complexity and ensure scalability. © 2010 Springer-Verlag Berlin Heidelberg. (6 refs)
Main heading: Software architecture
Controlled terms: Abstracting - Computer systems programming - Embedded software - Embedded systems - High level languages - Scalability - Software design
Uncontrolled terms: Abstraction level - Architectural description languages - Aspect oriented software development - Aspect-oriented ADL - Aspect-oriented concept - Cross-cutting concerns in software - Crosscutting concern - Model complexes - Software development - Systems complexity - User requirements
Classification Code: 723 Computer Software, Data Handling and Applications - 903.1 Information Sources and Analysis
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
98. Mining relationships between the participants of architectural patterns
Kamal, Ahmad Waqas (1); Avgeriou, Paris (1)
Source: Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), v 6285 LNCS, p 401-408, 2010, Software Architecture - 4th European Conference, ECSA 2010, Proceedings; ISSN: 03029743, E-ISSN: 16113349; ISBN-10: 3642151132, ISBN-13: 9783642151132; DOI: 10.1007/978-3-642-15114-9_34; Conference: 4th European Conference on Software Architecture, ECSA 2010, August 23, 2010 - August 26, 2010; Publisher: Springer Verlag
Author affiliation: (1) Department of Mathematics and Computing Science, University of Groningen, Netherlands
Abstract: Architectural patterns are often combined with other, relevant architectural patterns during software architecture design. However, combining patterns effectively remains a challenging task: first because the integration of any two architectural patterns can take several forms; second because existing pattern languages only mention generic pattern-to-pattern relationships and do not go into the details of their combination. In this paper, we propose to address this problem by discovering and defining a handful of recurring pattern relationships at the level of the participants of patterns. We have studied 32 industrial case studies and mined a number of relationships between participants of different patterns. We present a few of these relationships and outline some examples of their appearance. © 2010 Springer-Verlag Berlin Heidelberg. (7 refs)
Main heading: Software architecture
Controlled terms: Software design
Uncontrolled terms: Architectural pattern - Generic patterns - Industrial case study - Pattern languages - Pattern relationships - Software architecture design
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
99. ACM International Conference Proceeding Series: Foreword
Babar, Muhammad Ali (1); Cuesta, Carlos E. (2)
Source: ACM International Conference Proceeding Series, p iii-iv, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) IT University of Copenhagen, Denmark (2) Rey Juan Carlos University, Spain
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
100. On the effectiveness of the metamorphic shield
Nguyen-Tuong, Anh (1); Wang, Andrew (1); Hiser, Jason D. (1); Knight, John C. (1); Davidson, Jack W. (1)
Source: ACM International Conference Proceeding Series, p 170-174, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842788; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) University of Virginia, Department of Computer Science, 151 Engineer’s Way, Charlottesville, VA 22904, United States
Abstract: In this paper we determine analytically the effectiveness of dynamic artificial diversity, i.e., artificial diversity in which the subject of the diversity is re-randomized periodically and mechanically. We refer to a mechanism that implements dynamic diversity as a Metamorphic Shield since this mechanism applies metamorphosis to the system’s attack surface to try to shield the system from certain attacks. Contrary to intuition, our analysis reveals that dynamic diversity appears to provide limited benefit except in special cases. In particular, it offers benefit for attacks that seek to leak information. We present a case study of the use of dynamic diversity applied to Instruction Set Randomization that is subject to an incremental attack on the key. © 2010 ACM. (12 refs)
Main heading: Dynamics
Controlled terms: Computer simulation - Software architecture - Technical presentations
Uncontrolled terms: Artificial diversity - attack surface - Instruction-set randomization - security - Temporal diversity - Virtual machines
Classification Code: 723.5 Computer Applications - 903.2 Information Dissemination - 931.1 Mechanics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
101. Towards an abstraction layer for security assurance measurements (invited paper)
Kanstrén, Teemu (1); Savola, Reijo (1); Evesti, Antti (1); Pentikäinen, Heimo (1); Hecker, Artur (2); Ouedraogo, Moussa (3); Hätönen, Kimmo (4); Halonen, Perttu (4); Blad, Christophe (5); López, Oscar (6); Ros, Saioa (6)
Source: ACM International Conference Proceeding Series, p 189-196, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842791; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) VTT Technical Research Centre of Finland, Oulu, Finland (2) Telecom Paris Tech., Paris, France (3) Research Center Henri Tudor, Kirchberg, Luxembourg (4) Nokia Siemens Networks, Espoo, Finland (5) Oppida, Montigny le Bretonneux, France (6) Nextel S.A., Zamudio, Spain
Abstract: Measurement of any complex, operational system is challenging due to the continuous independent evolution of the components. Security risks introduce another dimension of dynamicity, reflected to risk management and security assurance activities. The availability of different measurements and their properties will vary during the overall system lifecycle. To be useful, a measurement framework in this context needs to be able to adapt to both the changes in the target of measurement and in the available measurement infrastructure. In this study, we introduce a taxonomy-based approach for relating the available and attainable measurements to the measurement requirements of security assurance plans by providing an Abstraction Layer that makes it easier to manage these dynamic features. The introduced approach is investigated in terms of a security assurance case example of firewall functionality in a Push E-mail service system. © 2010 ACM. (21 refs)
Main heading: Measurements
Controlled terms: Abstracting - Electronic mail - Risk analysis - Risk management - Software architecture - Taxonomies - Technical presentations
Uncontrolled terms: abstraction - Abstraction layer - Dynamic features - dynamicity - Email services - Operational systems - Security assurance - Security risks - System lifecycle
Classification Code: 943 Mechanical and Miscellaneous Measuring Instruments - 942 Electric and Electronic Measuring Instruments - 941 Acoustical and Optical Measuring Instruments - 922.1 Probability Theory - 922 Statistical Methods - 944 Moisture, Pressure and Temperature, and Radiation Measuring Instruments - 914 Safety Engineering - 912 Industrial Engineering and Management - 911 Cost and Value Engineering; Industrial Economics - 903 Information Science - 723.5 Computer Applications - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
102. Indicator-based architecture-level security evaluation in a service-oriented environment
Antonino, Pablo (1); Duszynski, Slawomir (1); Jung, Christian (1); Rudolph, Manuel (1)
Source: ACM International Conference Proceeding Series, p 221-228, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842795; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Fraunhofer IESE, Fraunhofer-Platz 1, 67663 Kaiserslautern, Germany
Abstract: The Service-Oriented Architecture paradigm (SOA) is commonly applied for the implementation of complex, distributed business processes. The service-oriented approach promises higher flexibility, interoperability and reusability of the IT infrastructure. However, evaluating the quality attribute security of large and complex SOA configurations is not sufficiently mastered yet. To tackle this complex problem, we developed a method for evaluating the security of existing service-oriented systems on the architectural level. The method is based on recovering security-relevant facts about the system by using reverse engineering techniques and subsequently providing automated support for further interactive security analysis at the structural level. By using generic, system-independent indicators and a knowledge base, the method is not limited to a specific programming language or technology. Therefore, we are able to apply the method to various systems and adapt it to specific evaluation needs. The paper describes the general structure of the method, and presents an instantiation aligned to the Service Component Architecture (SCA) specification. © 2010 ACM. (17 refs)
Main heading: Service oriented architecture (SOA)
Controlled terms: Computer software selection and evaluation - Information services - Interoperability - Knowledge based systems - Reusability - Reverse engineering - Software architecture - Technical presentations
Uncontrolled terms: Architectural levels - Automated support - Business Process - Complex problems - Engineering techniques - Evaluation Method - indicator - IT infrastructures - Knowledge base - Programming language - Quality attributes - security - Security analysis - Security evaluation - Service component architecture - Service Oriented - Service Oriented Systems - Service-oriented environment
Classification Code: 452.3 Industrial Wastes - 722.4 Digital Computers and Systems - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 903.4 Information Services
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
103. First International Workshop on Measurability of Security in Software Architectures - MeSSa 2010
Savola, Reijo M. (1); Kanstrén, Teemu (1); Evesti, Antti (1)
Source: ACM International Conference Proceeding Series, p 151-154, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842785; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) VTT Technical Research Centre of Finland, Kaitoväylä 1, P.O. Box 1100, 90571 Oulu, Finland
Abstract: The growing complexity of service-centric systems has increased the need for pertinent and reliable software security and trusted system solutions. Systematic approaches to measuring security in software architectures are needed in order to obtain sufficient and credible proactive evidence of the security level or performance of a system, service or product. The systematic definition of security metrics and security assurance metrics is a young field that still lacks widely accepted definitions of metrics and applicable measuring techniques for design-time and run-time security monitoring. MeSSa 2010 workshop contributes on the following issues: &bull Security, trust and privacy metrics. &bull Security assurance metrics. &bull Security, trust and privacy measurement systems and associated data gathering. &bull Metrics for adaptive security systems. &bull Taxonomical and ontological research on security metrics. &bull Experimental results from security measurements. &bull Security measurability-increasing mechanisms for software architectures &bull The relationship and differences between security metrics and security assurance metrics. &bull Trade-off analysis and decision-making at design-time and at run-time. © 2010 ACM.
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Decision making - Technical presentations
Uncontrolled terms: assessment - assurance - evaluation - metrics - privacy - security - trust
Classification Code: 723.1 Computer Programming - 903.2 Information Dissemination - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
104. Specification of modelling languages in a flexible meta-model architecture
Mu, Liping (1); Gjster, Terje (1); Prinz, Andreas (1); Tveit, Merete Skjelten (1)
Source: ACM International Conference Proceeding Series, p 302-308, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842807; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Faculty of Engineering and Science, University of Agder, Serviceboks 509, NO-4898 Grimstad, Norway
Abstract: Originally, meta-models were used to specify the structure (abstract syntax) of modelling languages. This is reflected both in meta-languages like MOF and Ecore, and the four-layer meta-model architecture. Presently, meta-modelling is used for specification of complete languages. In this situation, it turns out that the traditional meta-languages are not always expressive enough to capture all language aspects. This usually implies the use of more than one metalanguage in the meta-model architecture to cover the different language aspects. There are many approaches to address this challenge. In this paper, we analyze these approaches, and based on this analysis, we re-think the meta-model architecture focusing on complete language specifications. In our meta-model architecture, each aspect of a language conforms to an aspect-specific meta-language at the level above, and models can reside at different levels depending on their context and use. This meta-model architecture is easier to understand, more flexible and more extensible; therefore it may be useful in the design of meta-model-based language specification platforms, as well as for promoting the understanding of the principles of meta-modelling. © 2010 ACM. (21 refs)
Main heading: Software architecture
Controlled terms: Specifications - Technical presentations
Uncontrolled terms: Abstract syntax - Language specification - MDA - Meta language - Meta model - Meta-languages - Meta-modelling - Modelling language
Classification Code: 723.1 Computer Programming - 902.2 Codes and Standards - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
105. Increasing software product reusability and variability using active components: A software product line infrastructure
Geertsema, Bas (1); Jansen, Slinger (1)
Source: ACM International Conference Proceeding Series, p 336-343, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842814; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Information and Computing Sciences, University Utrecht, Utrecht, Netherlands
Abstract: Software Product Lines are typically used to support development of a software product family and not a software product population, which denotes a broader and more diverse range of software products. We present a Software Product Line Infrastructure (SPLI) that has been designed to increase the reuse of software efforts in product populations. The SPLI takes a bottom-up approach by structuring product features in highly reusable software components called Active Components which contain different types of artefacts. Variability is expressed using domain-specific models and formal variability models. Variability is bound during product derivation by executing model-to-artefact transformations. Components are active because they are invoked during the derivation process, thereby empowering the component. The SPLI enables step-wise refinements of applications by allowing specialization and composition of models before variability is bound. A prototype of the SPLI has been created that was used to develop and evaluate an experimental software product line. It is concluded that within the context of our experimental software product line the SPLI improves software reuse in software product populations. © 2010 ACM. (25 refs)
Main heading: Software design
Controlled terms: Computer software reusability - Network architecture - Reusability - Software architecture - Technical presentations
Uncontrolled terms: Active components - components - model-driven development - Software Product Line - variability
Classification Code: 452.3 Industrial Wastes - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
106. Secure information sharing between heterogeneous embedded devices
Suomalainen, Jani (1); Hyttinen, Pasi (2); Tarvainen, Pentti (3)
Source: ACM International Conference Proceeding Series, p 205-212, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842793; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) VTT Technical Research Centre of Finland, Vuorimiehentie 3, P.O. Box 1000, FIN-02044 VTT, Espoo, Finland (2) VTT Technical Research Centre of Finland, Microkatu 1, P.O. Box 1199, FIN-70211, Kuopio, Finland (3) VTT Technical Research Centre of Finland, Kaitoväylä 1, P.O. Box 1100, FIN-90590, Oulu, Finland
Abstract: Smart spaces are dynamic environments for sharing information e.g. in personal, building, or public networks. Key challenges for smart spaces include security and interoperability between heterogeneous devices, from high-end PCs to embedded gadgets and sensors. We propose a novel security architecture, which enables heterogeneous devices to share data in controlled manner. Centralized information brokering device is used to measure security level of published information. These measurements are then used to authorize information access. Hence, the architecture enables devices to share information with the same security level even when these devices do not have interoperable security protocols. We propose policy configuration and deployment models, which are feasible and usable with embedded devices. We also describe our practical experiences from implementing the proposed security solution for smart spaces. © 2010 ACM. (32 refs)
Main heading: Network security
Controlled terms: Access control - Information retrieval - Interoperability - Network architecture - Network protocols - Security systems - Software architecture - Technical presentations
Uncontrolled terms: communication security - Dynamic environments - Embedded device - Heterogeneous devices - Information access - Information sharing - Policy configurations - Practical experience - Public networks - Security Architecture - Security level - Security protocols - Security solutions - Sharing information - Smart space
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 914.1 Accidents and Accident Prevention
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
107. Revisiting the concept of components in software engineering from a software ecosystem perspective
Dos Santos, Rodrigo Pereira (1); Werner, Cláudia Maria Lima (1)
Source: ACM International Conference Proceeding Series, p 135-142, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842782; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) System Engineering and Computer Science, COPPE/UFRJ, Federal University of Rio de Janeiro, Brazil
Abstract: The treatment of economic and social issues in Software Engineering (SE) was pointed out as a challenge for the next years, since SE needs to treat issues beyond the technical side, which requires observing it in another perspective. In this sense, this paper revisits the concept of components in SE through a sociotechnical construction. Based on a ranking of its critical elements, a study shows that components are assets in a set of collaborative/local environments more than in global/corporate markets. So, an approach called Brecho´-VCM was proposed to treat some of these elements, providing an environment to discuss the future of Software Reuse on a software ecosystem perspective. These analyses, as well as their results, reinforce that SE community needs to learn with the components case and effectively looks at SE future in a sociotechnical way. © 2010 ACM. (37 refs)
Main heading: Computer software reusability
Controlled terms: Commerce - Ecosystems - Software architecture - Technical presentations
Uncontrolled terms: component market - Socio-technical approach - Software ecosystems - Software Re-use - Value-based
Classification Code: 454.3 Ecology and Ecosystems - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 911.2 Industrial Economics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
108. Architecture challenges for software ecosystems
Bosch, Jan (1)
Source: ACM International Conference Proceeding Series, p 93-95, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842776; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Intuit, Mountain View, CA, United States
Abstract: Successful software products and product lines exhibit a force of gravity that attracts external developers. The organization developing the product actively seeks to involve external developers to add functionality to the system. On the other hand, external developers flock to a successful product as it provides an established market where underserved niches provide a business opportunity for these players. The product or product line evolves into a platform for external developers. This causes several software architecture challenges for a software ecosystem, including interface stability, evolution management, guaranteeing security and reliability and composition of independently developed functionality. The paper describes these challenges, discusses practical solutions and identifies research challenges. © 2010 ACM. (1 refs)
Main heading: Software architecture
Controlled terms: Ecosystems - Software reliability - Technical presentations
Uncontrolled terms: Business opportunities - Interface stabilities - Practical solutions - Product-lines - Research challenges - Software ecosystems - Software products
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming - 903.2 Information Dissemination - 913.3 Quality Assurance and Control
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
109. Security measurements within the framework of quality assessment models for free/libre open source software
Groven, Arne-Kristian (1); Haaland, Kirsten (2); Glott, Ruediger (2); Tannenberg, Anna (3)
Source: ACM International Conference Proceeding Series, p 229-235, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842796; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Norsk Regnesentral, Blindern, Oslo, Norway (2) UNU-MERIT, Keizer Karelplein 19, Maastricht, Netherlands (3) FreeCode AS, Nydalsveien 30 A, Oslo, Norway
Abstract: This article, presents a comparison of a first generation software quality assessment model (OpenBRR) and a second generation model (QualOSS) by applying them to the case of Asterisk, a FLOSS implementation of a telephone private branch exchange (PBX, VoIP). The key trend in the evolution of FLOSS quality assessment models is the movement from manual and descriptive to more automated and analytical models, and from the involvement of a few metrics to hundreds of metrics. Concerning the security measurements, they are much more sophisticated in QualOSS than in OpenBRR. Where OpenBRR have only three security metrics, QualOSS has nine security indicator with altogether 30-40 security metrics. This article shows how security are measured in the two assessment models, putting it into the overall context of the two approaches. © 2010 ACM. (18 refs)
Main heading: Computer software selection and evaluation
Controlled terms: Internet telephony - Mathematical models - Open systems - Software architecture - Technical presentations
Uncontrolled terms: asterisk - FLOSS - metrics - Open Source Software - OpenBRR - QualOSS - security - Software quality assessment
Classification Code: 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
110. Architectural mismatch issues in identity management deployment
Andersen, Mads Schaarup (1)
Source: ACM International Conference Proceeding Series, p 31-33, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842761; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science, Aarhus University, Aarhus, Denmark
Abstract: Integrating Commercial Off-The-Shelf products in a company’s software product portfolio offers business value, but introduces challenges from a software architecture perspective. In this paper, the research challenges in relation to identity management in the Danish municipality administration system called Opus, are outlined. Opus BRS is the identity management part of Opus. Opus integrates SAP, legacy mainframe systems, and other third party systems of the individual municipality. Each of these systems define their own software architecture and access control model, leading to architectural mismatch with an impact on security, usability, and maintainability. The research project is discussed and access control and identity provisioning are recognized as the major areas of interest in relation to the mismatch challenges. The project is carried out in close cooperation with KMD, one of the largest Danish IT companies, which is the producer of the Opus BRS system. Lastly, a status of the project is given and the next steps of the research are outlined. © 2010 ACM. (15 refs)
Main heading: Software architecture
Controlled terms: Access control - Industry - Legacy systems - Maintainability - Research - Security systems - Technical presentations
Uncontrolled terms: Architectural mismatches - COTS - Identity management - Prototyping - provisioning
Classification Code: 913.5 Maintenance - 913 Production Planning and Control; Manufacturing - 912 Industrial Engineering and Management - 914.1 Accidents and Accident Prevention - 911 Cost and Value Engineering; Industrial Economics - 901.2 Education - 723 Computer Software, Data Handling and Applications - 901.3 Engineering Research
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
111. Model-based engineering for dynamic reconfiguration in DRTES
Hamid, Brahim (1); Krichen, Fatma (1)
Source: ACM International Conference Proceeding Series, p 269-276, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842803; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) IRIT, University of Toulouse, 118 Route de Narbonne, 31062 Toulouse Cedex 9, France
Abstract: An embedded software system is reconfigurable when it can modify its behavior or its architecture. The reconfigurations are launched according to the evolution of context requirements and the variation of execution environment constraints. In this paper we focus our attention on design model level with two-fold purposes. Firstly, building modeling tools to help specify and configure reconfigurability issues; and secondly validating our modeling by its integration in a Model-Based Development Approach. The contribution exhibits meta-model to deal with reconfiguration component based applications in DRTES at a model level. The elements of this meta-model will be used to describe software specifications and requirements, using component as a first class artifact to build such systems. To capture reconfiguration concepts, we introduce the notion of metamodes as a generic set of modes with a specific links between them. By doing so, the reconfiguration activities between metamodes are user-specified and the reconfiguration action between modes will be generated automatically. Within this development process, component application and reconfiguration properties are declaratively specified at model level and are transparent for the component implementation. An application is then described using UML and specialized extensions: MARTE profiles from the OMG and our proposal. As a proof of concept, we examine a test case that has reconfiguration requirements: a GPS. © 2010 ACM. (17 refs)
Main heading: Embedded systems
Controlled terms: Dynamic models - Embedded software - Real time systems - Software architecture - Technical presentations - Unified Modeling Language
Uncontrolled terms: Component-based architecture - Distributed real-time embedded systems - dynamic reconfiguration - Meta model - model driven engineering - UML profiles
Classification Code: 722.4 Digital Computers and Systems - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
112. Evaluating architectural openness in mobile software platforms
Anvaari, Mohsen (1); Jansen, Slinger (2)
Source: ACM International Conference Proceeding Series, p 85-92, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842775; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) IT University of Gothenburg, Germany (2) Utrecht University, Netherlands
Abstract: Software platform developers do not have insight into the consequences of architectural decisions made in regards to openness, while openness determines whether and how third-party developers adopt the software platform. For mobile communication devices, however, the adoption by third-party developers is essential for the growth of an ecosystem, which has proven to be a successful strategy for mobile communication device ecosystems. In this research the openness and architectures of five mobile platforms are compared, to provide further insight into successful openness strategies for software ecosystem growth. © 2010 ACM. (29 refs)
Main heading: Software architecture
Controlled terms: Ecosystems - Mobile telecommunication systems - Technical presentations
Uncontrolled terms: Mobile softwares - openness strategy - platform accessibility - Platform architecture - Qualitative interviews
Classification Code: 454.3 Ecology and Ecosystems - 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
113. Industry taxonomy engineering: The case of the European software ecosystem
Hunink, Ivo (1); Van Erk, Rene (1); Jansen, Slinger (2); Brinkkemper, Sjaak (2)
Source: ACM International Conference Proceeding Series, p 111-118, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842779; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) ISVWorld, Utrecht, Netherlands (2) Utrecht University, Utrecht, Netherlands
Abstract: Presently, no methods exist that support the creation process of an industry taxonomy within a specific domain. Without such a method, taxonomies remain erroneous, making the development of, for instance, a directory of companies for research, extremely hard. This paper presents a method for creating complete and encompassing domain specific taxonomies. With such a method, researchers can create complete, consistent, taxonomies that in turn provide a strong basis for data model development. The method is applied in practice, and the industry taxonomy is evaluated by practitioners. © 2010 ACM. (33 refs)
Main heading: Software architecture
Controlled terms: Ecosystems - Industry - Taxonomies - Technical presentations
Uncontrolled terms: Creation process - Data models - Domain specific - software ecosystem - Software ecosystems
Classification Code: 913 Production Planning and Control; Manufacturing - 912 Industrial Engineering and Management - 911 Cost and Value Engineering; Industrial Economics - 903.2 Information Dissemination - 903 Information Science - 723.1 Computer Programming - 454.3 Ecology and Ecosystems
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
114. Model driven development of user interface prototypes: An integrated approach
Störrle, Harald (1)
Source: ACM International Conference Proceeding Series, p 261-268, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842802; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Technical University of Denmark, Richard Petersens Plads, 2800 Lyngby, Denmark
Abstract: Many approaches to interface development apply only to isolated aspects of the development of user interfaces (UIs), e.g., exploration during the early phases, design of visual appearance, or implementation in some technology. In this paper we explore an integrated approach to incorporate the whole UI development life cycle, connect all stakeholders involved, and support a wide range of levels of granularity and abstraction. This is achieved by using Window/Event-Diagrams (WEDs), a UI specification notation based on UML 2 state machines. It affords closer collaboration between different user groups like graphic designers and software developers by integrating traditional pen-and-paper based methods with contemporary MDA-based CASE tools. We have implemented our approach in the Advanced Interaction Design Environemnt (AIDE), an application to support WEDs. © 2010 ACM. (27 refs)
Main heading: Software architecture
Controlled terms: Contour followers - Graphical user interfaces - Integrated control - Machine design - Phase interfaces - Stress intensity factors - Technical presentations - Visualization
Uncontrolled terms: CASE tools - Graphic designers - GUI design - Integrated approach - Interaction design - Interface development - Model driven development - Paper based methods - Software developer - State machine - UI specification - UML - User groups - User interface prototypes - Visual appearance - WED
Classification Code: 902.1 Engineering Graphics - 801.4 Physical Chemistry - 731.1 Control Systems - 723.1 Computer Programming - 903.2 Information Dissemination - 722.2 Computer Peripheral Equipment - 601 Mechanical Design - 422 Strength of Building Materials; Test Equipment and Methods - 421 Strength of Building Materials; Mechanical Properties - 603.1 Machine Tools, General
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
115. Tacit architectural knowledge
Tofan, Dan (1)
Source: ACM International Conference Proceeding Series, p 9-11, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842756; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computing Science, University of Groningen, Nijenborgh 9, 9747 AG, Netherlands
Abstract: Currently, architectural knowledge management focuses mostly on the explicit representation of knowledge, under the codification strategy. Due to its limitations, recent research favors a hybrid approach, combining the codification and personalization strategies. In this paper, we argue that tacit architectural knowledge can help solve this problem. We propose to investigate the knowledge conversion processes of internalization and socialization and their real world impact. © 2010 ACM. (9 refs)
Main heading: Software architecture
Controlled terms: Decision making - Knowledge management - Knowledge representation - Technical presentations
Uncontrolled terms: Architectural knowledge - design decisions - Explicit representation - Hybrid approach - Knowledge conversion - Personalizations
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 912.2 Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
116. A three-dimensional view of software ecosystems
Campbell, P.R.J. (1); Ahmed, Faheem (1)
Source: ACM International Conference Proceeding Series, p 81-84, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842774; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) United Arab Emirates University, P.O. Box 17551, Al Ain, United Arab Emirates
Abstract: The concept of a Software ecosystem is gaining in popularity amongst large organizations and inherently relies on the adoption of common architectural development for multiple product development. The adoption of these approaches represents a significant shift in traditional software development style and process methodology. Currently several organizations are in practice with this new process model which embraces business, third party involvement and open architecture as its central pillars and these institutions have thrived as a result. The advent of software ecosystems have caused major players in the software industry to rethink their operating practices and engage with third parties, opening their platforms to external entities to attain business objectives. In this paper we present a three dimensional view of the software ecosystem model examine the role played by each of the three central pillars; business; architecture; and social aspects. We further highlight their relationships and conclude that this study will help in further aiding understanding of the overall engineering process of ecosystem software. © 2010 ACM. (10 refs)
Main heading: Software architecture
Controlled terms: Ecosystems - Industry - Product development - Social aspects - Societies and institutions - Software design - Technical presentations - Three dimensional
Uncontrolled terms: Business objectives - Engineering process - Large organizations - New process - Open architecture - Operating practices - Software development styles - Software ecosystems - Software industry - Software Product Line - Third parties
Classification Code: 913 Production Planning and Control; Manufacturing - 912 Industrial Engineering and Management - 911 Cost and Value Engineering; Industrial Economics - 902.1 Engineering Graphics - 901 Engineering Profession - 723.1 Computer Programming - 454.3 Ecology and Ecosystems
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
117. Formal approach to security metrics. What does “more secure” mean for you?
Krautsevich, Leanid (1); Martinelli, Fabio (2); Yautsiukhin, Artsiom (2)
Source: ACM International Conference Proceeding Series, p 162-169, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842787; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science, University of Pisa, Largo B. Pontecorvo 3, Pisa, Italy (2) Istituto di Informatica e Telematica, Consiglio Nazionale Delle Ricerche, G. Moruzzi 1, Pisa, Italy
Abstract: Security metrics are the tools for providing correct and up-to-date information about a state of security. This information is essential for managing security efficiently. Although a number of security metrics were proposed we still need reliable ways for assessment of security. First of all, we do not have a widely-accepted and unambiguous definition which defines what it means that one system is more secure than another one. Without this knowledge we cannot show that a metric really measures security. Second, there is no a universal formal model for all metrics which can be used for rigourous analysis. In this paper we investigate how we can define “more secure” relation and propose our basic formal model for a description and analysis of security metrics. © 2010 ACM. (25 refs)
Main heading: Security of data
Controlled terms: Software architecture - Technical presentations
Uncontrolled terms: Formal approach - formal metrics - Formal model - Security measurement - Security metrics
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
118. Risk analysis of host identity protocol: Using risk identification method based on value chain dynamics toolkit
Sääskilahti, Juha (1); Särelä, Mikko (1)
Source: ACM International Conference Proceeding Series, p 213-220, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842794; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Ericsson, Oy L M Ericsson Ab, Hirsalantie 11, 02420 Jorvas, Finland
Abstract: In this paper, we develop a Risk Identification Method based on Value Chain Dynamics Toolkit (VCDT) and apply it to a Risk Analysis of Host Identity Protocol (HIP) in a simple host-server scenario. The HIP Risk Analysis revealed no new risks inherent to the protocol itself. A number of potential risks in a typical deployment were identified. These risks should be analyzed and mitigated in the actual HIP deployment. The new Risk Identification method provided benefits, particularly in the knowledge transfer, structuring of the interviews and visualization of the value chain. Further study is needed on how to cover trust- and privacy aspects, how to improve ease of documentation and how to proceed from risk identification to security testing. © 2010 ACM. (20 refs)
Main heading: Risk analysis
Controlled terms: Knowledge management - Mobile telecommunication systems - Risk assessment - Risk perception - Software architecture - Technical presentations - Visualization
Uncontrolled terms: HIP - Host identity protocol - Knowledge transfer - Potential risks - Privacy aspects - risk identification - Security testing - Value chains
Classification Code: 922.1 Probability Theory - 922 Statistical Methods - 914.1 Accidents and Accident Prevention - 914 Safety Engineering - 912 Industrial Engineering and Management - 911 Cost and Value Engineering; Industrial Economics - 903.2 Information Dissemination - 902.1 Engineering Graphics - 723.5 Computer Applications - 723.1 Computer Programming - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
119. Software ecosystems vs. natural ecosystems: Learning from the ingenious mind of nature
Dhungana, Deepak (1); Groher, Iris (2); Schludermann, Elisabeth (3); Biffl, Stefan (3)
Source: ACM International Conference Proceeding Series, p 96-102, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842777; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Lero, University of Limerick, Limerick, Ireland (2) Johannes Kepler University, Linz, Linz, Austria (3) Vienna University of Technology, Vienna, Austria
Abstract: The use of the term ecosystem in the context of extensible software platforms and third-party developers or user communities has made us ponder about the similarities between software ecosystems and natural ecosystems. We therefore compare software ecosystems and natural ecosystems to present an agenda for further research by analyzing some key characteristics of both types of ecosystems. We discuss the regulatory factors and mechanisms existing in nature, and then deduce key challenges that need to be dealt with, in order to achieve healthy operation of software ecosystems. © 2010 ACM. (15 refs)
Main heading: Ecosystems
Controlled terms: Software architecture - Technical presentations
Uncontrolled terms: Key characteristics - Natural ecosystem - nature - Regulatory factors - software - Software ecosystems - Software platforms - User communities
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
120. Architectural abstractions for space and time awareness: The case of responsive environments
Bernini, Diego (1)
Source: ACM International Conference Proceeding Series, p 12-16, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842757; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) DISCo., University of Milano-Bicocca, viale Sarca 336, 20126 Milan, Italy
Abstract: Space and time are common high-level concepts in several classes of systems, however they seldom are first class concerns at the software architecture level. In particular they have a crucial role in responsive environments, i.e. technology-augmented ordinary environments which are able to sense and respond to their inhabitants. The paper presents the Ph.D. proposal of the author, which aims to define suitable architectural abstractions to manage space and time in responsive environments. The paper first outlines the problem, then presents the related work and finally describes the proposed solution approach, the expected results and their validation plan. © 2010 ACM. (24 refs)
Main heading: Software architecture
Controlled terms: Abstracting - Technical presentations
Uncontrolled terms: architectural abstractions - publish-subscribe - Responsive environments - space-awareness - Time-awareness
Classification Code: 723.1 Computer Programming - 903.1 Information Sources and Analysis - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
121. A model for variability design rationale in SPL
Galvão, Ismênia (1); Van Den Broek, Pim (1); Aksit, Mehmet (1)
Source: ACM International Conference Proceeding Series, p 332-335, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842813; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science, University of Twente, P.O. Box 217, 7500 AE Enschede, Netherlands
Abstract: The management of variability in software product lines goes beyond the definition of variations, traceability and configurations. It involves a lot of assumptions about the variability and related models, which are made by the stakeholders all over the product line but almost never handled explicitly. In order to better manage the design with variability, we must consider the rationale behind its specification. In this paper we present a model for the specification of variability design rationale and its application to the modelling of architectural variability in software product lines. © 2010 ACM. (17 refs)
Main heading: Software architecture
Controlled terms: Design - Network architecture - Software design - Specifications - Technical presentations
Uncontrolled terms: Architectural variability - Design rationale - Product-lines - Software Product Line - variability
Classification Code: 408 Structural Design - 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 902.2 Codes and Standards - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
122. Robustness and scalability - A dual challenge for autonomic architectures
Caprarescu, Bogdan Alexandru (1)
Source: ACM International Conference Proceeding Series, p 22-26, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842759; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) West University of Timisoara, Faculty of Mathematics and Computer Science, Romania
Abstract: Several architectures for autonomic systems have been proposed in the past decade. In this research challenge paper, we briefly discuss them with an emphasize on their robustness and scalability. We propose a two-layer autonomic architecture where the global management functions are carried out by a self-organizing feedback loop inspired by the behavior of ant colonies and expect it to be robust and scalable. The proposed architecture is sustained with examples from our past work as well as our plans for future research. © 2010 ACM. (17 refs)
Main heading: Software architecture
Controlled terms: Fault tolerance - Quality assurance - Scalability - Technical presentations
Uncontrolled terms: Ant colonies - Autonomic architecture - Autonomic Computing - Autonomic Systems - Feed-back loop - Global management - Proposed architectures - Research challenges - Self organizing - Self-organizations - Two layers
Classification Code: 718 Telephone Systems and Related Technologies; Line Communications - 722.4 Digital Computers and Systems - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 913.3 Quality Assurance and Control - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
123. Autonomic Software Product Lines (ASPL)
Abbas, Nadeem (1); Andersson, Jesper (1); Löwe, Welf (1)
Source: ACM International Conference Proceeding Series, p 324-331, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842812; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Linnaeus University, Software Technology Group, Sweden
Abstract: We describe ongoing work on a variability mechanism for Autonomic Software Product Lines (ASPL). The autonomic software product lines have self-management characteristics that make product line instances more resilient to context changes and some aspects of product line evolution. Instances sense the context, selects and bind the best component variants to variation-points at run-time. The variability mechanism we describe is composed of a profile guided dispatch based on off-line and on-line training processes. Together they form a simple, yet powerful variability mechanism that continuously learns, which variants to bind given the current context and system goals. © 2010 ACM. (26 refs)
Main heading: Software architecture
Controlled terms: Technical presentations
Uncontrolled terms: Autonomic elements - context - goals - MAPE-K - Off-line training - on-line - variability - variants - variation-points
Classification Code: 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
124. Towards a process maturity model for evolutionary architecting of embedded system product lines
Axelsson, Jakob (1)
Source: ACM International Conference Proceeding Series, p 36-42, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842764; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) School of Innovation, Design and Engineering, Mälardalen University, SE-721 23 Västerås, Sweden
Abstract: Many companies developing embedded systems and software as part of a product line struggle with how to improve their architecting practices to deal with increasing complexity. As the amount of legacy systems from previous products increases, the architecting becomes more and more evolutionary. This paper develops a process maturity model for evolutionary architecting, that can be used by an organization to improve its practices. The model is based on the Capability Maturity Model Integration (CMMI) which is instantiated to suit the architecting needs. Through this instantiation and simplification, it becomes feasible also for a small architecting team to systematically improve its maturity without dealing with the full CMMI. It is shown how the resulting maturity model addresses a number of issues previously collected from industrial case studies. The method is evaluated by performing maturity evaluations at several companies. © 2010 ACM. (14 refs)
Main heading: Embedded systems
Controlled terms: Embedded software - Industry - Legacy systems - Software architecture - Technical presentations
Uncontrolled terms: Capability maturity model integration - evolution - Industrial case study - Maturity model - Process maturity - Product-lines - System products - Systems and software
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
125. Applicability of security metrics for adaptive security management in a universal banking hub system
Blasi, Lorenzo (1); Savola, Reijo (2); Abie, Habtamu (3); Rotondi, Domenico (4)
Source: ACM International Conference Proceeding Series, p 197-204, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842792; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Italy Innovation Center, Hewlett-Packard Italiana S.r.l., Cernusco s/N (MI), Italy (2) VTT Technical Research Centre of Finland, Oulu, Finland (3) Norwegian Computing Center, Oslo, Norway (4) TXT e-solutions S.p.A., Valenzano (BA), Italy
Abstract: Banking applications require a high standard of security, resilience and adaptation. The results presented here were obtained from a case study of the deployment of the security metrics-driven adaptive security solutions of a distributed middleware in the context of monetary transfers. The focus of this study is on the analysis of the applicability of security metrics for adaptive authentication, authorization, and end-to-end confidentiality, and the applicability of trust metrics. © 2010 ACM. (28 refs)
Main heading: Software architecture
Controlled terms: Authentication - Middleware - Technical presentations
Uncontrolled terms: Adaptive security - Distributed middleware - High standards - Hub systems - Security measure - Security metrics - Trust metrics
Classification Code: 723 Computer Software, Data Handling and Applications - 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
126. Describing variability in service-oriented software product lines
Galster, Matthias (1)
Source: ACM International Conference Proceeding Series, p 344-350, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842815; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Mathematics and Computing Science, University of Groningen, Nijenborgh 9, 9747 AG Groningen, Netherlands
Abstract: Service-oriented architectures are a standard-based and technology-independent distributed computing paradigm for discovering, binding and assembling loosely-coupled software services. Software product lines on the other hand allow a generic architecture to be configured and deployed in different instances. Product lines facilitate systematic reuse through managing variability. In this paper, we combine ideas from the service domain and the product line domain and investigate what types of variability exist in service-oriented software architectures. Moreover, we suggest a way for representing variability in service-oriented architectures by formalizing the notion of variability. To allow different viewpoints on variability, we define stakeholder roles that occur in the context of service-oriented software architectures. By applying the proposed concepts, we hope to improve variability management at the software architecture level of service-oriented systems. © 2010 ACM. (18 refs)
Main heading: Software architecture
Controlled terms: Information services - Service oriented architecture (SOA) - Technical presentations
Uncontrolled terms: Distributed Computing - Generic architecture - Level of Service - modeling - Product-lines - Service domain - Service Oriented - Service-Oriented Software Architectures - Software Product Line - Software services - variability - Variability management
Classification Code: 722.4 Digital Computers and Systems - 723.1 Computer Programming - 903.2 Information Dissemination - 903.4 Information Services
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
127. A model-driven approach for managing software architectures with multiple evolving concerns
Malavolta, Ivano (1)
Source: ACM International Conference Proceeding Series, p 4-8, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842755; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Dipartimento di Informatica, Università dell’Aquila, L’Aquila, Italy
Abstract: Architecture Description Languages (ADLs) are the means to define the software architecture of a complex system. ADLs are strongly related to stakeholder concerns: they must capture all design decisions fundamental for system’s stakeholders. Stakeholder concerns are various and ever evolving, thus it is impossible to capture all system’s concerns with a single ADL. The evolution of a concern may cause the used ADLs (or even the whole architecture framework) not to fit any more with the system-of-interest. In this work we propose an approach for describing software architectures with multiple and evolving stakeholder concerns. Under this perspective, the proposed approach allows (i) to define customized ADLs depending on the concerns held by the system’s stakeholders, (ii) to provide interoperability between either customized and already existing ADLs, (iii) to realize architecture frameworks in which viewpoints, views and languages are set up depending on the system’s stakeholders concerns. The approach is based on model-driven engineering technologies. © 2010 ACM. (14 refs)
Main heading: Software architecture
Controlled terms: Large scale systems - Technical presentations
Uncontrolled terms: ADL - Architecture description languages - architecture framework - Architecture frameworks - Complex systems - Design decisions - Model driven approach - Model-driven Engineering - modeling
Classification Code: 723.1 Computer Programming - 903.2 Information Dissemination - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
128. Trust-terms ontology for defining security requirements and metrics
Sullivan, Kieran (1); Clarke, Jim (1); Mulcahy, Barry P. (1)
Source: ACM International Conference Proceeding Series, p 175-180, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842789; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Telecommunications Software and Systems Group, West Campus, Waterford Institute of Technology, Ireland
Abstract: Security and privacy, accountability and anonymity, transparency and unobservability: these terms and more are vital elements for defining the overall security requirements - -and, thus, security measurability criteria - -of systems. However, these distinct yet related concepts are often substituted for one another in our discussions on securing trustworthy systems and services. This is damaging since it leads to imprecise security and trust requirements. Consequently, this results in poorly defined metrics for evaluating system security. This paper proposes a trust-terms ontology, which maps out and defines the various components and concepts that comprise ICT security and trust. We can use this ontology tool to gain a better understanding of their trust and security requirements and, hence, to identify more precise measurability criteria. © 2010 ACM. (21 refs)
Main heading: Ontology
Controlled terms: Software architecture - Technical presentations
Uncontrolled terms: metrics - privacy - requirements - security - trust
Classification Code: 723 Computer Software, Data Handling and Applications - 903 Information Science - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
129. Towards holistic security management through coherent measuring
Halonen, Perttu (1); Hätönen, Kimmo (1)
Source: ACM International Conference Proceeding Series, p 155-161, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842786; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Nokia Siemens Networks, P.O. Box 6, 02022, Finland
Abstract: Today’s complex communication systems are vital for many businesses. The high skill needed to master those systems has created an economy of services where many specialised organisations participate in producing the end service. Managing that orchestra to produce the right functionality is a challenge in itself, but managing the security of the process can be difficult. In this paper, we discuss of the big picture of managing the security of such complex systems, of the gaps between some point solutions, and of the research needs we have identified, focusing on technical aspects of security. We think that coherently measuring various technical aspects of security and sharing the information wisely is the key to a satisfying solution. © 2010 ACM. (17 refs)
Main heading: Technical presentations
Controlled terms: Communication systems - Security of data - Software architecture
Uncontrolled terms: Complex systems - Research needs - Security management - Technical aspects
Classification Code: 716 Telecommunication; Radar, Radio and Television - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
130. From a freeform graphics tool to a repository based modeling tool
Peltonen, Jari (1); Felin, Marko (1); Vartiala, Mikko (1)
Source: ACM International Conference Proceeding Series, p 277-284, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842804; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Tampere University of Technology, Department of Software Systems, P.O.Box 553x, FI-33101 Tampere, Finland
Abstract: Traditional software modeling tools are rigid and formal. There is no support for, e.g. freeform sketching that does not conform to the used meta-model, and hence, a lot of the actual modeling work gets done with other methods. Modeling tools are used merely for documenting the work later on, which is not economical. There is a need for flexible modeling tools that support the modeling in earlier phases of the work by allowing more freeform and informal descriptions as a part of the model. Tools like spreadsheets, word processing tools, and vector graphics tools are commonly used in software development. In this paper, we consider an approach where such a tool is enhanced with modeling support, in order to gain better support for the actual modeling work. We also show how we have created a graphical repository based case tool by using Microsoft Visio, and conclude the approach to be practical. © 2010 ACM. (28 refs)
Main heading: Software architecture
Controlled terms: Computational linguistics - Software design - Technical presentations - Word processing
Uncontrolled terms: CASE tools - Commonly used - Flexible tool - Freeforms - Meta model - MicroSoft - modeling - Modeling tool - Processing tools - Software development - Software modeling tools - Vector graphics
Classification Code: 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
131. Towards clone detection in UML domain models
Störrle, Harald (1)
Source: ACM International Conference Proceeding Series, p 285-293, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842805; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Technical University of Denmark, Richard Petersens Plads, 2800 Lyngby, Denmark
Abstract: Code clones are a substantial problem for code based development; it is not surprising that model clones are a problem for model based development, too. Past experience with model version control vs. code version control suggests, however, that there are radically different problems and techniques on the code level than on the model level. In this paper, we explore the problems and possibilities associated with detecting clones in UML domain models. In particular, we have designed a number of algorithms and heuristics to detect clones, and have implemented them in the MQlone tool (read as “m clone”). However, all of the approaches we have studied so far have their weak spots, so that we cannot present a universal solution. Further work is required to refine and combine the approaches studied here, and test them on larger populations of models. While the related work faces similar unsolved problems our approach is the first one to deal with UML as a whole rather than with Matlab/Simulink or individual UML model types. © 2010 ACM. (24 refs)
Main heading: Software architecture
Controlled terms: Cloning - Technical presentations - Unified Modeling Language
Uncontrolled terms: Clone detection - Code clone - Code versions - Domain model - MATLAB /simulink - Model based development - UML - UML Model - Universal solutions - Unsolved problems - Version control
Classification Code: 461.8.1 Genetic Engineering - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
132. Unifying software architecture with its implementation
Woods, Eoin (1); Rozanski, Nick (2)
Source: ACM International Conference Proceeding Series, p 55-58, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842767; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Artechra, Hemel Hempstead, United Kingdom (2) Artechra, London, United Kingdom
Abstract: This paper proposes a research challenge to narrow the gap between the architecture and implementation of a software system. We discuss the situation today, where little of a system’s architecture and design is directly represented in the source code of its implementation and explore why this is a problem and the benefits that might flow from narrowing this gap. We then discuss how the situation could be improved by the creation of technologies that allow the design and architecture of a system to be directly related to its source code and outline the requirements that we believe that any such technology would need to fulfill. Finally, we consider the likely results of widespread application of such a technology and the benefits that would follow. © 2010 ACM. (10 refs)
Main heading: Software architecture
Controlled terms: Design - Technical presentations
Uncontrolled terms: Design representation - Research challenges - Software systems - Source codes
Classification Code: 408 Structural Design - 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
133. Modeling security for service oriented applications
Kou, Siming (1); Babar, Muhammad Ali (2); Sangroya, Amit (3)
Source: ACM International Conference Proceeding Series, p 294-301, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842806; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Shanghai Fandi Information Ltd., Caoxi North Street367, Xuhuiqu, Shanghai, China (2) ITU Copenhagen, Copenhagen, Denmark (3) IIIT Hyderabad, Hyderabad, India
Abstract: Security is an important quality attribute for Service Oriented Architecture (SOA) based system. However, there is no sufficient support for modelling security-centric concerns for SOA based application. This paper presents a metamodel called SoaML4Security, which introduces QoS concepts into Service oriented Modelling Language (SoaML) in order to support the modelling of security aspect. We motivate the need of extending SoaML for modelling security concerns from different viewpoints. We describe the process of developing the metamodel, which can support Model Driven Engineering (MDE) approach for service-oriented applications. The use of the extended metamodel has been demonstrated by modelling a real world service-oriented application for security requirements. © 2010 ACM. (17 refs)
Main heading: Service oriented architecture (SOA)
Controlled terms: Information services - Quality of service - Software architecture - Technical presentations
Uncontrolled terms: MDE - QOS - security - SOA - SoaML
Classification Code: 903.4 Information Services - 903.2 Information Dissemination - 723 Computer Software, Data Handling and Applications - 722.4 Digital Computers and Systems - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
134. Categorizing and modeling variation in families of systems: A position paper
Simidchieva, Borislava I. (1); Osterweil, Leon J. (1)
Source: ACM International Conference Proceeding Series, p 316-323, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842811; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Laboratory for Advanced Software Engineering Research (LASER), Department of Computer Science, University of Massachusetts Amherst, 140 Governors Drive, Amherst, MA 01003, United States
Abstract: This paper presents an approach that considers variation in systems and system architectures according to the kind of relation among the variants in the software family. The approach highlights why it is beneficial to consider such different variation relations separately and gives examples of what these relations may be. Two main categories of variation relations are presented, based on whether the system architecture remains constant (architecture-based variation), or whether the architecture itself is variable, i.e. the variants do not share a common architecture. The paper introduces several different kinds of variation families that seem to belong to these two categories, as well as yet other families comprising variants that do not neatly fit in either category, with only a subset of the variants sharing a common architecture. Each kind of variation relation is illustrated with an example software family from different domains, including operating systems (OS). © 2010 ACM. (25 refs)
Main heading: Software architecture
Controlled terms: Computer operating systems - Problem oriented languages - Technical presentations
Uncontrolled terms: Software family - Software Product Line - System architectures - variability - variation
Classification Code: 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
135. Model-based enhancement of software performance for precision critical systems
Muhammad, Naeem (1); Boucke, Nelis (1); Berbers, Yolande (1)
Source: ACM International Conference Proceeding Series, p 27-30, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842760; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) DistriNet Research Group, Department of Computer Science, Katholieke Universiteit Leuven, Leuven, Belgium
Abstract: Architectural level analysis of a software system for its quality attributes is a proven cost-effective approach. This is particularly significant for performance, which defines multiple aspects of the quality of the system. In this paper we outline the contribution of a PhD, which provides architecture viewpoint based modeling and analysis support for parallelism and flow latency aspects of the performance, in legacy systems. The main contribution of the PhD includes Parallelism Viewpoint and Flow Latency Viewpoint. We use the proposed viewpoints to find parallelism and flow latencies specific performance bottlenecks of an industrial case, a precision critical electron microscope software system. The preliminary results of using Parallelism Viewpoint for our example case show that the viewpoint provides a profound insight into the thread-model of the system, which helps in reducing the excessively used parallelism in the system. © 2010 ACM. (8 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Industry - Legacy systems - Technical presentations
Uncontrolled terms: Architectural levels - Cost-effective approach - Critical systems - flow latency viewpoint - Latency aspects - Model-based - Modeling and analysis - parallelism viewpoint - Performance bottlenecks - Quality attributes - Software performance - Software systems
Classification Code: 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
136. Modeling a composite RESTful web service with UML
Rauf, Irum (1); Ruokonen, Anna (2); Systa, Tarja (2); Porres, Ivan (1)
Source: ACM International Conference Proceeding Series, p 253-260, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842801; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Dept. of Information Technologies, Abo Akademi University, Turku, Finland (2) Dept. of Software Systems, Tampere University of Technology, Tampere, Finland
Abstract: The process of web service composition involves different partner web services that are published over the internet. The Representational-State Transfer (REST) web services adopt different architectural style compared to Remote Procedure Call (RPC) web services. In this paper, we address these differences in the context of web service compositions and motivate the need for new designing techniques that lead to RESTful interfaces. We provide a UML based modeling approach for the composition of RESTful web services that models the composition for its static and behavioral features. These models provide RESTful compositions by construction, serve as a part of specification document, have mapping to several web implementation languages and can also be used to validate a RESTful composition. We illustrate the applicability of the approach with a sample Hotel and Flight booking RESTful composite web service. © 2010 ACM. (19 refs)
Main heading: Web services
Controlled terms: Query languages - Security of data - Software architecture - Technical presentations
Uncontrolled terms: Architectural style - Behavioral features - Composite Web services - Designing techniques - Modeling approach - Remote procedure calls - RESTful Web services - State transfer - Web implementation - Web service composition
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
137. Integrating recommender information in social ecosystems decisions
Capuruço, Renato A. C. (1); Capretz, Luiz F. (1)
Source: ACM International Conference Proceeding Series, p 143-150, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842783; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) University of Western Ontario, Dept. of Electrical and Computer Engineering, London, ON N6A 5B9, Canada
Abstract: The exploration of online social ecosystems whose members share mutual recommendations and interactions is a time-dependent and contextual-based process which aims to predict the social status among them. To address the difficulties associated with the process, this article presents the integration of the predictive recommender, social networks, and interaction components into a single methodology. The originality of the proposed framework stems from developing each model based on: (1) a time history and decay algorithm to consider temporal recommendations and interactions; (2) a predictive-aggregating function for different types of social contexts; and, (3) a homophily algorithm to evaluate people’s interconnections proximity. Details of the framework are described, a recommender search strategy methodology integrating all of the above is devised, and a case study is used to demonstrate its capabilities. Possible extensions are then outlined. © 2010 ACM. (15 refs)
Main heading: Software architecture
Controlled terms: Ecosystems - Integration - Network architecture - Social networking (online) - Technical presentations
Uncontrolled terms: Homophily - Model-based - Recommender systems - Search strategies - Social context - Social ecosystems - Social Networks - Social status - Time history - Time-dependent
Classification Code: 454.3 Ecology and Ecosystems - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 921.2 Calculus
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
138. On the role of software process modeling in software ecosystem design
Pettersson, Oskar (1); Svensson, Martin (1); Gil, Didac (1); Andersson, Jesper (2); Milrad, Marcelo (1)
Source: ACM International Conference Proceeding Series, p 103-110, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842778; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) CELEKT Group, Linnaeus University, Växjö, Sweden (2) Software Technology Group, Linnaeus University, Växjö, Sweden
Abstract: Software Ecosystems (SECOs) have in recent years emerged as a promising approach for improved inter and intra organizational reuse and for reusability involving end-users in the software development process. Understanding the software’s role in a larger perspective and how it interconnects with stakeholders is key for progress in those directions. However, for SECOs, several theoretical and methodological gaps remain to be charted. This paper identifies one such gap, the need for precise process modeling. It elaborates on experiences gained from the analysis of a SECO for mobile learning and brings up several aspects and insights for this particular domain. The main contributions are an initial reference model for the mobile learning domain and an outline for an analysis method for domain specific SECOs. © 2010 ACM. (18 refs)
Main heading: Software design
Controlled terms: Computer software reusability - Ecosystems - Reusability - Software architecture - Technical presentations
Uncontrolled terms: Analysis method - Domain specific - End-users - Mobile Learning - mobile learning ecosystem - Process Modeling - Reference models - Role of software - Software development process - Software ecosystems - Software process modeling
Classification Code: 452.3 Industrial Wastes - 454.3 Ecology and Ecosystems - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
139. Structuring very large domain models: Experiences from industrial MDSD projects
Störrle, Harald (1)
Source: ACM International Conference Proceeding Series, p 49-54, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842766; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Technical University of Denmark, Richard Petersens Plads, 2800 Lyngby, Denmark
Abstract: View/Viewpoint approaches like IEEE 1471-2000, or Kruchten’s 4+1-view model are used to structure software architectures at a high level of granularity. While research has focused on architectural languages and with consistency between multiple views, practical questions such as the structuring at a lower level of detail have not been dealt with. This paper aims at filling this gap by reporting personal experiences from a very large scale industrial domain modeling project. There, structuring the logical view turned out to be a critical success factor. We explain the project and its setting, analyze the role and repercussions of model structuring, and examine the implications model structuring decisions have on other parts of the project. We then explain the model structure abstracted from a very large scale industrial modeling project. Finally, we discuss lessons learned. © 2010 ACM. (14 refs)
Main heading: Software architecture
Controlled terms: Industry - Query languages - Technical presentations
Uncontrolled terms: Critical success factor - Domain modeling - IEEE 1471 - Industrial modeling - Large domain - Level of detail - Model structuring - Multiple views - Personal experience
Classification Code: 723.1 Computer Programming - 723.3 Database Systems - 903.2 Information Dissemination - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
140. 8th Nordic Workshop on Model-Driven Software Engineering (NW-MODE 2010)
Wasowski, Andrzej (1); Truscan, Dragos (2); Kuzniarz, Ludwik (3)
Source: ACM International Conference Proceeding Series, p 243-244, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842799; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) IT University, Copenhagen, Denmark (2) Åbo Akademi University, Turku, Finland (3) Blekinge Institute of Technology, Sweden
Abstract: The Nordic Workshop on Model Driven Software Engineering brings together industry practitioners and academic researchers to share experiences and latest research on model driven software engineering and development. The workshop is a forum to present experiences and ongoing research in software engineering and model-driven engineering in particular, but also functions as an event for establishing co-operative research projects between the participants and working on joint research papers. The workshop provides an open forum, reserving ample time for discussions. The workshop has 7 editions of past history. Prior instances were held in Reykjavik (Island), Ronneby (Sweden), Grimstad (Norway), Tampere (Finland), and Turku (Finland). © 2010 ACM. (8 refs)
Main heading: Technical presentations
Controlled terms: Industry - Research - Software architecture
Uncontrolled terms: Finland - Model driven software engineering - Model-driven - Model-driven Engineering - Research papers - Reykjavik - Tampere
Classification Code: 723.1 Computer Programming - 901.2 Education - 901.3 Engineering Research - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
141. 2nd International Workshop on Software Ecosystems (EcoSys)
Campbell, P.R.J. (1); Ahmed, Faheem (1); Bosch, Jan (2); Jansen, Slinger (3)
Source: ACM International Conference Proceeding Series, p 63-64, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842771; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) UAE University, P.O. Box 17551, Al Ain, United Arab Emirates (2) Intuit, Mountain View, CA, United States (3) Utrecht University, Utrecht, Netherlands
Abstract: The concept of software ecosystems encourages external developers to use an organizations’ software platform and contribute in product development. This establishes a community that further accelerates the sharing of knowledge, content, issues, expertise, and skills. A number of major international software development organizations including Amazon, Nokia, and Apple are pioneering the development of software ecosystems and the area is currently gaining significant momentum in the software field, making it an essential area for research. This workshop aims to enhance current understanding and knowledge in this field by providing a forum for leading scientists and software professionals to exchange ideas and discuss current results. Such a forum will help to foster a mutual understanding of the current and future issues that face professionals involved in the development of software. Furthermore as software ecosystems are novel area of research this forum will provide an essential platform in which current work can be presented and discussed and future research directions identified. © 2010 ACM. (12 refs)
Main heading: Software design
Controlled terms: Ecosystems - Knowledge management - Product development - Research - Software architecture - Technical presentations
Uncontrolled terms: Future research directions - International workshops - Mutual understanding - Software development organizations - Software ecosystems - Software platforms
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming - 723.5 Computer Applications - 901.2 Education - 901.3 Engineering Research - 913.1 Production Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
142. Workshop on Variability in Software Product Line Architectures (VARI-ARCH 2010)
Helleboogh, Alexander (1); Avgeriou, Paris (2); Boucké, Nelis (1); Heymans, Patrick (3)
Source: ACM International Conference Proceeding Series, p 309-311, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842809; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Catholic University of Leuven, Celestijnenlaan 200A, 3000 Leuven, Belgium (2) University of Groningen, PO Box 407, 9700 AK Groningen, Netherlands (3) University of Namur, rue de Bruxelles 61, 5000 Namur, Belgium
Abstract: The objective of this workshop is to bring together researchers from the software product line community and software architecture community to identify critical challenges and progress the state-of-the-art on variability in software product line architectures. © 2010 ACM.
Main heading: Software architecture
Controlled terms: Technical presentations
Uncontrolled terms: assets - concern - Product line architecture - Product-lines - variability - view - viewpoint
Classification Code: 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
143. Software ecosystems: A software ecosystem strategy assessment model
Van Den Berk, Ivo (1); Jansen, Slinger (1); Luinenburg, Lútzen (2)
Source: ACM International Conference Proceeding Series, p 127-134, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842781; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Utrecht University, Netherlands (2) GX Software
Abstract: Software companies and organizations increasingly open up their business to other software companies and as a consequence they find themselves in an ecosystem of software companies, developers and partners. These actors, and especially the software organization that is at the core of this ecosystem, are having difficulties in getting insight into this ecosystem and how their actions influence its performance. In this paper a model is presented that describes the key characteristics of a Software Ecosystem. The central hub of a Software Ecosystem can use data on these characteristics to its strategic advantage. This is demonstrated by the use of the model in a case study of a hub in a software ecosystem. © 2010 ACM. (23 refs)
Main heading: Ecosystems
Controlled terms: Industry - Software architecture - Technical presentations
Uncontrolled terms: Assessment models - Business ecosystem - Key characteristics - Software company - software ecosystems - Software organization - Strategic advantages
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming - 903.2 Information Dissemination - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
144. Characterizing model usage in embedded software engineering: A case study
Mellegärd, Niklas (1); Staron, Miroslaw (1)
Source: ACM International Conference Proceeding Series, p 245-252, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842800; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Applied Information Technology, Chalmers University of Technology, University of Gothenburg, Germany
Abstract: During development of complex products, such as automotive software, models - formal and informal - are used throughout the development process by different roles and for different purposes - as requirement, as implementation or as documentation. This paper reports results from a case-study of the development of embedded software at a Swedish vehicle manufacturer. We investigated use of models from high-level product planning to low-level requirements specifications for software components. Furthermore, we investigated the distribution of effort among the models, requirements and other artefacts. The goal was to explore the spectrum of modelling techniques, methods and languages used and to establish a baseline for comparison with the state-of-the-art and other companies. The results show that there exist at least 8 different modelling notations. Moreover, we found that the majority of effort was spent on behaviour models, while static models - such as high-level design and requirements - were considered most important. © 2010 ACM. (22 refs)
Main heading: Embedded software
Controlled terms: Design - Formal methods - Industry - Software architecture - Technical presentations
Uncontrolled terms: analysis - Automotive software - Behaviour models - Complex products - Development process - High-level design - modelling - Modelling techniques - process - Product planning - requirements - Requirements specifications - Software component - Static model - Vehicle manufacturers
Classification Code: 408 Structural Design - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
145. Stakeholder identification and quality attribute prioritization for a global vehicle control system
McGee, Ryan A. (1); Eklund, Ulrik (2); Lundin, Mats (2)
Source: ACM International Conference Proceeding Series, p 43-48, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842765; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Research and Advanced Engineering, Ford Motor Company, Dearborn, MI, United States (2) Electric and Electronic Systems Engineering, Volvo Car Corporation, Göteborg, Sweden
Abstract: An industrial case study in stakeholder identification and quality attribute prioritization for a Vehicle Control System (VCS) is presented. The system stakeholders were identified and a list of quality attributes was developed. A team of co-located Ford Motor Company engineering liaisons identified and interviewed stakeholders from their home organizations. The interview results were processed quantitatively and the top quality attributes were identified. Lessons learned from the process are included. © 2010 ACM. (11 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Control system synthesis - Identification (control systems) - Industrial applications - Industry - Research - Technical presentations - Vehicles
Uncontrolled terms: automotive - Industrial case study - Quality attributes - stakeholders - vehicle control system
Classification Code: 912 Industrial Engineering and Management - 911 Cost and Value Engineering; Industrial Economics - 901.3 Engineering Research - 913 Production Planning and Control; Manufacturing - 901.2 Education - 723 Computer Software, Data Handling and Applications - 432 Highway Transportation - 731.1 Control Systems
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
146. Architecting in software ecosystems: Interface translucence as an enabler for scalable collaboration
Cataldo, Marcelo (1); Herbsleb, James D. (1)
Source: ACM International Conference Proceeding Series, p 65-72, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842772; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Institute for Software Research, Carnegie Mellon University, Pittsburgh, PA 15213, United States
Abstract: Software ecosystems are emerging as an alternative approach for the development of complex software systems. The potentially transformational benefits of software ecosystems stems, primarily, from two basic principles that software ecosystems have embraced: transparency, a pillar in open source development, and modular system design. Despite the benefits associated with transparency and modularity, there are also important challenges that deserve attention. In this paper, we introduce the concept of interface translucence as an architectural mechanism that seeks to overcome challenges faced by transparency and modular system design. Interface translucence leverages the important technical role that interfaces play in software architectures to bridge the technical and socio-organizational dimensions of software development in ecosystems. We present an application of the concept of interface translucence in the context of architecting a software system as well as in the context of implementing it. We conclude with a discussion of future research work. © 2010 ACM. (48 refs)
Main heading: Software architecture
Controlled terms: Computer software - Ecosystems - Software design - Technical presentations - Transparency
Uncontrolled terms: awareness - collaboration - interface translucence - modularity - Software ecosystems
Classification Code: 454.3 Ecology and Ecosystems - 723 Computer Software, Data Handling and Applications - 741.1 Light/Optics - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
147. Towards micro architecture for security adaptation
Evesti, Antti (1); Pantsar-Syväniemi, Susanna (1)
Source: ACM International Conference Proceeding Series, p 181-188, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842790; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) VTT Technical Research Centre of Finland, Kaitoväylä 1, P.O. Box 1100, 90571 Oulu, Finland
Abstract: Normally, software development practices concentrate to take all security requirements into account at design-time. Nevertheless, today’s software products are intended to be used in mobile, or alternatively, in embedded devices whose environment changes during the application’s execution. These kinds of changes occur especially in applications used in smart spaces. This enforces to think security concerns more dynamically. Thus, software has to be aware of its 1) security level in each time, and 2) changes in its environment that can cause security threats. Based on this awareness, software has to change its security mechanisms to fulfil security requirements in the current context. A security measurement is a key factor of this awareness. This work presents a micro-architecture for security adaptation and taxonomy of context information affecting to information security in smart spaces. The security measurement is the essential part of the micro-architecture. In addition, taxonomy describes concepts that have to be monitored in the smart space environment. © 2010 ACM. (25 refs)
Main heading: Security of data
Controlled terms: Computer software selection and evaluation - Embedded software - Software architecture - Software design - Taxonomies - Technical presentations
Uncontrolled terms: Context information - Embedded device - Environment change - Information security - Key factors - Micro architectures - quality - Runtimes - Security level - Security measurement - Security mechanism - Security requirements - Security threats - Smart space - Software development practices - Software products - Take-all
Classification Code: 723 Computer Software, Data Handling and Applications - 903 Information Science - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
148. Capturing exploration to improve software architecture documentation
Su, Moon Ting (1)
Source: ACM International Conference Proceeding Series, p 17-21, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842758; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science, University of Auckland, Auckland, New Zealand
Abstract: To facilitate the improved use of a software architecture document (AD), architectural information it contains needs to be structured into and/or presented as chunks: groupings of related information. The focus of our study is on the identification and creation of useful chunks of architectural information in ADs and the development of support tools to create and use this knowledge. We anticipate this will help stakeholders locate required architectural information facilitating its (re-)use. The main approach employed in this study is to capture and save users’ AD exploration paths and related metadata, analyzing the exploration paths to find common patterns that serve as potential chunks of architectural information and using them to improve software ADs and documentation tool. Ultimately, this research aims to achieve user-driven chunking of architectural information in AD, to support information searching and better understanding of AD. © 2010 ACM. (35 refs)
Main heading: Software architecture
Controlled terms: Knowledge management - Metadata - Security of data - Technical presentations
Uncontrolled terms: Architectural knowledge - chunking - documentation - Documentation tools - exploration - Information searching - Support tool
Classification Code: 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
149. A method for analyzing software product line ecosystems
McGregor, John D. (1)
Source: ACM International Conference Proceeding Series, p 73-80, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842773; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) School of Computing, Clemson University, Clemson, SC 29634, United States
Abstract: The ecosystem for a software product line includes all of the entities with which the software product line organization interacts. Information, artifacts, customers, money and products move among these entities as a part of the planning, development, and deployment processes. In this paper we present an analysis technique that uses the economic notion of a transaction to examine the transfers between the entities. The result of the analysis is data that is used to evaluate and structure the organization. We illustrate with an example. © 2010 ACM. (10 refs)
Main heading: Software architecture
Controlled terms: Ecosystems - Technical presentations
Uncontrolled terms: Analysis techniques - Deployment process - Software ecosystems - Software Product Line
Classification Code: 454.3 Ecology and Ecosystems - 723.1 Computer Programming - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
150. A comparison of software design security metrics
Mellado, Daniel (1); Fernández-Medina, Eduardo (2); Piattini, Mario (2)
Source: ACM International Conference Proceeding Series, p 236-242, 2010, 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010 Proceedings - Companion Volume; ISBN-13: 9781450301794; DOI: 10.1145/1842752.1842797; Conference: 4th European Conference on Software Architecture: Doctoral Symposium, Industrial Track and Workshops, ECSA 2010, August 23, 2010 - August 26, 2010; Sponsor: FIRST; SAS; Publisher: Association for Computing Machinery
Author affiliation: (1) University of Castilla-La Mancha, GSyA Research Group, Information Systems and Technologies Department, Cobertizo de San Pedro Mártir, 45071 Toledo, Spain (2) University of Castilla-La Mancha, Information Systems and Technologies Department, Institute of Information Technologies and Systems, Paseo de la Universidad 4, 13071 Ciudad Real, Spain
Abstract: A lack of security metrics signifies that it is not possible to measure the success of security policies, mechanisms and implementations, and security cannot, in turn, be improved if it cannot be measured. The importance of the use of metrics to obtain security quality is thus widely accepted. However, the definition of security metrics concerns a discipline which is still in its first stages of development, meaning that few documented resources or works centring on this subject exist to date. In this paper we shall therefore study the latest existing models with which to define security metrics and their components as aspects that have a bearing on the quality of software products with the intention that this will serve as a basis for continued advancement in research into this area of knowledge. © 2010 ACM. (27 refs)
Main heading: Software architecture
Controlled terms: Computer software selection and evaluation - Design - Software design - Technical presentations
Uncontrolled terms: Design security - measures - metrics - Quality of softwares - security - Security metrics - Security policy
Classification Code: 408 Structural Design - 723 Computer Software, Data Handling and Applications - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	


