	
4. Simulink models are also software: Modularity assessment
Dajsuren, Yanja (1); Van Den Brand, Mark G.J. (1); Serebrenik, Alexander (1); Roubtsov, Serguei (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 99-106, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465482; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Eindhoven University of Technology, 5612 AZ Eindhoven, Netherlands
Abstract: In automotive industry, more and more complex electronics and software systems are being developed to enable the innovation and to decrease costs. Besides the complex multimedia, comfort, and safety systems of conventional vehicles, automotive companies are required to develop more and more complex engine, aftertreatment, and energy management systems for their (hybrid) electric vehicles to reduce fuel consumption and harmful emissions. MATLAB/Simulink is one of the most popular graphical modeling languages and a simulation tool for validating and testing control software systems. Due to the increasing complexity and size of Simulink models of automotive software systems, it has become a necessity to maintain the Simulink models. In this paper, we defined metrics for assessing the modularity of Simulink models. A Java tool developed to measure the defined metrics on Simulink models interfaces with a visualization tool to facilitate the maintenance tasks of the Simulink models. The modularity metrics is furthermore validated in two phases. In the first phase, the modularity measurement is validated against the experts evaluation of a system. In the second phase, we studied the relationship between metric values and number of faults. We have observed that high coupling metric values frequently correspond to number of faults. Modularity metrics will be extended to architectural quality metrics for automotive systems. Copyright 2013 ACM. (54 refs)
Main heading: Computer software
Controlled terms: Automotive industry - Energy management systems
Uncontrolled terms: Architectural quality - Automotive companies - Automotive software systems - Control software system - Graphical modeling language - Modularity - Quality metrics - Simulink models
Classification Code: 661 Automotive Engines and Related Equipment - 662 Automobiles and Smaller Vehicles - 663 Buses, Tractors and Trucks - 664 Automotive Engineering, General - 706 Electric Transmission and Distribution - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
5. Architecture-based self-protecting software systems
Yuan, Eric (1); Malek, Sam (1); Schmerl, Bradley (2); Garlan, David (2); Gennari, Jeff (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 33-42, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465479; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) George Mason University, 4400 University Drive, Fairfax, VA, 22030, United States (2) Carnegie Mellon University, 5000 Forbes Avenue, Pittsburgh PA, 15213, United States
Abstract: Since conventional software security approaches are often manually developed and statically deployed, they are no longer sufficient against today’s sophisticated and evolving cyber security threats. This has motivated the development of self-protecting software that is capable of detecting security threats and mitigating them through runtime adaptation techniques. In this paper, we argue for an architecture-based self-protection (ABSP) approach to address this challenge. In ABSP, detection and mitigation of security threats are informed by an architectural representation of the running system, maintained at runtime. With this approach, it is possible to reason about the impact of a potential security breach on the system, assess the overall security posture of the system, and achieve defense in depth. To illustrate the effectiveness of this approach, we present several architecture adaptation patterns that provide reusable detection and mitigation strategies against well-known web application security threats. Finally, we describe our ongoing work in realizing these patterns on top of Rainbow, an existing architecture-based adaptation framework. Copyright 2013 ACM. (33 refs)
Main heading: Security of data
Controlled terms: Security systems - Software architecture
Uncontrolled terms: Adaptation framework - Architectural representation - Architecture adaptation - Mitigation strategy - Runtime adaptation - Self-protection - Software security - Web application security
Classification Code: 723 Computer Software, Data Handling and Applications - 914.1 Accidents and Accident Prevention
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
6. Generating service models by trace subsequence substitution
Du, Miao (1); Schneider, Jean-Guy (1); Hine, Cameron (1); Grundy, John (1); Versteeg, Steve (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 123-132, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465485; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Faculty of Information and Communication Technologies, Swinburne University of Technology, Hawthorn, VIC 3122, Australia (2) CA Labs, 380 St. Kilda Rd., Melbourne, VIC 3004, Australia
Abstract: Software service emulation is an emerging technique for creating realistic executable models of server-side behaviour and is particularly useful in quality assurance: replicating production-like conditions for large-scale enterprise software systems. This allows performance engineers to mimic very large numbers of servers and/or provide a means of controlling dependencies on diverse third-party systems. Previous approaches to service emulation rely on manual definition of interaction behaviour requiring significant human effort. They also rely on either a system expert or documentation of system protocol and behaviour, neither of which are necessarily available. We present a novel method of automatically building client-server and server-server interaction models of complex software systems directly from interaction trace data, utilising longest common subsequence matching and field substitution algorithms. We evaluate our method against two common application-layer protocols: LDAP and SOAP. The results show that without explicit knowledge of the protocol specifications, our generated service models can produce well-formed responses for interactions. These responses can then be used within an emulation framework for large-scale enterprise system quality assurance purposes. Copyright 2013 ACM. (25 refs)
Main heading: Behavioral research
Controlled terms: Computer software - Enterprise software - Quality assurance
Uncontrolled terms: Application-layer protocol - Complex software systems - Emulation framework - Enterprise software systems - Interaction emulation - Longest common subsequences - Protocol specifications - Service emulation
Classification Code: 723 Computer Software, Data Handling and Applications - 913.3 Quality Assurance and Control - 971 Social Sciences
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
7. Model-based performance analysis of software architectures under uncertainty
Trubiani, Catia (1); Meedeniya, Indika (2); Cortellessa, Vittorio (1); Aleti, Aldeida (3); Grunske, Lars (4)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 69-78, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465487; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) University of L’Aquila, Italy (2) Portland House Group, Australia (3) Monash University, Australia (4) Universität Stuttgart, Germany
Abstract: Performance analysis is often conducted before achieving full knowledge of a software system, in other words under a certain degree of uncertainty. Uncertainty is particularly critical in the performance domain when it relates to values of parameters such as workload, operational profile, resource demand of services, service time of hardware devices, etc. The goal of this paper is to explicitly consider uncertainty in the performance modelling and analysis process. In particular, we use probabilistic formulation of parameter uncertainties and present a Monte Carlo simulation-based approach to systematically assess the robustness of an architectural model despite its uncertainty. In case of unsatisfactory results, we introduce refactoring actions aimed at generating new software architectural models that better tolerate the uncertainty of parameters. The proposed approach is illustrated on a case study from the e-Health domain. Copyright 2013 ACM. (23 refs)
Main heading: Uncertainty analysis
Controlled terms: Monte Carlo methods - Software architecture
Uncontrolled terms: Degree of uncertainty - Parameter uncertainty - Performance - Performance analysis - Performance modelling - Probabilistic formulation - Software architectural - Software architecture evaluation
Classification Code: 723.1 Computer Programming - 922.1 Probability Theory - 922.2 Mathematical Statistics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
8. Improving product copy consolidation by architecture-aware difference analysis
Klatt, Benjamin (1); Küster, Martin (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 117-122, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465495; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) FZI Research Center for Information Technology, Haid-und-Neu-Str. 10-14, Karlsruhe, Germany
Abstract: Software product lines (SPL) are a well-known concept to efficiently develop product variants. However, migrating customised product copies to a product line is still a labour-intensive challenge due to the required comprehension of differences among the implementations and SPL design decisions. Most existing SPL approaches are focused on forward engineering. Only few aim to handle SPL evolution, but even those lack support of variability reverse engineering, which is necessary for migrating product copies to a product line. In this paper, we present our continued concept on using component architecture information to enhance a variability reverse engineering process. Including this information particularly improves the difference identification as well as the variation point analysis and -aggregation steps. We show how the concept can be applied by providing an illustrating example. Copyright 2013 ACM. (17 refs)
Main heading: Architecture
Controlled terms: Computer software - Reverse engineering - Software design
Uncontrolled terms: Component architectures - Design decisions - Forward engineerings - Product variants - Reverse engineering process - Software Product Line - Software product lines - Variation points
Classification Code: 402 Buildings and Towers - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
9. Performance analysis of self-adaptive systems for requirements validation at design-time
Becker, Matthias (1); Luckey, Markus (2); Becker, Steffen (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 43-52, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465489; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Software Engineering Group, Heinz Nixdorf Institute, University of Paderborn, Zukunftsmeile 1, 33102 Paderborn, Germany (2) Department of Computer Science, University of Paderborn, Zukunftsmeile 1, 33102 Paderborn, Germany
Abstract: Self-adaptation allows continuously running software systems to operate in changing and uncertain contexts while meeting their requirements in a broad range of contexts, e.g., from low to high load situations. As a consequence, requirements for self-adaptive systems are more complex than requirements for static systems as they have to explicitly address properties of the self-adaptation layer. While approaches exist in the literature to capture this new type of requirements formally, their achievement cannot be analyzed in early design phases yet. In this paper, we apply RELAX to formally specify non-functional requirements for self-adaptive systems. We then apply our model-based SimuLizar approach for a semi-automatic analysis to test whether the self-adaptation layer ensures that these nonfunctional requirements are met. We evaluate our approach on the design of a proof-of-concept load balancer system. As this evaluation demonstrates, we can iteratively improve our system design by improving unsatisfactory self-adaption rules. Copyright 2013 ACM. (23 refs)
Main heading: Adaptive systems
Uncontrolled terms: Early design phasis - Non-functional requirements - Performance analysis - Performance engineering - Requirements - Requirements validation - Self-adaptive - Self-adaptive system
Classification Code: 731.1 Control Systems
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
10. A causal model to predict the effect of business process evolution on quality of service
Feugas, Alexandre (1); Mosser, Sébastien (2); Duchien, Laurence (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 143-152, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465486; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) INRIA Lille - Nord Europe, LIFL - UMR CNRS 8022, Univ. Lille 1, France (2) I3S - UMR CNRS 7271, Univ. Nice Sophia-Antipolis, Nice, France
Abstract: Managing Quality of Service (QoS) of Service-based systems is a key challenge to produce systems that fulfill their requirements. Verifying the respect of a QoS contract in a system becomes more and more difficult as systems are more and more complex. Moreover, systems have to evolve in order to fulfil constantly changing requirements. As QoS properties are influenced by hidden factors such as connection rate or the system execution itself, determining the cause of a performance degradation is not mainstream. We propose in this paper to identify the causal relations to make explicit the hidden factors of influence. We more specifically focus on the consequences of system evolution with respect to QoS properties: using causal relations, we aim at predicting the possible overhead caused by an evolution. This paper shows through an example of Business Process how our evolution analysis helps to understand the effect of evolution on QoS property such as the Response Time. We show its efficiency by comparing the prediction with measured values. Copyright 2013 ACM. (23 refs)
Main heading: Quality of service
Controlled terms: Forecasting
Uncontrolled terms: Business Process - Causal model - Evolution - Evolution analysis - Managing quality - Performance degradation - Service-based systems - System evolution
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723 Computer Software, Data Handling and Applications - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
11. A systematic review of system-of-systems architecture research
Klein, John (1); Van Vliet, Hans (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 13-21, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465490; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Software Engineering Institute, Pittsburgh, PA, United States (2) VU Amsterdam, Amsterdam, Netherlands
Abstract: Context: A system of systems is an assemblage of components which individually may be regarded as systems, and which possesses the additional properties that the constituent systems are operationally independent, and are managerially independent. Much has been published about the field of systems of systems by researchers and practitioners, often with the assertion that the system-of-systems design context necessitates the use of architecture approaches that are somewhat different from system-level architecture. However, no systematic review has been conducted to provide an extensive overview of system of systems architecture research. Objective: This paper presents such a systematic review. The objective of this review is to classify and provide a thematic analysis of the reported results in system of systems architecture. Method: The primary studies for the systematic review were identified using a predefined search strategy followed by an extensive manual selection process. Results: We found the primary studies published in a large number of venues, mostly domain-oriented, with no obvious center of a research community of practice. The field seems to be maturing more slowly than other software technologies: Most reported results described individuals or teams working in apparent isolation to develop solutions to particular system-of-systems architecture problems, with no techniques gaining widespread adoption. Conclusions: A comprehensive research agenda for this field should be developed, and further studies should be performed to determine whether the information system-related problems of system of systems architecture are covered by existing software architecture knowledge, and if not, to develop general methods for system-of-systems architecture. Copyright © ACM. (22 refs)
Main heading: Research
Controlled terms: Architecture - Software architecture - Systems engineering
Uncontrolled terms: Comprehensive research - Research communities - Software technology - System of systems - System-level architectures - System-of-systems architecture - Systematic Review - Systems of systems
Classification Code: 402 Buildings and Towers - 723.1 Computer Programming - 901.3 Engineering Research - 912 Industrial Engineering and Management - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
12. Leveraging design rules to improve software architecture recovery
Cai, Yuanfang (1); Wang, Hanfei (2); Wong, Sunny (3); Wang, Linzhang (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 133-142, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465480; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Dept. of Computer Science, Drexel University, Philadelphia, PA, United States (2) State Key Laboratory for Novel Software Technology, Dept. of Computer Science and Technology, Nanjing University, Nanjing, 210046, China (3) Clinical Solutions R and D, Siemens Healthcare, Malvern, PA, United States
Abstract: In order to recover software architecture, various clustering techniques have been created to automatically partition a software system into meaningful subsystems. While these techniques have demonstrated their effectiveness, we observe that a key feature within most software systems has not been fully exploited: most well-designed systems follow strong architectural design rules that split the overall system into modules. These design rules are often manifested as special program constructs, such as shared data structures or abstract interfaces, which should not belong to any of the subordinate modules. We contribute a new perspective of architecture recovery based on this rationale, which enables the combination of design-rule-based clustering with other clustering techniques, as well as enabling the splitting of a large system into subsystems. We evaluated our approach both quantitatively and qualitatively, using both open source and real industrial software projects. Copyright 2013 ACM. (33 refs)
Main heading: Open systems
Controlled terms: Computer software - Product design - Recovery - Software architecture
Uncontrolled terms: Abstract interfaces - Architecture recovery - Clustering techniques - Design Structure Matrices - Industrial software - Shared data structure - Software architecture recovery - Software systems
Classification Code: 531 Metallurgy and Metallography - 723 Computer Software, Data Handling and Applications - 913.1 Production Engineering
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
13. A multi-dimensional measure for intrusion - The intrusiveness quality attribute
Agrawal, Ashish (1); Sodhi, Balwinder (2); Prabhakar, T.V. (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 63-68, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465497; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer Science and Eng., Indian Institute of Technology Kanpur, Kanpur, 208016, India (2) Department of Computer Science and Eng., Indian Institute of Technology Ropar, Ropar, 140001, India
Abstract: Security in personal devices like mobile phones, tablets, is a major concern because these devices often carry sensitive information. Device platforms (e.g. Android) implement “limit access” and “authorize” security tactics to protect privacy/security-sensitive resources against misuse by an app. For instance, Android defines a set of 100+ permissions that guard resources such as phonebook data, network sockets and so on. However, due to poor understanding of these complex permissions, users inadvertently grant dangerous permissions to the apps, which defeat the security tactics implemented. Thus, security of a device is directly related to the capabilities granted to the intruder (app in this case). In this paper, we define a new quality attribute (QA) called Intrusiveness of an app, which characterizes the capabilities of an app to cause violation of personal and operational information of the user/device. We suggest a framework to compute “in-trusiveness” on a given platform. Intrusiveness of an app is represented as a 4-tuple. This tuple characterizes the extent to which the permissions, that are being sought by an app, could compromise in 4 dimensions of information, viz. User, Device, Carrier and the External World. It helps the user to realize the nature of privacy-sensitive resources that (s)he is exposing to the app. Efficacy of our framework is demonstrated by examining intrusiveness of 814 most popular free apps on Android. The Intrusiveness QA could be used to compute potential violation of User Personal Privacy, User Locational Privacy and violation of Device Integrity. Our analysis shows that 84% of apps examined are in a position to compromise User Personal Privacy, 96% can comprise Device Integrity and 92% can compromise Locational Privacy. Copyright 2013 ACM. (11 refs)
Main heading: Robots
Controlled terms: Data privacy
Uncontrolled terms: Android - Intrusiveness - Network sockets - Personal devices - Personal privacy - Phonebook - Quality attributes - Sensitive informations
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 731.5 Robotics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
14. Towards architecture-centric evolution of long-living systems (The ADVERT approach)
Konersmann, Marco (1); Durdik, Zoya (2); Goedicke, Michael (1); Reussner, Ralf H. (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 163-168, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465496; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Paluno - The Ruhr Institute for Software Technology, University of Duisburg-Essen, 45127 Essen, Germany (2) Software Design and Quality (SDQ), Karlsruhe Institute of Technology (KIT), 76131 Karlsruhe, Germany
Abstract: Although an intensive research attention has been paid to software evolution, there is no established approach which supports a software development and evolution round-trip between requirements, design decisions, architectural elements, and code. The ADVERT approach shall provide support for software evolution on an architectural level. ADVERT is based on two core ideas: (1) Maintaining trace links between requirements, design decisions, and architecture elements, and (2) explicitly integrating software architecture information into the code. The expected benefits of the approach are: (1) Eased understanding of the relationship between requirements and design, and (2) assured compliance between architectural design and implementation. In this position paper we explain our envisioned approach and demonstrate it on a CoCoME-based example, which is a benchmark for component-based modelling approaches. Copyright 2013 ACM. (20 refs)
Main heading: Software architecture
Controlled terms: Architecture - Design - Trace elements
Uncontrolled terms: Architectural element - Architectural levels - Architecture-centric - Design and implementations - Design decisions - Embedded architecture - Intensive research - Software Evolution
Classification Code: 402 Buildings and Towers - 408 Structural Design - 723.1 Computer Programming - 801 Chemistry - 804 Chemical Products Generally
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
15. Towards cost-aware service recovery
Zhou, Terry G. (1); Peake, Ian D. (2); Schmidt, Heinz W. (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 53-62, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465484; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) ESolutions, Monash University, Melbourne, Australia (2) CSIT School, RMIT University, Melbourne, Australia
Abstract: We present a semi-automated approach and framework for cost-aware recovery from service inconsistency arising due to unreliable service actions. A range of costs such as time are parameterised and modelled generically using cost algebras. With respect to a user-provided business specification, we distinguish end-state consistency, which must be achieved at service completion, from strong consistency, which may be momentarily violated. Our approach ensures optimal end-state consistency for services where action failure may lead to temporary violations of strong consistency or endstate consistency. Enterprises could not otherwise optimally and dynamically handle strong consistency violation, especially with respect to a variety of costs. Our approach provides quantitative analysis by defining a service model as an high-level message sequence chart (hMSC), annotating service actions with costs, then interpreting the model as a weighted (Mazurkiewicz) trace language, catering for costs in the presence of true concurrency. We devise a framework and method which checks such a model and ensures service end-state consistency optimally by concatenating the traces of recovery strategies (expressed by MSCs) from an enterprise service repository. We evaluate our approach using a popular online shop case study. Copyright 2013 ACM. (44 refs)
Main heading: Costs
Controlled terms: Algebra - Flowcharting - High level languages - Industry - Recovery
Uncontrolled terms: Concurrency - Enterprise services - LTL - Message Sequence Charts - MSC - Recovery strategies - Service recoveries - Trace languages
Classification Code: 531 Metallurgy and Metallography - 723.1 Computer Programming - 723.1.1 Computer Programming Languages - 911 Cost and Value Engineering; Industrial Economics - 921.1 Algebra
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
16. Cloud API issues: An empirical study and impact
Lu, Qinghua (1, 2); Zhu, Liming (1, 2); Bass, Len (1, 2); Xu, Xiwei (1); Li, Zhanwen (1); Wada, Hiroshi (1, 2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 23-32, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465481; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Software Systems Research Group, NICTA, Sydney, Australia (2) School of Computer Science and Engineering, University of New South Wales, Sydney, Australia
Abstract: Outages to the cloud infrastructures have been widely publicized and it would be easy to conclude that application developers only need to be concerned with large scale cloud provider infrastructure outages. Unfortunately, this is not the case. In-cloud applications heavily rely on cloud infrastructure APIs (directly or indirectly through scripts and consoles) for many sporadic activities such as deployment change, scaling out/in, backup, recovery and migration. Failures and/or issues around API calls are a large source of faults that could lead to application failures, especially during sporadic activities. Infrastructure outages can also be greatly exacerbated by API-related issues. In this paper we present an empirical study of issues in Amazon EC2 APIs. Some of the major findings around API issues include: 1) A majority (60%) of the cases of API failures are related to “stuck” API calls or unresponsive API calls. 2) A significant portion (12%) of the cases of API failures are about slow responsive API calls. 3) 19% of the cases of API failures are related to the output issues of API calls, including failed calls with unclear error messages, as well as missing output, wrong output, and unexpected output of API calls. 4) There are 9% cases of API failures reporting that their calls (performing some actions and expecting a state change) were pending for a certain time and then returned to the original state without informing the caller properly or the calls were reported to be successful first but failed later. We also classify the causes of API issues and discuss the impact of API issues on application architectures. Copyright © ACM. (28 refs)
Main heading: Application programming interfaces (API)
Controlled terms: Architecture - Cloud computing - Reliability
Uncontrolled terms: API - Application architecture - Application developers - Application failure - Cloud infrastructures - Cloud providers - Empirical studies - Fault-tolerant designs
Classification Code: 402 Buildings and Towers - 421 Strength of Building Materials; Mechanical Properties - 722.4 Digital Computers and Systems - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
17. A formal approach to technical debt decision making
Schmid, Klaus (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 153-162, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465492; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Software Systems Engineering, University of Hildesheim, Germany
Abstract: The notion of technical debt attracts significant attention, especially in the context of reconciling architecture and agile development. However, most work on technical debt is still largely informal and if it provides a formalization it is often ad-hoc. In this paper, we provide a detailed, formal analysis of decision making on technical debt in development. Using this formalization, we show that optimal decision making is not effectively computable in real-world situations and provide several well-defined approximations that allow to handle the problem nevertheless in practical situations. Combining these approximations in a single method leads to a light-weight approach that can be effectively applied in iterative software development, including agile approaches. Copyright 2013 ACM. (16 refs)
Main heading: Decision making
Controlled terms: Formal methods - Iterative methods
Uncontrolled terms: Cost estimations - Formal model - Incremental development - Software systems - Technical debts
Classification Code: 723.1 Computer Programming - 912.2 Management - 921.6 Numerical Methods
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
18. Evaluation framework for software architecture viewpoint languages
Tekinerdogan, Bedir (1); Demirli, Elif (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 89-98, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465483; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Bilkent University, Department of Computer Engineering, 06800 Bilkent Ankara, Turkey
Abstract: In general, software architecture is documented using software architecture views to address the different stakeholder concerns. The current trend recognizes that the set of viewpoints should not be fixed but multiple viewpoints might be introduced instead to design and document the software architecture. To ensure the quality of the software architecture various software architecture evaluation approaches have been introduced. In addition several documentation guidelines have been provided to ensure the quality of the software architecture document. Unfortunately, the evaluation of the adopted viewpoints that are used to design and document the software architecture has not been considered explicitly. If the architectural viewpoints are not well-defined then implicitly this will have an impact on the quality of the design and the documentation of the software architecture. We present an evaluation framework for assessing existing or newly defined software architecture viewpoint languages. The approach is based on software language engineering techniques, and considers each viewpoint as a metamodel. The approach does not assume a particular architecture framework and can be applied to existing or newly defined viewpoint languages. We illustrate our approach for modeling and reviewing the first and second editions of the viewpoint languages of the Views and Beyond approach. Copyright © ACM. (38 refs)
Main heading: Software architecture
Controlled terms: Computer programming languages - Design
Uncontrolled terms: Architectural viewpoints - Metamodeling - Software architecture evaluation - Software languages - Tool support
Classification Code: 408 Structural Design - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
19. Combining fUML and profiles for non-functional analysis based on model execution traces
Berardinelli, Luca (1); Langer, Philip (2); Mayerhofer, Tanja (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 79-88, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465493; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Information Engineering, Computer Science and Mathematics, University of L’Aquila, L’Aquila, Italy (2) Business Informatics Group, Vienna University of Technology, Vienna, Austria
Abstract: For developing software systems it is crucial to consider nonfunctional properties already in an early development stage to guarantee that the system will satisfy its non-functional requirements. Following the model-based engineering paradigm facilitates an early analysis of non-functional properties of the system being developed based on the elaborated design models. Although UML is widely used in modelbased engineering, it is not suitable for model-based analysis directly due to its lack of formal semantics. Thus, current model-based analysis approaches transform UML models into formal languages dedicated for analyses purpose, which may introduce accidental complexity of implementing the required model transformations. The recently introduced fUML standard provides a formal semantics of a subset of UML enabling the execution of UML models. In this paper, we show how fUML can be utilized for analyzing UML models directly without having to transform them. We present a reusable framework for performing model-based analyses leveraging execution traces of UML models and integrating UML profiles heretofore unsupported by fUML. A case study in the performance analysis domain is used to illustrate the benefits of our framework. Copyright 2013 ACM. (19 refs)
Main heading: Unified Modeling Language
Controlled terms: Formal languages - Semantics
Uncontrolled terms: FUML - Model-based analysis - Model-based engineering - Non functional properties - Non-functional analysis - Non-functional requirements - Performance analysis - Uml profiles
Classification Code: 723.1.1 Computer Programming Languages - 903.2 Information Dissemination
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
20. ORQA: Modeling energy and quality of service within AUTOSAR models
Tchakaloff, Borjan (1, 2); Saudrais, Sébastien (1); Babau, Jean-Philippe (2)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 3-12, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465488; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Embedded Systems Team, CERIE, ESTACA Laval, France (2) MOCS, CACS Team, Lab-STICC, UEB, UBO, Brest, France
Abstract: Electric vehicles embed a low amount of energy, so their devices need to be managed efficiently to optimize the vehicle autonomy. A vehicle management is achieved by the embedded systems, modeled following the Autosar standard. Autosar covers most of the automotive concerns, but it lacks energy consumption and user-oriented Quality of Service models. This paper presents Orqa, a framework to model and manage the electric vehicle devices through energy consumption and user-oriented Quality of Service. At design time, the architects choose and tune the actual vehicle device models through their power requirements and, if appropriate, quality levels. The generated implementation is then embedded in the existing Autosar models. Thus, at run-time, the vehicle’s system is able to evaluate the global consumption of a trip and to propose the user a specific driving strategy. The optional devices are managed throughout the trip, based on the driver preferences. Orqa is illustrated with a classic use-case: a work to home trip. Copyright 2013 ACM. (17 refs)
Main heading: Quality of service
Controlled terms: Electric vehicles - Embedded systems - Energy utilization
Uncontrolled terms: AutoSAR - Driving strategy - Global consumption - Model driven architectures - Power requirement - Quality of service model - Vehicle autonomy - Vehicle management
Classification Code: 723 Computer Software, Data Handling and Applications - 722 Computer Systems and Equipment - 718 Telephone Systems and Related Technologies; Line Communications - 717 Optical Communication - 716 Telecommunication; Radar, Radio and Television - 525.3 Energy Utilization - 432 Highway Transportation
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
21. On the appropriate rationale for using design patterns and pattern documentation
Durdik, Zoya (1); Reussner, Ralf H. (1)
Source: QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures, p 107-116, 2013, QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures; ISBN-13: 9781450321266; DOI: 10.1145/2465478.2465491; Conference: 9th International ACM Sigsoft Conference on the Quality of Software Architectures, QoSA 2013, June 17, 2013 - June 21, 2013; Sponsor: ACM SIGSOFT; Publisher: Association for Computing Machinery
Author affiliation: (1) Karlsruhe Institute of Technology (KIT), 76131 Karlsruhe, Germany
Abstract: Software design patterns are proven solutions for recurring design problems. Decisions on the use of a pattern in a software design form a specific but important class of design decisions. However, despite their importance, these design decisions are often mistaken and rarely documented. In our survey, about 90% of the participants confirmed to have experienced such problems. Therefore, we propose an approach that supports the appropriate use of design patterns and documentation of such decisions. The main idea is to create a pattern catalogue, where a pattern (as part of its catalogue entry) is annotated with general questions on the appropriateness of the use of the pattern. The envisioned benefits of this approach are a more appropriate use of design patterns, and documented design decisions on the use of patterns with positive effects on evolution. In this paper, we present the enriched pattern catalogue, and results of a survey with 21 software engineers as a validation of some entries of the pattern catalogue. Copyright 2013 ACM. (30 refs)
Main heading: Surveys
Controlled terms: Design - Software architecture - Software design - Surveying
Uncontrolled terms: Design decisions - Design Patterns - Design problems - Development process - Software design patterns
Classification Code: 405.3 Surveying - 408 Structural Design - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	


