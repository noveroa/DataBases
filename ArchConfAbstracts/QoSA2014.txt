	
3. Quality of service assurance for shared spectrum systems
Sohul, Munawwar M. (1); Ma, Xiaofu (1); Yang, Taeyoung (1); Reed, Jeffrey H. (1)
Source: Proceedings - IEEE Military Communications Conference MILCOM, p 1471-1476, November 13, 2014; ISBN-13: 9781479967704; DOI: 10.1109/MILCOM.2014.243; Article number: 6956964; Conference: 33rd Annual IEEE Military Communications Conference, MILCOM 2014, October 6, 2014 - October 8, 2014; Sponsor: AFCEA; IEEE Communications Society; Publisher: Institute of Electrical and Electronics Engineers Inc.
Author affiliation: (1) WirelessVT, Bradley Dept. of Electrical and Computer Engineering, Virginia Tech, Blacksburg; VA, United States
Abstract: Effective duration of a spectrum opportunity is an important factor for delivering any desired level of Quality-of-Service (QoS) to the secondary users (SU) in shared bands. Previous research efforts addressing the opportunity duration primarily focus on QoS prediction by the SUs using sensing and/or database approach. However, these initiatives to predict the opportunity duration and achievable QoS have a number of issues, such as prediction errors and computational overhead. In this paper, we present a QoS Assurance (QoSA) approach, in place of QoS prediction, centered around the Spectrum Access System (SAS) to get an idea about the opportunity duration with minimal involvement from the primary user (PU). In the existing approaches, the PU is not involved in the SU operation to avoid exposure of sensitive operational information. To address this concern, we propose an ‘Opportunity Clustering’ mechanism that reduces the likelihood of information exposure. This paper mainly focuses on the interference avoidance and achievable SU throughput improvement due to the QoSA approach. We present the QoSA approach and the SAS framework that incorporates the proposed approach. We also present different QoSA schemes to improve the achievable SU throughput. Simulation results validate the improvement offered by the QoSA approach in terms of interference avoidance and throughput achieved by the SU. (18 refs)
Main heading: Quality of service
Controlled terms: Forecasting - Military communications - Spectroscopy - Throughput
Uncontrolled terms: Computational overheads - Database approaches - Interference avoidance - Opportunity clustering - Quality of service assurances - Spectrum access - Spectrum sharing - Throughput improvement
Classification Code: 716 Telecommunication; Radar, Radio and Television - 717 Optical Communication - 718 Telephone Systems and Related Technologies; Line Communications - 723 Computer Software, Data Handling and Applications - 801 Chemistry - 913.3 Quality Assurance and Control - 921 Mathematics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
4. Efficient authentication of scalable media streams over wireless networks
Yi, Xiaowei (1, 2); Zheng, Gang (1); Li, Mingyu (1, 2); Ma, Hengtai (1); Zheng, Changwen (1)
Source: Multimedia Tools and Applications, v 71, n 3, p 1913-1935, August 2014; ISSN: 13807501, E-ISSN: 15737721; DOI: 10.1007/s11042-012-1324-5; Publisher: Kluwer Academic Publishers
Author affiliation: (1) National Key Lab of Integrated Information System Technology, Institute of Software, Chinese Academy of Sciences, Beijing, China (2) Graduate University of Chinese Academy of Sciences, Beijing, China
Abstract: Media authentication of wireless transmission is becoming an increasingly important issue. Authenticated media content is constantly required to be transcoded at intermediates to accommodate heterogeneous applications. In this paper, a general and efficient authentication approach is proposed for scalable lossy media streams. Firstly, a joint coding and stream authentication (JCSA) media transmission system is described in a heterogeneous wireless network. For the JCSA system, a novel structure-maintained packetization is designed to realize flexible transcoding. Secondly, to obtain the optimal end-to-end quality and minimize the authentication overhead, a quality-optimized stream authentication (QOSA) framework is proposed for authenticating media content. Finally, an implementation of the proposed QOSA optimization framework on the consultative committee for space data systems image data compression (CCSDS IDC) coder is presented by combining graph-based and error-correction coding based (ECC-based) approaches. Experimental results demonstrate that our scheme can achieve the desired goal that it provides high robustness against packet-loss at the cost of a very low overhead. © 2013 Springer Science+Business Media New York. (26 refs)
Main heading: Authentication
Controlled terms: Electronic document identification systems - Heterogeneous networks - Image coding - Media streaming - Wireless networks
Uncontrolled terms: Consultative committee for space data systems - Efficient authentication - Error correction coding - Heterogeneous wireless network - Media quality - Rate-distortion optimization - Stream authentication - Transcoding
Classification Code: 722.4 Digital Computers and Systems - 723 Computer Software, Data Handling and Applications - 723.5 Computer Applications - 741 Light, Optics and Optical Devices
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
5. On the appropriate rationale for Using Design Patterns and Pattern Documentation
Durdik, Zoya (1); Reussner, Ralf H. (1)
Source: Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI), v P227, p 49-50, 2014; ISSN: 16175468; ISBN-13: 9783885796213; Conference: Software Engineering 2014, February 25, 2014 - February 28, 2014; Sponsor: Accelerated Solutions (Accso); Adesso; b+m - Informatik AG; C1 WPS; et al.; imbus; Publisher: Gesellschaft fur Informatik (GI)
Author affiliation: (1) Institute for Program Structures and Data Organization, Karlsruhe Institute of Technology (KIT), Karlsruhe, Germany
Abstract: Software design patterns are proven solutions for recurring design problems. Therefore, one could expect that decisions to use patterns are beneficial and well documented in practice. However, our survey showed that 90% of the software engineers have encountered problems while applying patterns, understanding applied patterns or with their documentation. We address these problems in our paper “On the Appropriate Rationale for Using Design Patterns and Pattern Documentation” published at the “Quality of Software Architecture 2013 (QoSA)” conference. There we present an approach based on a new type of pattern catalogue enriched with question annotations, and the results of a survey with 21 software engineers as a validation of our idea and of exemplary entries of the pattern catalogue. © Gessellschaft für Informatik, Bonn 2014. (1 refs)
Main heading: Software design
Controlled terms: Surveys
Uncontrolled terms: Design Patterns - Design problems - Quality of softwares - Software design patterns
Classification Code: 405.3 Surveying - 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
6. Architecture management and evaluation in mature products: Experiences from a lightweight approach
Raatikainen, Mikko (1); Savolainen, Juha (2); Männistö, Tomi (3)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 73-82, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602583; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Computer, Science and Engineering, Aalto University, Finland (2) Danfoss, Denmark (3) University of Helsinki, Finland
Abstract: Software architecture evaluation is an essential part of architecture management and a means to uncover problems and increase confidence in the capability of the software architecture in fulfilling the most critical requirements. Architecture evaluation is typically carried out at an early stage of a software development. However, development efforts are often related to further development of existing software. We present a case study of the software architecture board (SWAB) initiative carried out at in a company called NSN. SWAB employed a lightweight architecture evaluation and management approach to exchange architectural experiences with related products and assess ability to fulfill future requirements. SWAB operated for two years but ultimately came to an end because the desired objectives were not achieved. The case study provides lessons for the evaluation of architecture in mature products and for using a lightweight evaluation approach: Evaluation in mature products seems not to be about finding problems and risk or making trade-offs, but about architecture management such as better communication, raising awareness about the architecture, and increased confidence to the architecture throughout the organization and a lightweight architecture evaluation seems to be a good approach especially for mature products. However, the motivation and justification for architectural evaluation of mature products remains challenging, as their architecture is already in place and evolved over years towards good candidates, although the need for inter-product communication and alignment of architectural issues can be argued for. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (32 refs)
Main heading: Software architecture
Controlled terms: Communication - Research
Uncontrolled terms: Architectural evaluation - Architecture evaluation - Architecture management - Evaluation approach - Lightweight architecture - Mature product - Related products - Software architecture evaluation
Classification Code: 716 Telecommunication; Radar, Radio and Television - 723.1 Computer Programming - 901.3 Engineering Research
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
7. Automatic detection of performance anti-patterns in inter-component communications
Wert, Alexander (1); Oehler, Marius (2); Heger, Christoph (1); Farahbod, Roozbeh (2)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 3-12, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602579; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Karlsruhe Institute of Technology, Am Fasanengarten 5, Karlsruhe, Germany (2) SAP AG, Vincenz-Priessnitz-Strasse 1, Karlsruhe, Germany
Abstract: Performance problems such as high response times in software applications have a significant effect on the customer’s satisfaction. In enterprise applications, performance problems are frequently manifested in inefficient or unnecessary communication patterns between software components originating from poor architectural design or implementation. Due to high manual effort, thorough performance analysis is often neglected, in practice. In order to overcome this problem, automated engineering approaches are required for the detection of performance problems. In this paper, we introduce several heuristics for measurement-based detection of well-known performance anti-patterns in inter-component communications. The detection heuristics comprise load and instrumentation descriptions for performance tests as well as corresponding detection rules. We integrate these heuristics with Dynamic Spotter, a framework for automatic detection of performance problems. We evaluate our heuristics on four evaluation scenarios based on an e-commerce benchmark (TPC-W) where the heuristics detect the expected communication performance anti-patterns and pinpoint their root causes. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (25 refs)
Main heading: Benchmarking
Controlled terms: Application programs - Customer satisfaction
Uncontrolled terms: Automatic Detection - Communication pattern - Communication performance - Enterprise applications - Performance analysis - Performance problems - Software applications - Software component
Classification Code: 723 Computer Software, Data Handling and Applications - 912 Industrial Engineering and Management
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
8. An empirical investigation of modularity metrics for indicating architectural technical debt
Li, Zengyang (1); Guelfi, Nicolas (2); Liang, Peng (3); Avgeriou, Paris (1); Ampatzoglou, Apostolos (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 119-128, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602581; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Department of Mathematics and Computer Science, University of Groningen, Nijenborgh 9, 9747 AG Groningen, Netherlands (2) Computer Science and Communications Research Unit, University of Luxembourg, 6, rue Richard Coudenhove-Kalergi, L-1359, Luxembourg (3) State Key Lab of Software Engineering, School of Computer, Wuhan University, Luojiasha 430072, Wuhan, China
Abstract: Architectural technical debt (ATD) is incurred by design decisions that consciously or unconsciously compromise system-wide quality attributes, particularly maintainability and evolvability. ATD needs to be identified and measured, so that it can be monitored and eventually repaid, when appropriate. In practice, ATD is difficult to identify and measure, since ATD does not yield observable behaviors to end users. One indicator of ATD, is the average number of modified components per commit (ANMCC): a higher ANMCC indicates more ATD in a software system. However, it is difficult and sometimes impossible to calculate ANMCC, because the data (i.e., the log of commits) are not always available. In this work, we propose to use software modularity metrics, which can be directly calculated based on source code, as a substitute of ANMCC to indicate ATD. We validate the correlation between ANMCC and modularity metrics through a holistic multiple case study on thirteen open source software projects. The results of this study suggest that two modularity metrics, namely Index of Package Changing Impact (IPCI) and Index of Package Goal Focus (IPGF), have significant correlation with ANMCC, and therefore can be used as alternative ATD indicators. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (19 refs)
Main heading: Software architecture
Controlled terms: Open source software
Uncontrolled terms: Commit - Empirical investigation - Modularity metric - Multiple-case study - Observable behavior - Open source software projects - Software modularity - Technical debts
Classification Code: 723.1 Computer Programming
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
9. Experiences with modeling memory contention for multi-core industrial real-time systems
De Gooijer, Thijmen (1); Harper, K. Eric (2)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 43-52, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602584; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) ABB Corporate Research, Västeras, Sweden (2) ABB Corporate Research, Raleigh, NC, United States
Abstract: Wide availability of multicore CPUs makes concurrency a critical design factor for the software architecture and execution models of industrial controllers, especially with messages passing between tasks running on different cores. To improve performance, we refactored a standardized shared memory IPC mechanism implemented with traditional kernel locks to use lock-free algorithms. Prototyping the changes made it possible to determine the speed-up when the locks were removed, but we could neither easily confirm whether the IPC performance would sufice for the communication patterns in our real-time system, nor could we tell how well the implementation would scale to CPUs with more cores than our test machine. In this paper we report on our experience with using a queuing petri net performance model to predict the impact of memory contention in a multi-core CPU on architecture level performance. We instantiated our model with benchmark data and prototype measurements. The results from our model simulation provide valuable feedback for design decisions and point at potential bottlenecks. Comparison of the prototype’s performance with our model simulation results increases credibility of our work. This paper supports other practitioners who consider applying performance modeling to quantify the quality of their architectures. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (37 refs)
Main heading: Industry
Controlled terms: Concurrency control - Locks (fasteners) - Petri nets - Program processors - Real time systems - Software architecture
Uncontrolled terms: Communication pattern - Experience report - Improve performance - Industrial controllers - Lock-free algorithms - Multi core - Performance Model - Prototype measurements
Classification Code: 601.3 Mechanisms - 722.4 Digital Computers and Systems - 723.1 Computer Programming - 723.3 Database Systems - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing - 921.4 Combinatorial Mathematics, Includes Graph Theory, Set Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
10. Dealing with uncertainties in the performance modelling of software systems
Perez-Palacin, Diego (1); Mirandola, Raffaela (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 33-42, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602582; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Politecnico di Milano Dipartimento di Elettronica, Informazione e Bioingegneria, Milano, Italy
Abstract: Models play a central role in the assessment of software non-functional properties like performance and reliability. Models can be used both in the initial phases of development to support the designer decisions and at runtime to evaluate the impact of changes in the existing software. However, being abstraction, the models include perse a certain degree of uncertainty. Nevertheless, often this aspect is neglected and models are used beyond their capabilities. Recognising the presence of uncertainties and managing them, would increase the level of trust in a given software model. In this paper we exploit a recently defined taxonomy that classifies the different types of uncertainties and we define a method that, starting from a given model, helps in recognising the existence of uncertainty, in classifying and managing it. We show the method at work on an example application considering the performance of the application as target non-functional property. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (36 refs)
Main heading: Uncertainty analysis
Controlled terms: Models - Software reliability
Uncontrolled terms: Degree of uncertainty - Impact of changes - Non functional properties - Performance - Performance and reliabilities - Performance modelling - Software systems - Uncertainty
Classification Code: 902.1 Engineering Graphics - 913.3 Quality Assurance and Control - 922.1 Probability Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
11. Formalizing correspondence rules for automotive architecture views
Dajsuren, Yanja (1); Gerpheide, Christine M. (1); Serebrenik, Alexander (1); Wijs, Anton (1); Vasilescu, Bogdan (1); Van Den Brand, Mark G. J. (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 129-138, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602588; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Eindhoven University of Technology, 5612 AZ Eindhoven, Netherlands
Abstract: Architecture views have long been used in software industry to systematically model complex systems by representing them from the perspective of related stakeholder concerns. However, consensus has not been reached for the architecture views between automotive architecture description languages and automotive architecture frameworks. Therefore, this paper presents the automotive architecture views based on an elaborate study of existing automotive architecture description techniques. Furthermore, we propose a method to formalize correspondence rules between architecture views to enforce consistency between architecture views. The approach was implemented in a Java plugin for IBM Rational Rhapsody and evaluated in a case study based on the Adaptive Cruise Control system. The outcome of the evaluation is considered to be a useful approach for formalizing correspondences between different views and a useful tool for automotive architects. Copyright © 2014 ACM 978-1-4503-2577-6/14/ 06 ...$15.00. (39 refs)
Main heading: Architecture
Controlled terms: Adaptive cruise control - Computer control - Large scale systems - Software engineering
Uncontrolled terms: Architecture description - Architecture description languages - Architecture frameworks - Architecture view - Correspondence rule - Plug-ins - Software industry
Classification Code: 402 Buildings and Towers - 406.1 Highway Systems - 723.1 Computer Programming - 723.5 Computer Applications - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
12. Evaluation of a static architectural conformance checking method in a line of computer games
Olsson, Tobias (1); Toll, Daniel (1); Wingkvist, Anna (1); Ericsson, Morgan (2)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 113-118, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602590; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Dept. of Computer Science, Linnaeus University, Kalmar, Sweden (2) Dept. of Computer Science and Engineering, Chalmers University of Technology, University of Gothenburg, Gothenburg, Sweden
Abstract: We present an evaluation of a simple method to find ar- chitectural problems in a product line of computer games. The method uses dependencies (direct, indirect, or no) to automatically classify types in the implementation to high- level components in the product line architecture. We use a commercially available tool to analyse dependencies in the source code. The automatic classification of types is com- pared to a manual classification by the developer, and all mismatches are reported. To evaluate the method, we inspect the source code and look for a pre-defined set of architectural problems in all types. We compare the set of types that contained problems to the set of types where the manual and automatic classification disagreed to determine precision and recall. We also investigate what changes are needed to correct the found mismatches by either designing and implementing changes in the source code or refining the automatic classification. Our evaluation shows that the simple method is effective at detecting architectural problems in a product line of four games. The method is lightweight, customisable and easy to implement early in the development cycle. Copyright © 2014 ACM 978-1-4503-2577-6/14/ 06 ...$15.00. (20 refs)
Main heading: Model checking
Controlled terms: Computer games - Computer programming languages
Uncontrolled terms: Architectural problems - Automatic classification - Conformance checking - Manual classification - Model-View-Controller - MVC - Precision and recall - Product line architecture
Classification Code: 723.1.1 Computer Programming Languages - 723.5 Computer Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
13. Performance-based selection of software and hardware features under parameter uncertainty
Etxeberria, Leire (1); Trubiani, Catia (2); Cortellessa, Vittorio (3); Sagardui, Goiuria (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 23-32, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602585; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Mondragon Unibertsitatea, Mondragon, Spain (2) Gran Sasso Science Institute, L’Aquila, Italy (3) University of L’Aquila, L’Aquila, Italy
Abstract: Configurable software systems allow stakeholders to derive variants by selecting software and/or hardware features. Performance analysis of feature-based systems has been of large interest in the last few years, however a major research challenge is still to conduct such analysis before achieving full knowledge of the system, namely under a certain degree of uncertainty. In this paper we present an approach to analyze the correlation between selection of features embedding uncertain parameters and system performance. In particular, we provide best and worst case performance bounds on the basis of selected features and, in cases of wide gaps among these bounds, we carry on a sensitivity analysis process aimed at taming the uncertainty of parameters. The application of our approach to a case study in the e-health domain demonstrates how to support stakeholders in the identification of system variants that meet performance requirements. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (23 refs)
Main heading: Feature extraction
Controlled terms: Hardware - Software architecture - Uncertainty analysis
Uncontrolled terms: Degree of uncertainty - Identification of systems - Parameter uncertainty - Performance analysis - Performance requirements - Selection of software - Uncertainty - Worst-case performance
Classification Code: 605 Small Tools and Hardware - 716 Telecommunication; Radar, Radio and Television - 723.1 Computer Programming - 922.1 Probability Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
14. Using architecture-level performance models as resource profiles for enterprise applications
Brunnert, Andreas (1); Wischer, Kilian (2); Krcmar, Helmut (2)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 53-62, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602587; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Fortiss GmbH, Guerickestr. 25, 80805 München, Germany (2) Technische Universität München, Boltzmannstr. 3, 85748 Garching, Germany
Abstract: The rising energy and hardware demand is a growing concern in enterprise data centers. It is therefore desirable to limit the hardware resources that need to be added for new enterprise applications (EA). Detailed capacity planning is required to achieve this goal. Otherwise, performance requirements (i.e. response time, throughput, resource utilization) might not be met. This paper introduces resource profiles to support capacity planning. These profiles can be created by EA vendors and allow evaluating energy consumption and performance of EAs for different workloads and hardware environments. Resource profiles are based on architecture-level performance models. These models allow to represent performance-relevant aspects of an EA architecture separately from the hardware environment and workload. The target hardware environment and the expected workload can only be specified by EA hosts and users respectively. To account for these distinct responsibilities, an approach is introduced to adapt resource profiles created by EA vendors to different hardware environments. A case study validates this concept by creating a resource profile for the SPECjEnterprise2010 benchmark application. Predictions using this profile for two hardware environments match energy consumption and performance measurements with an error of mostly below 15 %. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (25 refs)
Main heading: Benchmarking
Controlled terms: Energy utilization - Hardware - Industry
Uncontrolled terms: Benchmark applications - Capacity planning - Component model - Enterprise applications - Performance measurements - Performance Model - Performance requirements - Resource profile
Classification Code: 525.3 Energy Utilization - 605 Small Tools and Hardware - 911 Cost and Value Engineering; Industrial Economics - 912 Industrial Engineering and Management - 913 Production Planning and Control; Manufacturing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
15. Efficient re-resolution of SMT specifications for evolving software architectures
Johnson, Kenneth (1); Calinescu, Radu (2)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 93-102, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602578; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Computer and Mathematical Sciences, Auckland University of Technology, Auckland 1142, New Zealand (2) Department of Computer Science, University of York, York, YO10 5GH, United Kingdom
Abstract: We present a generic method for the effcient constraint re- resolution of a component-based software architecture after changes such as addition, removal and modification of components. Given a formal description of an evolving system as a constraint-specification problem, our method identifies and executes the re-resolution steps required to verify the system’s compliance with constraints after each change. At each step, satisfiability modulo theory (SMT) techniques determine the satisfiability of component constraints expressed as logical formulae over suitably chosen theories of arithmetic, reusing results obtained in previous steps. We illustrate the application of the approach on a constraint- satisfaction problem arising from cloud-deployed software services. The incremental method is shown to re-resolve sys- tem constraints in a fraction of the time taken by standard SMT resolution. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (29 refs)
Main heading: Regulatory compliance
Controlled terms: Compliance control - Formal logic - Problem oriented languages - Software architecture - Specifications
Uncontrolled terms: Component-based software architecture - Domain specific languages - Formal Description - Incremental method - Incremental Re-resolution - Modulo theories - Satisfaction problem - Satisfiability modulo Theories
Classification Code: 721.1 Computer Theory, Includes Formal Logic, Automata Theory, Switching Theory, Programming Theory - 723 Computer Software, Data Handling and Applications - 731.3 Specific Variables Control - 902.2 Codes and Standards
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
16. Empirical resilience evaluation of an architecture-based self-adaptive software system
Cámara, Javier (1); Correia, Pedro (2); De Lemos, Rogério (3); Vieira, Marco (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 63-72, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602577; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Institute for Software Research, Carnegie Mellon University, United States (2) Department of Informatics Engineering, University of Coimbra, Portugal (3) School of Computing, University of Kent, United Kingdom
Abstract: Architecture-based self-adaptation is considered as a promising approach to drive down the development and operation costs of complex software systems operating in ever changing environments. However, there is still a lack of evidence supporting the arguments for the beneficial impact of architecture-based self-adaptation on resilience with respect to other customary approaches, such as embedded code-based adaptation. In this paper, we report on an empirical study about the impact on resilience of incorporating architecture-based self-adaptation in an industrial middle- ware used to collect data in highly populated networks of devices. To this end, we compare the results of resilience evaluation between the original version of the middleware, in which adaptation mechanisms are embedded at the code- level, and a modified version of that middleware in which the adaptation mechanisms are implemented using Rainbow, a framework for architecture-based self-adaptation. Our results show improved levels of resilience in architecture-based compared to embedded code-based self-adaptation. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (32 refs)
Main heading: Network architecture
Controlled terms: Codes (symbols) - Complex networks - Digital storage - Middleware - Model checking
Uncontrolled terms: Adaptation mechanism - Complex software systems - Development and operations - Probabilistic model checking - Rainbow - Resilience evaluation - Self adaptation - Self-adaptive software systems
Classification Code: 722 Computer Systems and Equipment - 722.1 Data Storage, Equipment and Techniques - 723.1 Computer Programming - 723.2 Data Processing and Image Processing
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
17. Failure data collection for reliability prediction models: A survey
Buhnova, Barbora (1); Chren, Stanislav (1); Fabriková, Lucie (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 83-92, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602586; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Masaryk University, Brno, Czech Republic
Abstract: Design decisions made early in software development have great impact on the software product quality. Design-time reliability prediction is one of the techniques that support software engineers in early design decisions, based on the evaluation of reliability impact of the individual design alternatives. The accuracy of reliability prediction is critically dependent on the accuracy of reliability prediction models, which relies on uncertain failure parameters (such as the failure probability of component-internal actions). Although the effectiveness of the failure-parameter estimation critically influences the usability of the prediction techniques, the parameter estimation often relies on expert knowledge and is not receiving systematic attention. This paper aims to survey existing techniques for estimation and collection of failure parameters in architecture-based reliability prediction models, and presents the findings that can be learned from their detailed analysis. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (57 refs)
Main heading: Parameter estimation
Controlled terms: Data acquisition - Design - Failure (mechanical) - Forecasting - Mathematical models - Reliability analysis - Software reliability - Surveying - Surveys - Uncertainty analysis
Uncontrolled terms: Data collection - Early design decisions - Failure parameters - Prediction techniques - Reliability impacts - Reliability prediction - Software product quality - Value estimation
Classification Code: 405.3 Surveying - 408 Structural Design - 421 Strength of Building Materials; Mechanical Properties - 723.2 Data Processing and Image Processing - 723.5 Computer Applications - 731.1 Control Systems - 913 Production Planning and Control; Manufacturing - 913.3 Quality Assurance and Control - 921 Mathematics - 922.1 Probability Theory
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
18. Software QoS enhancement through self-adaptation and formal models
Mirandola, Raffaela (1); Perez-Palacin, Diego (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 145-146, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2611459; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Politecnico di Milano Dipartimento di Elettronica, Informazione e Bioingegneria, Milano, Italy
Abstract: Modern software operates in highly dynamic and often unpredictable environments that can degrade its quality of service. Therefore, it is increasingly important having systems able to adapt their behavior to the environment where they execute at any moment. Nevertheless, software with self-adaptive capabilities is difficult to develop. To make easier its development, different architectural frameworks have been proposed during the last years. A shared characteristic among most frameworks is that they define applications that make an internal use of models, which are analyzed to discover the configurations that better fit in the changing environments. In this context, this tutorial presents the current research advances on architectural frameworks for building self-adaptive software that meets its Quality of Service (QoS). We discuss architectures that use self-adaption to improve the QoS and whose adaptations are planned as a result of the analysis of formal models. We also describe a set of current research challenges that are still preventing the complete automatic control of dependable self-adaptive software. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (20 refs)
Main heading: Quality of service
Controlled terms: Automation - Computer software - Control - Models
Uncontrolled terms: Architectural frameworks - Changing environment - Research advances - Research challenges - Self adaptation - Self-adaptive capability - Self-adaptive software - Unpredictable environments
Classification Code: 723 Computer Software, Data Handling and Applications - 731 Automatic Control Principles and Applications - 732 Control Devices - 902.1 Engineering Graphics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
19. SRMP: A software pattern for deadlocks prevention in real-time concurrency models
Mzid, Rania (1); Mraidha, Chokri (2); Babau, Jean-Philippe (3); Abid, Mohamed (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 139-144, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602591; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) CES Laboratory, National School of Engineers of Sfax, Sfax, Tunisia (2) CEA, LIST, Laboratory of Model Driven Engineering for Embedded Systems, 91191 Gif-sur-Yvette, France (3) Lab-STICC, UBO, UEB Brest, Brest, France
Abstract: Model-based approaches for the development of software intensive real-time embedded systems allow early verification of timing properties at the design phase. At this phase, the Real-Time Operating System (RTOS) may not be chosen, hence some assumptions on the software platform are made to achieve timing verifications such as schedulability analysis of tasks describing the application. Among these assumptions, the synchronization protocol which is used to manage the concurrent access to resources that are shared between tasks. A classical solution is to consider the Priority Ceiling Protocol (PCP) synchronization protocol to avoid deadlocks. However, when this protocol is not provided by the target RTOS on which the application will be deployed, the concurrency model becomes not implementable and a new synchronization protocol must be considered. In this paper, we propose the Shared Resource Merge Pattern (SRMP) which aims to prevent deadlocks when the use of PCP protocol is not allowed by the target RTOS. The application of this pattern on the concurrency model must guarantee that the timing properties of the real-time application are still met. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (17 refs)
Main heading: Software architecture
Controlled terms: Computer operating systems - Synchronization - Verification
Uncontrolled terms: Deadlock - MDA - Priority ceiling protocols - Real time operating system - Real-time embedded systems - Schedulability analysis - Software patterns - Synchronization protocols
Classification Code: 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 961 Systems Science
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
20. Designing and evolving distributed architecture using kevoree
Fouquet, François (1); Nain, Grégory (1); Daubert, Erwan (2); Bourcier, Johann (2); Barais, Olivier (2); Plouzeau, Noel (2); Morin, Brice (3)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 147-148, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2611461; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Interdisciplinary Center for Security Reliability and Trust (SnT), University of Luxembourg, Luxembourg (2) University of Rennes 1, IRISA INRIA Centre, Rennes, France (3) SINTEF ICT, Oslo, Norway
Abstract: Modern software applications are distributed and often operate in dynamic contexts, where requirements, assumptions about the environment, and usage profiles continuously change. These changes are difficult to predict and to anticipate at design time. The running software system should thus be able to react on its own, by dynamically adapting its behavior, in order to sustain a required quality of service. A key challenge is to provide the system with the necessary flexibility to perform self-adaptation, without compromising dependability. Models@Runtime is an emerging paradigm aiming at transferring traditional modeling activities (focusing on quality, verification, and so on) performed by humans, to the running system. In this trend, Kevoree provides a models@ runtime platform to design heterogeneous, distributed and adaptive applications based on the component based software engineering paradigm. At the end of this tutorial, applicants will be able to develop and assemble new components and communication channel to design complex self- adaptable distributed architectures by reusing existing piece of code. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (7 refs)
Main heading: Design
Controlled terms: Application programs - Quality of service
Uncontrolled terms: Adaptive application - Component-based software engineering - Distributed architecture - Dynamic contexts - Running systems - Software applications - Software systems - Traditional models
Classification Code: 408 Structural Design - 723 Computer Software, Data Handling and Applications
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
21. Architectural tactics support in cloud computing providers: The jelastic case
Chavarriaga, Jaime (1); Noguera, Carlos (2); Casallas, Rubby (3); Jonckers, Viviane (2)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 13-22, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602580; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) Universidad de Los Andes, Vrije Universiteit Brussel, Belgium (2) Vrije Universiteit Brussel, Belgium (3) Universidad de Los Andes, Colombia
Abstract: When developing and deploying applications in the cloud, architects face the challenge of conciliating architectural de-cisions with the options and restrictions imposed by the cho-sen cloud provider. An architectural decision can be seen as a two-step process: selecting architectural tactics to pro-mote quality attributes and choosing design alternatives to implement those tactics. Available design alternatives are limited by the o-er of the cloud provider. When con-guring the cloud platform and its services as directed by the chosen tactics, the architect must be mindful of conicts among the available alternatives. These trade-o-s amongst the desired quality attributes can be di-cult to detect, understand and ultimately solve. In this paper, we consider the case of Je-lastic, a particular cloud platform provider, to illustrate: 1) the modeling of architectural tactics and their corresponding design alternatives using cloud con-guration options, and 2) a process that exploits these models to determine which op-tions to use in order to implement a combination of tactics. Furthermore, we present an analysis for this cloud provider that explains which combinations of tactics and con-gura-tions lead to trade-o-s. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (18 refs)
Main heading: Architectural design
Controlled terms: Cloud computing - Commerce
Uncontrolled terms: Architectural decision - Architectural Tac-tics - Cloud platforms - Cloud providers - Design alternatives - Feature modeling - Quality attributes - Two-step process
Classification Code: 402 Buildings and Towers - 722.4 Digital Computers and Systems - 911.2 Industrial Economics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	
22. Regression verification of AADL models through slicing of system dependence graphs
Johnsen, Andreas (1); Lundqvist, Kristina (1); Pettersson, Paul (1); Hänninen, Kaj (1)
Source: QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014), p 103-112, 2014, QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014); ISBN-13: 9781450325769; DOI: 10.1145/2602576.2602589; Conference: 10th International ACM SIGSOFT Conference on Quality of Software Architectures, QoSA 2014, June 30, 2014 - July 4, 2014; Sponsor: Special Interest Group on Software Engineering (ACM SIGSOFT); Publisher: Association for Computing Machinery
Author affiliation: (1) School of Innovation, Design and Engineering, Mälardalen University, Västeras, Sweden
Abstract: Design artifacts of embedded systems are subjected to a number of modifications during the development process. Verified artifacts that subsequently are modified must nec- essarily be re-Verified to ensure that no faults have been introduced in response to the modification. We collectively call this type of verification as regression verification. In this paper, we contribute with a technique for selective regression verification of embedded systems modeled in the Architec- ture Analysis and Design Language (AADL). The technique can be used with any AADL-based verification technique to eficiently perform regression verification by only selecting verification sequences that cover parts that are afiected by the modification for re-execution. This allows for the avoid- ance of unnecessary re-verification, and thereby unnecessary costs. The selection is based on the concept of specification slicing through system dependence graphs (SDGs) such that the efiect of a modification can be identified. Copyright © 2014 ACM 978-1-4503-2577-6/14/06 ...$15.00. (14 refs)
Main heading: Regression analysis
Controlled terms: Embedded systems - Software architecture - Specifications
Uncontrolled terms: AADL - Design artifacts - Design languages - Development process - Re-execution - System dependence graph - Verification techniques
Classification Code: 722 Computer Systems and Equipment - 723 Computer Software, Data Handling and Applications - 902.2 Codes and Standards - 922.2 Mathematical Statistics
Database: Compendex
Compilation and indexing terms, Copyright 2015 Elsevier Inc.
Data Provider: Engineering Village
	


